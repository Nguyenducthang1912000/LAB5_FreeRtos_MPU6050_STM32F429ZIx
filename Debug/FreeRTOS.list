
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08009358  08009358  00019358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b0  080096b0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080096b0  080096b0  000196b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096b8  080096b8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096b8  080096b8  000196b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080096c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040d4  200001e0  080098a0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042b4  080098a0  000242b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a995  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003664  00000000  00000000  0003aba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001508  00000000  00000000  0003e210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001398  00000000  00000000  0003f718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027328  00000000  00000000  00040ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011479  00000000  00000000  00067dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4f11  00000000  00000000  00079251  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006568  00000000  00000000  0015e1e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009340 	.word	0x08009340

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08009340 	.word	0x08009340

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <MPU6050_Init>:
#include "MPU6050.h"
/* Raw value */
float Accel_X_RAW,Accel_Y_RAW,Accel_Z_RAW;
float Gyro_X_RAW,Gyro_Y_RAW,Gyro_Z_RAW;
void MPU6050_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1 , &check, 1, 1000);
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2301      	movs	r3, #1
 8000ede:	2275      	movs	r2, #117	; 0x75
 8000ee0:	21d0      	movs	r1, #208	; 0xd0
 8000ee2:	4814      	ldr	r0, [pc, #80]	; (8000f34 <MPU6050_Init+0x6c>)
 8000ee4:	f001 f9a0 	bl	8002228 <HAL_I2C_Mem_Read>

	if (check == 104)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b68      	cmp	r3, #104	; 0x68
 8000eec:	d11d      	bne.n	8000f2a <MPU6050_Init+0x62>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	226b      	movs	r2, #107	; 0x6b
 8000f04:	21d0      	movs	r1, #208	; 0xd0
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <MPU6050_Init+0x6c>)
 8000f08:	f001 f894 	bl	8002034 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	1dbb      	adds	r3, r7, #6
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2219      	movs	r2, #25
 8000f22:	21d0      	movs	r1, #208	; 0xd0
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <MPU6050_Init+0x6c>)
 8000f26:	f001 f885 	bl	8002034 <HAL_I2C_Mem_Write>
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200041ac 	.word	0x200041ac

08000f38 <MPU6050_Read_Gyro>:
//	Accel->y = Accel_Y_RAW/16384.0;
//	Accel->z = Accel_Z_RAW/16384.0;
//
//}
void MPU6050_Read_Gyro(MPU6050_Gyro *Gyro)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];
	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f44:	9302      	str	r3, [sp, #8]
 8000f46:	2306      	movs	r3, #6
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	2243      	movs	r2, #67	; 0x43
 8000f54:	21d0      	movs	r1, #208	; 0xd0
 8000f56:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <MPU6050_Read_Gyro+0xbc>)
 8000f58:	f001 f966 	bl	8002228 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000f5c:	7a3b      	ldrb	r3, [r7, #8]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	7a7b      	ldrb	r3, [r7, #9]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <MPU6050_Read_Gyro+0xc0>)
 8000f74:	edc3 7a00 	vstr	s15, [r3]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000f78:	7abb      	ldrb	r3, [r7, #10]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7afb      	ldrb	r3, [r7, #11]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MPU6050_Read_Gyro+0xc4>)
 8000f90:	edc3 7a00 	vstr	s15, [r3]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000f94:	7b3b      	ldrb	r3, [r7, #12]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MPU6050_Read_Gyro+0xc8>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gyro->x = Gyro_X_RAW/131.0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MPU6050_Read_Gyro+0xc0>)
 8000fb2:	ed93 7a00 	vldr	s14, [r3]
 8000fb6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001004 <MPU6050_Read_Gyro+0xcc>
 8000fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	edc3 7a00 	vstr	s15, [r3]
	Gyro->y = Gyro_Y_RAW/131.0;
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <MPU6050_Read_Gyro+0xc4>)
 8000fc6:	ed93 7a00 	vldr	s14, [r3]
 8000fca:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001004 <MPU6050_Read_Gyro+0xcc>
 8000fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	edc3 7a01 	vstr	s15, [r3, #4]
	Gyro->z = Gyro_Z_RAW/131.0;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MPU6050_Read_Gyro+0xc8>)
 8000fda:	ed93 7a00 	vldr	s14, [r3]
 8000fde:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001004 <MPU6050_Read_Gyro+0xcc>
 8000fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200041ac 	.word	0x200041ac
 8000ff8:	20004200 	.word	0x20004200
 8000ffc:	20004210 	.word	0x20004210
 8001000:	2000420c 	.word	0x2000420c
 8001004:	43030000 	.word	0x43030000

08001008 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <vApplicationGetIdleTaskMemory+0x2c>)
 8001018:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <vApplicationGetIdleTaskMemory+0x30>)
 800101e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200001fc 	.word	0x200001fc
 8001038:	20000250 	.word	0x20000250

0800103c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001044:	1d39      	adds	r1, r7, #4
 8001046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800104a:	2201      	movs	r2, #1
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <__io_putchar+0x20>)
 800104e:	f002 fe56 	bl	8003cfe <HAL_UART_Transmit>
		return ch;
 8001052:	687b      	ldr	r3, [r7, #4]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000421c 	.word	0x2000421c

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b090      	sub	sp, #64	; 0x40
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001066:	f000 fbdf 	bl	8001828 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050_Init();
 800106a:	f7ff ff2d 	bl	8000ec8 <MPU6050_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f845 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f000 f91d 	bl	80012b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001076:	f000 f8b1 	bl	80011dc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800107a:	f000 f8ef 	bl	800125c <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 800107e:	2300      	movs	r3, #0
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
 8001082:	2300      	movs	r3, #0
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 8001086:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800108a:	2101      	movs	r1, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f003 fb26 	bl	80046de <osSemaphoreCreate>
 8001092:	4602      	mov	r2, r0
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <main+0x88>)
 8001096:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityRealtime, 0, 128*4);
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <main+0x8c>)
 800109a:	f107 041c 	add.w	r4, r7, #28
 800109e:	461d      	mov	r5, r3
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fab3 	bl	800461e <osThreadCreate>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <main+0x90>)
 80010bc:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityHigh, 0, 128*4);
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <main+0x94>)
 80010c0:	463c      	mov	r4, r7
 80010c2:	461d      	mov	r5, r3
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80010d0:	463b      	mov	r3, r7
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 faa2 	bl	800461e <osThreadCreate>
 80010da:	4602      	mov	r2, r0
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <main+0x98>)
 80010de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010e0:	f003 fa96 	bl	8004610 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <main+0x84>
 80010e6:	bf00      	nop
 80010e8:	2000425c 	.word	0x2000425c
 80010ec:	08009360 	.word	0x08009360
 80010f0:	20004218 	.word	0x20004218
 80010f4:	08009384 	.word	0x08009384
 80010f8:	20004214 	.word	0x20004214

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f005 fdf3 	bl	8006cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <SystemClock_Config+0xd8>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a2a      	ldr	r2, [pc, #168]	; (80011d4 <SystemClock_Config+0xd8>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <SystemClock_Config+0xd8>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <SystemClock_Config+0xdc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <SystemClock_Config+0xdc>)
 8001146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <SystemClock_Config+0xdc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001160:	2310      	movs	r3, #16
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001164:	2302      	movs	r3, #2
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800116c:	2308      	movs	r3, #8
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001170:	23b4      	movs	r3, #180	; 0xb4
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fe9d 	bl	8002ec0 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800118c:	f000 f92e 	bl	80013ec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001190:	f001 fe46 	bl	8002e20 <HAL_PWREx_EnableOverDrive>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800119a:	f000 f927 	bl	80013ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119e:	230f      	movs	r3, #15
 80011a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a2:	2302      	movs	r3, #2
 80011a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	2105      	movs	r1, #5
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 f8ef 	bl	80033a0 <HAL_RCC_ClockConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80011c8:	f000 f910 	bl	80013ec <Error_Handler>
  }
}
 80011cc:	bf00      	nop
 80011ce:	3750      	adds	r7, #80	; 0x50
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000

080011dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_I2C1_Init+0x74>)
 80011e2:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <MX_I2C1_Init+0x78>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_I2C1_Init+0x74>)
 80011e8:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <MX_I2C1_Init+0x7c>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_I2C1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_I2C1_Init+0x74>)
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_I2C1_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_I2C1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_I2C1_Init+0x74>)
 800121a:	f000 fdd3 	bl	8001dc4 <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 f8e2 	bl	80013ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <MX_I2C1_Init+0x74>)
 800122c:	f001 fd7d 	bl	8002d2a <HAL_I2CEx_ConfigAnalogFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001236:	f000 f8d9 	bl	80013ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_I2C1_Init+0x74>)
 800123e:	f001 fdb0 	bl	8002da2 <HAL_I2CEx_ConfigDigitalFilter>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001248:	f000 f8d0 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200041ac 	.word	0x200041ac
 8001254:	40005400 	.word	0x40005400
 8001258:	000186a0 	.word	0x000186a0

0800125c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <MX_USART1_UART_Init+0x50>)
 8001264:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800126c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <MX_USART1_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001282:	220c      	movs	r2, #12
 8001284:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_USART1_UART_Init+0x4c>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_USART1_UART_Init+0x4c>)
 8001294:	f002 fce6 	bl	8003c64 <HAL_UART_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800129e:	f000 f8a5 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000421c 	.word	0x2000421c
 80012ac:	40011000 	.word	0x40011000

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_GPIO_Init+0x68>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <MX_GPIO_Init+0x68>)
 80012c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_GPIO_Init+0x68>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_GPIO_Init+0x68>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <MX_GPIO_Init+0x68>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <MX_GPIO_Init+0x68>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_GPIO_Init+0x68>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <MX_GPIO_Init+0x68>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_GPIO_Init+0x68>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(BinSemHandle, osWaitForever);
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <StartTask1+0x30>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	4618      	mov	r0, r3
 800132e:	f003 fa09 	bl	8004744 <osSemaphoreWait>
	MPU6050_Read_Gyro(&Gyro);
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <StartTask1+0x34>)
 8001334:	f7ff fe00 	bl	8000f38 <MPU6050_Read_Gyro>
	osSemaphoreRelease(BinSemHandle);
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <StartTask1+0x30>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f003 fa4f 	bl	80047e0 <osSemaphoreRelease>
//	printf("hhaha \n");
    osDelay(100);
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f003 f9b7 	bl	80046b6 <osDelay>
	osSemaphoreWait(BinSemHandle, osWaitForever);
 8001348:	e7ec      	b.n	8001324 <StartTask1+0x8>
 800134a:	bf00      	nop
 800134c:	2000425c 	.word	0x2000425c
 8001350:	20004260 	.word	0x20004260

08001354 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001354:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af04      	add	r7, sp, #16
 800135c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(BinSemHandle, osWaitForever);
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <StartTask02+0x68>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f04f 31ff 	mov.w	r1, #4294967295
 8001366:	4618      	mov	r0, r3
 8001368:	f003 f9ec 	bl	8004744 <osSemaphoreWait>
	printf("Gyroscope value: x = %f , y = %f , z = %f \n",Gyro.x,Gyro.y,Gyro.z);
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <StartTask02+0x6c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f8f9 	bl	8000568 <__aeabi_f2d>
 8001376:	4680      	mov	r8, r0
 8001378:	4689      	mov	r9, r1
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <StartTask02+0x6c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8f2 	bl	8000568 <__aeabi_f2d>
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <StartTask02+0x6c>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8eb 	bl	8000568 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800139a:	e9cd 4500 	strd	r4, r5, [sp]
 800139e:	4642      	mov	r2, r8
 80013a0:	464b      	mov	r3, r9
 80013a2:	4808      	ldr	r0, [pc, #32]	; (80013c4 <StartTask02+0x70>)
 80013a4:	f006 f90c 	bl	80075c0 <iprintf>
//	printf("Hello \n");
//	osThreadTerminate(Task02Handle);
	osSemaphoreRelease(BinSemHandle);
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <StartTask02+0x68>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fa17 	bl	80047e0 <osSemaphoreRelease>
	osDelay(100);
 80013b2:	2064      	movs	r0, #100	; 0x64
 80013b4:	f003 f97f 	bl	80046b6 <osDelay>
	osSemaphoreWait(BinSemHandle, osWaitForever);
 80013b8:	e7d1      	b.n	800135e <StartTask02+0xa>
 80013ba:	bf00      	nop
 80013bc:	2000425c 	.word	0x2000425c
 80013c0:	20004260 	.word	0x20004260
 80013c4:	080093a0 	.word	0x080093a0

080013c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013da:	f000 fa47 	bl	800186c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40010000 	.word	0x40010000

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <Error_Handler+0x6>

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_MspInit+0x54>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a11      	ldr	r2, [pc, #68]	; (8001448 <HAL_MspInit+0x54>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_MspInit+0x54>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_MspInit+0x54>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_MspInit+0x54>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_MspInit+0x54>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	210f      	movs	r1, #15
 8001436:	f06f 0001 	mvn.w	r0, #1
 800143a:	f000 faef 	bl	8001a1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_I2C_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12b      	bne.n	80014c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800148a:	23c0      	movs	r3, #192	; 0xc0
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148e:	2312      	movs	r3, #18
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001492:	2301      	movs	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149a:	2304      	movs	r3, #4
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <HAL_I2C_MspInit+0x8c>)
 80014a6:	f000 fae3 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <HAL_UART_MspInit+0x84>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12c      	bne.n	8001558 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_UART_MspInit+0x88>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a17      	ldr	r2, [pc, #92]	; (8001564 <HAL_UART_MspInit+0x88>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_UART_MspInit+0x88>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_UART_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_UART_MspInit+0x88>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_UART_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001536:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001548:	2307      	movs	r3, #7
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_UART_MspInit+0x8c>)
 8001554:	f000 fa8c 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	; 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40011000 	.word	0x40011000
 8001564:	40023800 	.word	0x40023800
 8001568:	40020000 	.word	0x40020000

0800156c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	2019      	movs	r0, #25
 8001582:	f000 fa4b 	bl	8001a1c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001586:	2019      	movs	r0, #25
 8001588:	f000 fa64 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_InitTick+0xa4>)
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_InitTick+0xa4>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6453      	str	r3, [r2, #68]	; 0x44
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_InitTick+0xa4>)
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a8:	f107 0210 	add.w	r2, r7, #16
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 f8e6 	bl	8003784 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80015b8:	f002 f8d0 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 80015bc:	4603      	mov	r3, r0
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <HAL_InitTick+0xa8>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	3b01      	subs	r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_InitTick+0xac>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <HAL_InitTick+0xb0>)
 80015d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_InitTick+0xac>)
 80015d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_InitTick+0xac>)
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_InitTick+0xac>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_InitTick+0xac>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <HAL_InitTick+0xac>)
 80015f2:	f002 f8f9 	bl	80037e8 <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d104      	bne.n	8001606 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_InitTick+0xac>)
 80015fe:	f002 f928 	bl	8003852 <HAL_TIM_Base_Start_IT>
 8001602:	4603      	mov	r3, r0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3730      	adds	r7, #48	; 0x30
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	431bde83 	.word	0x431bde83
 8001618:	2000426c 	.word	0x2000426c
 800161c:	40010000 	.word	0x40010000

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x4>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001652:	f002 f922 	bl	800389a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000426c 	.word	0x2000426c

08001660 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e00a      	b.n	8001688 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001672:	f3af 8000 	nop.w
 8001676:	4601      	mov	r1, r0
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	b2ca      	uxtb	r2, r1
 8001680:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf0      	blt.n	8001672 <_read+0x12>
	}

return len;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e009      	b.n	80016c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fcc1 	bl	800103c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf1      	blt.n	80016ac <_write+0x12>
	}
	return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_close>:

int _close(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
	return -1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016fa:	605a      	str	r2, [r3, #4]
	return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_isatty>:

int _isatty(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
	return 1;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
	return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f005 fa8e 	bl	8006c8c <__errno>
 8001770:	4602      	mov	r2, r0
 8001772:	230c      	movs	r3, #12
 8001774:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20030000 	.word	0x20030000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20000450 	.word	0x20000450
 80017a4:	200042b8 	.word	0x200042b8

080017a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <SystemInit+0x28>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <SystemInit+0x28>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SystemInit+0x28>)
 80017be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017c2:	609a      	str	r2, [r3, #8]
#endif
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017da:	e003      	b.n	80017e4 <LoopCopyDataInit>

080017dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017e2:	3104      	adds	r1, #4

080017e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017e4:	480b      	ldr	r0, [pc, #44]	; (8001814 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017ec:	d3f6      	bcc.n	80017dc <CopyDataInit>
  ldr  r2, =_sbss
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017f0:	e002      	b.n	80017f8 <LoopFillZerobss>

080017f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017f4:	f842 3b04 	str.w	r3, [r2], #4

080017f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017fc:	d3f9      	bcc.n	80017f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017fe:	f7ff ffd3 	bl	80017a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f005 fa49 	bl	8006c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7ff fc2b 	bl	8001060 <main>
  bx  lr    
 800180a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800180c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001810:	080096c0 	.word	0x080096c0
  ldr  r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001818:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800181c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001820:	200042b4 	.word	0x200042b4

08001824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC_IRQHandler>
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <HAL_Init+0x40>)
 8001832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_Init+0x40>)
 800183e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_Init+0x40>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 f8d8 	bl	8001a06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fe88 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185c:	f7ff fdca 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008
 8001890:	200042ac 	.word	0x200042ac

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200042ac 	.word	0x200042ac

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4907      	ldr	r1, [pc, #28]	; (8001948 <__NVIC_EnableIRQ+0x38>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff4c 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2e:	f7ff ff61 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	6978      	ldr	r0, [r7, #20]
 8001a3a:	f7ff ffb1 	bl	80019a0 <NVIC_EncodePriority>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff80 	bl	800194c <__NVIC_SetPriority>
}
 8001a4c:	bf00      	nop
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff54 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e177      	b.n	8001d7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8166 	bne.w	8001d76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d00b      	beq.n	8001aca <HAL_GPIO_Init+0x5a>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001abe:	2b11      	cmp	r3, #17
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0xfc>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b12      	cmp	r3, #18
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80c0 	beq.w	8001d76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <HAL_GPIO_Init+0x320>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a64      	ldr	r2, [pc, #400]	; (8001d90 <HAL_GPIO_Init+0x320>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_GPIO_Init+0x320>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a60      	ldr	r2, [pc, #384]	; (8001d94 <HAL_GPIO_Init+0x324>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a57      	ldr	r2, [pc, #348]	; (8001d98 <HAL_GPIO_Init+0x328>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d037      	beq.n	8001cae <HAL_GPIO_Init+0x23e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_GPIO_Init+0x32c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_GPIO_Init+0x23a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_GPIO_Init+0x330>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d02b      	beq.n	8001ca6 <HAL_GPIO_Init+0x236>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a54      	ldr	r2, [pc, #336]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d025      	beq.n	8001ca2 <HAL_GPIO_Init+0x232>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a53      	ldr	r2, [pc, #332]	; (8001da8 <HAL_GPIO_Init+0x338>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01f      	beq.n	8001c9e <HAL_GPIO_Init+0x22e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <HAL_GPIO_Init+0x33c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d019      	beq.n	8001c9a <HAL_GPIO_Init+0x22a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <HAL_GPIO_Init+0x340>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <HAL_GPIO_Init+0x226>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <HAL_GPIO_Init+0x344>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00d      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4f      	ldr	r2, [pc, #316]	; (8001db8 <HAL_GPIO_Init+0x348>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d007      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4e      	ldr	r2, [pc, #312]	; (8001dbc <HAL_GPIO_Init+0x34c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c86:	2309      	movs	r3, #9
 8001c88:	e012      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	e010      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c8e:	2308      	movs	r3, #8
 8001c90:	e00e      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00c      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c96:	2306      	movs	r3, #6
 8001c98:	e00a      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	e008      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e004      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e002      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f002 0203 	and.w	r2, r2, #3
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	4093      	lsls	r3, r2
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc0:	4934      	ldr	r1, [pc, #208]	; (8001d94 <HAL_GPIO_Init+0x324>)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cce:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf2:	4a33      	ldr	r2, [pc, #204]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1c:	4a28      	ldr	r2, [pc, #160]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d22:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d46:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d70:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b0f      	cmp	r3, #15
 8001d80:	f67f ae84 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d84:	bf00      	nop
 8001d86:	3724      	adds	r7, #36	; 0x24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40021400 	.word	0x40021400
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40021c00 	.word	0x40021c00
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	40022400 	.word	0x40022400
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e11f      	b.n	8002016 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fb2e 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e28:	f001 fc84 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8001e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a7b      	ldr	r2, [pc, #492]	; (8002020 <HAL_I2C_Init+0x25c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d807      	bhi.n	8001e48 <HAL_I2C_Init+0x84>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a7a      	ldr	r2, [pc, #488]	; (8002024 <HAL_I2C_Init+0x260>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bf94      	ite	ls
 8001e40:	2301      	movls	r3, #1
 8001e42:	2300      	movhi	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	e006      	b.n	8001e56 <HAL_I2C_Init+0x92>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a77      	ldr	r2, [pc, #476]	; (8002028 <HAL_I2C_Init+0x264>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0db      	b.n	8002016 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4a72      	ldr	r2, [pc, #456]	; (800202c <HAL_I2C_Init+0x268>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0c9b      	lsrs	r3, r3, #18
 8001e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a64      	ldr	r2, [pc, #400]	; (8002020 <HAL_I2C_Init+0x25c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d802      	bhi.n	8001e98 <HAL_I2C_Init+0xd4>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3301      	adds	r3, #1
 8001e96:	e009      	b.n	8001eac <HAL_I2C_Init+0xe8>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	4a63      	ldr	r2, [pc, #396]	; (8002030 <HAL_I2C_Init+0x26c>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	3301      	adds	r3, #1
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4956      	ldr	r1, [pc, #344]	; (8002020 <HAL_I2C_Init+0x25c>)
 8001ec8:	428b      	cmp	r3, r1
 8001eca:	d80d      	bhi.n	8001ee8 <HAL_I2C_Init+0x124>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e59      	subs	r1, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	bf38      	it	cc
 8001ee4:	2304      	movcc	r3, #4
 8001ee6:	e04f      	b.n	8001f88 <HAL_I2C_Init+0x1c4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d111      	bne.n	8001f14 <HAL_I2C_Init+0x150>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e58      	subs	r0, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	440b      	add	r3, r1
 8001efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	e012      	b.n	8001f3a <HAL_I2C_Init+0x176>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1e58      	subs	r0, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	0099      	lsls	r1, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_Init+0x17e>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e022      	b.n	8001f88 <HAL_I2C_Init+0x1c4>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10e      	bne.n	8001f68 <HAL_I2C_Init+0x1a4>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1e58      	subs	r0, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6859      	ldr	r1, [r3, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	440b      	add	r3, r1
 8001f58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f66:	e00f      	b.n	8001f88 <HAL_I2C_Init+0x1c4>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1e58      	subs	r0, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	0099      	lsls	r1, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	6809      	ldr	r1, [r1, #0]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6911      	ldr	r1, [r2, #16]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68d2      	ldr	r2, [r2, #12]
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	000186a0 	.word	0x000186a0
 8002024:	001e847f 	.word	0x001e847f
 8002028:	003d08ff 	.word	0x003d08ff
 800202c:	431bde83 	.word	0x431bde83
 8002030:	10624dd3 	.word	0x10624dd3

08002034 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4603      	mov	r3, r0
 8002044:	817b      	strh	r3, [r7, #10]
 8002046:	460b      	mov	r3, r1
 8002048:	813b      	strh	r3, [r7, #8]
 800204a:	4613      	mov	r3, r2
 800204c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800204e:	f7ff fc21 	bl	8001894 <HAL_GetTick>
 8002052:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b20      	cmp	r3, #32
 800205e:	f040 80d9 	bne.w	8002214 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2319      	movs	r3, #25
 8002068:	2201      	movs	r2, #1
 800206a:	496d      	ldr	r1, [pc, #436]	; (8002220 <HAL_I2C_Mem_Write+0x1ec>)
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fc7f 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
 800207a:	e0cc      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_I2C_Mem_Write+0x56>
 8002086:	2302      	movs	r3, #2
 8002088:	e0c5      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d007      	beq.n	80020b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2221      	movs	r2, #33	; 0x21
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2240      	movs	r2, #64	; 0x40
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a3a      	ldr	r2, [r7, #32]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <HAL_I2C_Mem_Write+0x1f0>)
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020f2:	88f8      	ldrh	r0, [r7, #6]
 80020f4:	893a      	ldrh	r2, [r7, #8]
 80020f6:	8979      	ldrh	r1, [r7, #10]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4603      	mov	r3, r0
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fab6 	bl	8002674 <I2C_RequestMemoryWrite>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d052      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e081      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fd00 	bl	8002b1c <I2C_WaitOnTXEFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b04      	cmp	r3, #4
 8002128:	d107      	bne.n	800213a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11b      	bne.n	80021b4 <HAL_I2C_Mem_Write+0x180>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d017      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1aa      	bne.n	8002112 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fcec 	bl	8002b9e <I2C_WaitOnBTFFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00d      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d107      	bne.n	80021e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e016      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002214:	2302      	movs	r3, #2
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	00100002 	.word	0x00100002
 8002224:	ffff0000 	.word	0xffff0000

08002228 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	4608      	mov	r0, r1
 8002232:	4611      	mov	r1, r2
 8002234:	461a      	mov	r2, r3
 8002236:	4603      	mov	r3, r0
 8002238:	817b      	strh	r3, [r7, #10]
 800223a:	460b      	mov	r3, r1
 800223c:	813b      	strh	r3, [r7, #8]
 800223e:	4613      	mov	r3, r2
 8002240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002242:	f7ff fb27 	bl	8001894 <HAL_GetTick>
 8002246:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b20      	cmp	r3, #32
 8002252:	f040 8208 	bne.w	8002666 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2319      	movs	r3, #25
 800225c:	2201      	movs	r2, #1
 800225e:	497b      	ldr	r1, [pc, #492]	; (800244c <HAL_I2C_Mem_Read+0x224>)
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fb85 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800226c:	2302      	movs	r3, #2
 800226e:	e1fb      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_I2C_Mem_Read+0x56>
 800227a:	2302      	movs	r3, #2
 800227c:	e1f4      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d007      	beq.n	80022a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2222      	movs	r2, #34	; 0x22
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a5b      	ldr	r2, [pc, #364]	; (8002450 <HAL_I2C_Mem_Read+0x228>)
 80022e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022e6:	88f8      	ldrh	r0, [r7, #6]
 80022e8:	893a      	ldrh	r2, [r7, #8]
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4603      	mov	r3, r0
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fa52 	bl	80027a0 <I2C_RequestMemoryRead>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e1b0      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	2b00      	cmp	r3, #0
 800230c:	d113      	bne.n	8002336 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	623b      	str	r3, [r7, #32]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	623b      	str	r3, [r7, #32]
 8002322:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e184      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	2b01      	cmp	r3, #1
 800233c:	d11b      	bne.n	8002376 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e164      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237a:	2b02      	cmp	r3, #2
 800237c:	d11b      	bne.n	80023b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	e144      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023cc:	e138      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	f200 80f1 	bhi.w	80025ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d123      	bne.n	8002428 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fc1b 	bl	8002c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e139      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002426:	e10b      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	2b02      	cmp	r3, #2
 800242e:	d14e      	bne.n	80024ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	2200      	movs	r2, #0
 8002438:	4906      	ldr	r1, [pc, #24]	; (8002454 <HAL_I2C_Mem_Read+0x22c>)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fa98 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e10e      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
 800244a:	bf00      	nop
 800244c:	00100002 	.word	0x00100002
 8002450:	ffff0000 	.word	0xffff0000
 8002454:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024cc:	e0b8      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d4:	2200      	movs	r2, #0
 80024d6:	4966      	ldr	r1, [pc, #408]	; (8002670 <HAL_I2C_Mem_Read+0x448>)
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fa49 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0bf      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	2200      	movs	r2, #0
 8002532:	494f      	ldr	r1, [pc, #316]	; (8002670 <HAL_I2C_Mem_Read+0x448>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fa1b 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e091      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025b8:	e042      	b.n	8002640 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fb2e 	bl	8002c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e04c      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d118      	bne.n	8002640 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f aec2 	bne.w	80023ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3728      	adds	r7, #40	; 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	00010004 	.word	0x00010004

08002674 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	817b      	strh	r3, [r7, #10]
 8002686:	460b      	mov	r3, r1
 8002688:	813b      	strh	r3, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f960 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c4:	d103      	bne.n	80026ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e05f      	b.n	8002792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	6a3a      	ldr	r2, [r7, #32]
 80026e6:	492d      	ldr	r1, [pc, #180]	; (800279c <I2C_RequestMemoryWrite+0x128>)
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f998 	bl	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e04c      	b.n	8002792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	6a39      	ldr	r1, [r7, #32]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fa02 	bl	8002b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b04      	cmp	r3, #4
 8002724:	d107      	bne.n	8002736 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002734:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e02b      	b.n	8002792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002740:	893b      	ldrh	r3, [r7, #8]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	611a      	str	r2, [r3, #16]
 800274a:	e021      	b.n	8002790 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800274c:	893b      	ldrh	r3, [r7, #8]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b29b      	uxth	r3, r3
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275c:	6a39      	ldr	r1, [r7, #32]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f9dc 	bl	8002b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00d      	beq.n	8002786 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	2b04      	cmp	r3, #4
 8002770:	d107      	bne.n	8002782 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002780:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e005      	b.n	8002792 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002786:	893b      	ldrh	r3, [r7, #8]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	00010002 	.word	0x00010002

080027a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	4608      	mov	r0, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	817b      	strh	r3, [r7, #10]
 80027b2:	460b      	mov	r3, r1
 80027b4:	813b      	strh	r3, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f8c2 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002800:	d103      	bne.n	800280a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0aa      	b.n	8002964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800280e:	897b      	ldrh	r3, [r7, #10]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800281c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	6a3a      	ldr	r2, [r7, #32]
 8002822:	4952      	ldr	r1, [pc, #328]	; (800296c <I2C_RequestMemoryRead+0x1cc>)
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f8fa 	bl	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e097      	b.n	8002964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	6a39      	ldr	r1, [r7, #32]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f964 	bl	8002b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00d      	beq.n	8002876 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2b04      	cmp	r3, #4
 8002860:	d107      	bne.n	8002872 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002870:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e076      	b.n	8002964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d105      	bne.n	8002888 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800287c:	893b      	ldrh	r3, [r7, #8]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	e021      	b.n	80028cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002888:	893b      	ldrh	r3, [r7, #8]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	b29b      	uxth	r3, r3
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002898:	6a39      	ldr	r1, [r7, #32]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f93e 	bl	8002b1c <I2C_WaitOnTXEFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00d      	beq.n	80028c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d107      	bne.n	80028be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e050      	b.n	8002964 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028c2:	893b      	ldrh	r3, [r7, #8]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	6a39      	ldr	r1, [r7, #32]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f923 	bl	8002b1c <I2C_WaitOnTXEFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00d      	beq.n	80028f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d107      	bne.n	80028f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e035      	b.n	8002964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002906:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	2200      	movs	r2, #0
 8002910:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f82b 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00d      	beq.n	800293c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292e:	d103      	bne.n	8002938 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e013      	b.n	8002964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800293c:	897b      	ldrh	r3, [r7, #10]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	6a3a      	ldr	r2, [r7, #32]
 8002950:	4906      	ldr	r1, [pc, #24]	; (800296c <I2C_RequestMemoryRead+0x1cc>)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f863 	bl	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	00010002 	.word	0x00010002

08002970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002980:	e025      	b.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d021      	beq.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7fe ff83 	bl	8001894 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d116      	bne.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f043 0220 	orr.w	r2, r3, #32
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e023      	b.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d10d      	bne.n	80029f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4013      	ands	r3, r2
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	e00c      	b.n	8002a0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4013      	ands	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf0c      	ite	eq
 8002a06:	2301      	moveq	r3, #1
 8002a08:	2300      	movne	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d0b6      	beq.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a2c:	e051      	b.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3c:	d123      	bne.n	8002a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0204 	orr.w	r2, r3, #4
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e046      	b.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d021      	beq.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fe ff01 	bl	8001894 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d116      	bne.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0220 	orr.w	r2, r3, #32
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e020      	b.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d10c      	bne.n	8002af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	e00b      	b.n	8002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d18d      	bne.n	8002a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b28:	e02d      	b.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f8ce 	bl	8002ccc <I2C_IsAcknowledgeFailed>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e02d      	b.n	8002b96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d021      	beq.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b42:	f7fe fea7 	bl	8001894 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d302      	bcc.n	8002b58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d116      	bne.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f043 0220 	orr.w	r2, r3, #32
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e007      	b.n	8002b96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d1ca      	bne.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002baa:	e02d      	b.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f88d 	bl	8002ccc <I2C_IsAcknowledgeFailed>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e02d      	b.n	8002c18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d021      	beq.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc4:	f7fe fe66 	bl	8001894 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d302      	bcc.n	8002bda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e007      	b.n	8002c18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d1ca      	bne.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c2c:	e042      	b.n	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d119      	bne.n	8002c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0210 	mvn.w	r2, #16
 8002c44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e029      	b.n	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c70:	f7fe fe10 	bl	8001894 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d302      	bcc.n	8002c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d116      	bne.n	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e007      	b.n	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d1b5      	bne.n	8002c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce2:	d11b      	bne.n	8002d1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f043 0204 	orr.w	r2, r3, #4
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d129      	bne.n	8002d94 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2224      	movs	r2, #36	; 0x24
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0210 	bic.w	r2, r2, #16
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d12a      	bne.n	8002e12 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	; 0x24
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002ddc:	89fb      	ldrh	r3, [r7, #14]
 8002dde:	f023 030f 	bic.w	r3, r3, #15
 8002de2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	89fb      	ldrh	r3, [r7, #14]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	89fa      	ldrh	r2, [r7, #14]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4c:	f7fe fd22 	bl	8001894 <HAL_GetTick>
 8002e50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e52:	e009      	b.n	8002e68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e54:	f7fe fd1e 	bl	8001894 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e62:	d901      	bls.n	8002e68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e01f      	b.n	8002ea8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d1ee      	bne.n	8002e54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e7c:	f7fe fd0a 	bl	8001894 <HAL_GetTick>
 8002e80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e82:	e009      	b.n	8002e98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e84:	f7fe fd06 	bl	8001894 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e92:	d901      	bls.n	8002e98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e007      	b.n	8002ea8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea4:	d1ee      	bne.n	8002e84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	420e0040 	.word	0x420e0040
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	420e0044 	.word	0x420e0044

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e25b      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d075      	beq.n	8002fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ede:	4ba3      	ldr	r3, [pc, #652]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d00c      	beq.n	8002f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4ba0      	ldr	r3, [pc, #640]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d112      	bne.n	8002f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4b9d      	ldr	r3, [pc, #628]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f02:	d10b      	bne.n	8002f1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	4b99      	ldr	r3, [pc, #612]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d05b      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x108>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d157      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e236      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d106      	bne.n	8002f34 <HAL_RCC_OscConfig+0x74>
 8002f26:	4b91      	ldr	r3, [pc, #580]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a90      	ldr	r2, [pc, #576]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e01d      	b.n	8002f70 <HAL_RCC_OscConfig+0xb0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x98>
 8002f3e:	4b8b      	ldr	r3, [pc, #556]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a8a      	ldr	r2, [pc, #552]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a87      	ldr	r2, [pc, #540]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0xb0>
 8002f58:	4b84      	ldr	r3, [pc, #528]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a83      	ldr	r2, [pc, #524]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b81      	ldr	r3, [pc, #516]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a80      	ldr	r2, [pc, #512]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fc8c 	bl	8001894 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fc88 	bl	8001894 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1fb      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b76      	ldr	r3, [pc, #472]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0xc0>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fc78 	bl	8001894 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fc74 	bl	8001894 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e1e7      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	4b6c      	ldr	r3, [pc, #432]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xe8>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d063      	beq.n	800309e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd6:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe2:	4b62      	ldr	r3, [pc, #392]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d11c      	bne.n	8003028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fee:	4b5f      	ldr	r3, [pc, #380]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d116      	bne.n	8003028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_RCC_OscConfig+0x152>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e1bb      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b56      	ldr	r3, [pc, #344]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4952      	ldr	r1, [pc, #328]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	e03a      	b.n	800309e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003030:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <HAL_RCC_OscConfig+0x2b0>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fc2d 	bl	8001894 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303e:	f7fe fc29 	bl	8001894 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e19c      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003050:	4b46      	ldr	r3, [pc, #280]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4940      	ldr	r1, [pc, #256]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <HAL_RCC_OscConfig+0x2b0>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe fc0c 	bl	8001894 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003080:	f7fe fc08 	bl	8001894 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e17b      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d030      	beq.n	800310c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b2:	4b30      	ldr	r3, [pc, #192]	; (8003174 <HAL_RCC_OscConfig+0x2b4>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7fe fbec 	bl	8001894 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c0:	f7fe fbe8 	bl	8001894 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e15b      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x200>
 80030de:	e015      	b.n	800310c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e0:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_RCC_OscConfig+0x2b4>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fe fbd5 	bl	8001894 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ee:	f7fe fbd1 	bl	8001894 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e144      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b1a      	ldr	r3, [pc, #104]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a0 	beq.w	800325a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	4b0f      	ldr	r3, [pc, #60]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a0e      	ldr	r2, [pc, #56]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	; 0x40
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <HAL_RCC_OscConfig+0x2ac>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x2b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d121      	bne.n	800319a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <HAL_RCC_OscConfig+0x2b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a07      	ldr	r2, [pc, #28]	; (8003178 <HAL_RCC_OscConfig+0x2b8>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fe fb97 	bl	8001894 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e011      	b.n	800318e <HAL_RCC_OscConfig+0x2ce>
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800
 8003170:	42470000 	.word	0x42470000
 8003174:	42470e80 	.word	0x42470e80
 8003178:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317c:	f7fe fb8a 	bl	8001894 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0fd      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b81      	ldr	r3, [pc, #516]	; (8003394 <HAL_RCC_OscConfig+0x4d4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x2f0>
 80031a2:	4b7d      	ldr	r3, [pc, #500]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	4a7c      	ldr	r2, [pc, #496]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6713      	str	r3, [r2, #112]	; 0x70
 80031ae:	e01c      	b.n	80031ea <HAL_RCC_OscConfig+0x32a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d10c      	bne.n	80031d2 <HAL_RCC_OscConfig+0x312>
 80031b8:	4b77      	ldr	r3, [pc, #476]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a76      	ldr	r2, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	4b74      	ldr	r3, [pc, #464]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a73      	ldr	r2, [pc, #460]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
 80031d0:	e00b      	b.n	80031ea <HAL_RCC_OscConfig+0x32a>
 80031d2:	4b71      	ldr	r3, [pc, #452]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	4a70      	ldr	r2, [pc, #448]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6713      	str	r3, [r2, #112]	; 0x70
 80031de:	4b6e      	ldr	r3, [pc, #440]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a6d      	ldr	r2, [pc, #436]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d015      	beq.n	800321e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7fe fb4f 	bl	8001894 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe fb4b 	bl	8001894 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e0bc      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003210:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ee      	beq.n	80031fa <HAL_RCC_OscConfig+0x33a>
 800321c:	e014      	b.n	8003248 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe fb39 	bl	8001894 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe fb35 	bl	8001894 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0a6      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323c:	4b56      	ldr	r3, [pc, #344]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ee      	bne.n	8003226 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d105      	bne.n	800325a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324e:	4b52      	ldr	r3, [pc, #328]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	4a51      	ldr	r2, [pc, #324]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003258:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8092 	beq.w	8003388 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003264:	4b4c      	ldr	r3, [pc, #304]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b08      	cmp	r3, #8
 800326e:	d05c      	beq.n	800332a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d141      	bne.n	80032fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	4b48      	ldr	r3, [pc, #288]	; (800339c <HAL_RCC_OscConfig+0x4dc>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe fb09 	bl	8001894 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe fb05 	bl	8001894 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e078      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003298:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	019b      	lsls	r3, r3, #6
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	3b01      	subs	r3, #1
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	061b      	lsls	r3, r3, #24
 80032c8:	4933      	ldr	r1, [pc, #204]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ce:	4b33      	ldr	r3, [pc, #204]	; (800339c <HAL_RCC_OscConfig+0x4dc>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fe fade 	bl	8001894 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fe fada 	bl	8001894 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04d      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ee:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x41c>
 80032fa:	e045      	b.n	8003388 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_RCC_OscConfig+0x4dc>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7fe fac7 	bl	8001894 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330a:	f7fe fac3 	bl	8001894 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e036      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331c:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x44a>
 8003328:	e02e      	b.n	8003388 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e029      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	429a      	cmp	r2, r3
 8003348:	d11c      	bne.n	8003384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d115      	bne.n	8003384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800335e:	4013      	ands	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003364:	4293      	cmp	r3, r2
 8003366:	d10d      	bne.n	8003384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d106      	bne.n	8003384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40007000 	.word	0x40007000
 8003398:	40023800 	.word	0x40023800
 800339c:	42470060 	.word	0x42470060

080033a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0cc      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b4:	4b68      	ldr	r3, [pc, #416]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d90c      	bls.n	80033dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b65      	ldr	r3, [pc, #404]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b63      	ldr	r3, [pc, #396]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b8      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d020      	beq.n	800342a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a58      	ldr	r2, [pc, #352]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003418:	4b50      	ldr	r3, [pc, #320]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	494d      	ldr	r1, [pc, #308]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d044      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d119      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e07f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d003      	beq.n	800345e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345a:	2b03      	cmp	r3, #3
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345e:	4b3f      	ldr	r3, [pc, #252]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e067      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347e:	4b37      	ldr	r3, [pc, #220]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4934      	ldr	r1, [pc, #208]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003490:	f7fe fa00 	bl	8001894 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	e00a      	b.n	80034ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f7fe f9fc 	bl	8001894 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e04f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	4b2b      	ldr	r3, [pc, #172]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 020c 	and.w	r2, r3, #12
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	429a      	cmp	r2, r3
 80034be:	d1eb      	bne.n	8003498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d20c      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b22      	ldr	r3, [pc, #136]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e032      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4916      	ldr	r1, [pc, #88]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	490e      	ldr	r1, [pc, #56]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003526:	f000 f821 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800352a:	4601      	mov	r1, r0
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	5cd3      	ldrb	r3, [r2, r3]
 800353a:	fa21 f303 	lsr.w	r3, r1, r3
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe f810 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023c00 	.word	0x40023c00
 800355c:	40023800 	.word	0x40023800
 8003560:	080093d4 	.word	0x080093d4
 8003564:	20000000 	.word	0x20000000
 8003568:	20000004 	.word	0x20000004

0800356c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	2300      	movs	r3, #0
 800357c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003582:	4b63      	ldr	r3, [pc, #396]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b04      	cmp	r3, #4
 800358c:	d007      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x32>
 800358e:	2b08      	cmp	r3, #8
 8003590:	d008      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x38>
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 80b4 	bne.w	8003700 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b5e      	ldr	r3, [pc, #376]	; (8003714 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800359a:	60bb      	str	r3, [r7, #8]
       break;
 800359c:	e0b3      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800359e:	4b5e      	ldr	r3, [pc, #376]	; (8003718 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80035a0:	60bb      	str	r3, [r7, #8]
      break;
 80035a2:	e0b0      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a4:	4b5a      	ldr	r3, [pc, #360]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ae:	4b58      	ldr	r3, [pc, #352]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d04a      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ba:	4b55      	ldr	r3, [pc, #340]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	f04f 0400 	mov.w	r4, #0
 80035c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	ea03 0501 	and.w	r5, r3, r1
 80035d0:	ea04 0602 	and.w	r6, r4, r2
 80035d4:	4629      	mov	r1, r5
 80035d6:	4632      	mov	r2, r6
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	f04f 0400 	mov.w	r4, #0
 80035e0:	0154      	lsls	r4, r2, #5
 80035e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035e6:	014b      	lsls	r3, r1, #5
 80035e8:	4619      	mov	r1, r3
 80035ea:	4622      	mov	r2, r4
 80035ec:	1b49      	subs	r1, r1, r5
 80035ee:	eb62 0206 	sbc.w	r2, r2, r6
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	f04f 0400 	mov.w	r4, #0
 80035fa:	0194      	lsls	r4, r2, #6
 80035fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003600:	018b      	lsls	r3, r1, #6
 8003602:	1a5b      	subs	r3, r3, r1
 8003604:	eb64 0402 	sbc.w	r4, r4, r2
 8003608:	f04f 0100 	mov.w	r1, #0
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	00e2      	lsls	r2, r4, #3
 8003612:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003616:	00d9      	lsls	r1, r3, #3
 8003618:	460b      	mov	r3, r1
 800361a:	4614      	mov	r4, r2
 800361c:	195b      	adds	r3, r3, r5
 800361e:	eb44 0406 	adc.w	r4, r4, r6
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	0262      	lsls	r2, r4, #9
 800362c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003630:	0259      	lsls	r1, r3, #9
 8003632:	460b      	mov	r3, r1
 8003634:	4614      	mov	r4, r2
 8003636:	4618      	mov	r0, r3
 8003638:	4621      	mov	r1, r4
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f04f 0400 	mov.w	r4, #0
 8003640:	461a      	mov	r2, r3
 8003642:	4623      	mov	r3, r4
 8003644:	f7fd fac0 	bl	8000bc8 <__aeabi_uldivmod>
 8003648:	4603      	mov	r3, r0
 800364a:	460c      	mov	r4, r1
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	e049      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003650:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	f04f 0400 	mov.w	r4, #0
 800365a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	ea03 0501 	and.w	r5, r3, r1
 8003666:	ea04 0602 	and.w	r6, r4, r2
 800366a:	4629      	mov	r1, r5
 800366c:	4632      	mov	r2, r6
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	f04f 0400 	mov.w	r4, #0
 8003676:	0154      	lsls	r4, r2, #5
 8003678:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800367c:	014b      	lsls	r3, r1, #5
 800367e:	4619      	mov	r1, r3
 8003680:	4622      	mov	r2, r4
 8003682:	1b49      	subs	r1, r1, r5
 8003684:	eb62 0206 	sbc.w	r2, r2, r6
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	f04f 0400 	mov.w	r4, #0
 8003690:	0194      	lsls	r4, r2, #6
 8003692:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003696:	018b      	lsls	r3, r1, #6
 8003698:	1a5b      	subs	r3, r3, r1
 800369a:	eb64 0402 	sbc.w	r4, r4, r2
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	00e2      	lsls	r2, r4, #3
 80036a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036ac:	00d9      	lsls	r1, r3, #3
 80036ae:	460b      	mov	r3, r1
 80036b0:	4614      	mov	r4, r2
 80036b2:	195b      	adds	r3, r3, r5
 80036b4:	eb44 0406 	adc.w	r4, r4, r6
 80036b8:	f04f 0100 	mov.w	r1, #0
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	02a2      	lsls	r2, r4, #10
 80036c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036c6:	0299      	lsls	r1, r3, #10
 80036c8:	460b      	mov	r3, r1
 80036ca:	4614      	mov	r4, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	4621      	mov	r1, r4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f04f 0400 	mov.w	r4, #0
 80036d6:	461a      	mov	r2, r3
 80036d8:	4623      	mov	r3, r4
 80036da:	f7fd fa75 	bl	8000bc8 <__aeabi_uldivmod>
 80036de:	4603      	mov	r3, r0
 80036e0:	460c      	mov	r4, r1
 80036e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	3301      	adds	r3, #1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	60bb      	str	r3, [r7, #8]
      break;
 80036fe:	e002      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003702:	60bb      	str	r3, [r7, #8]
      break;
 8003704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003706:	68bb      	ldr	r3, [r7, #8]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003710:	40023800 	.word	0x40023800
 8003714:	00f42400 	.word	0x00f42400
 8003718:	007a1200 	.word	0x007a1200

0800371c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_RCC_GetHCLKFreq+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000000 	.word	0x20000000

08003734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003738:	f7ff fff0 	bl	800371c <HAL_RCC_GetHCLKFreq>
 800373c:	4601      	mov	r1, r0
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	0a9b      	lsrs	r3, r3, #10
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4a03      	ldr	r2, [pc, #12]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374a:	5cd3      	ldrb	r3, [r2, r3]
 800374c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	080093e4 	.word	0x080093e4

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003760:	f7ff ffdc 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003764:	4601      	mov	r1, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0b5b      	lsrs	r3, r3, #13
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4a03      	ldr	r2, [pc, #12]	; (8003780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	080093e4 	.word	0x080093e4

08003784 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	220f      	movs	r2, #15
 8003792:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_RCC_GetClockConfig+0x5c>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0203 	and.w	r2, r3, #3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_RCC_GetClockConfig+0x5c>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_RCC_GetClockConfig+0x5c>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_GetClockConfig+0x5c>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	08db      	lsrs	r3, r3, #3
 80037be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037c6:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <HAL_RCC_GetClockConfig+0x60>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 020f 	and.w	r2, r3, #15
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	601a      	str	r2, [r3, #0]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40023c00 	.word	0x40023c00

080037e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e01d      	b.n	8003836 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f815 	bl	800383e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f000 f968 	bl	8003afc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b06      	cmp	r3, #6
 800387a:	d007      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d122      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d11b      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f06f 0202 	mvn.w	r2, #2
 80038c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f8ee 	bl	8003abe <HAL_TIM_IC_CaptureCallback>
 80038e2:	e005      	b.n	80038f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8e0 	bl	8003aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8f1 	bl	8003ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b04      	cmp	r3, #4
 8003902:	d122      	bne.n	800394a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d11b      	bne.n	800394a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f06f 0204 	mvn.w	r2, #4
 800391a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8c4 	bl	8003abe <HAL_TIM_IC_CaptureCallback>
 8003936:	e005      	b.n	8003944 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f8b6 	bl	8003aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8c7 	bl	8003ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d122      	bne.n	800399e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b08      	cmp	r3, #8
 8003964:	d11b      	bne.n	800399e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f06f 0208 	mvn.w	r2, #8
 800396e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2204      	movs	r2, #4
 8003974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f89a 	bl	8003abe <HAL_TIM_IC_CaptureCallback>
 800398a:	e005      	b.n	8003998 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f88c 	bl	8003aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f89d 	bl	8003ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d122      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d11b      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f06f 0210 	mvn.w	r2, #16
 80039c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2208      	movs	r2, #8
 80039c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f870 	bl	8003abe <HAL_TIM_IC_CaptureCallback>
 80039de:	e005      	b.n	80039ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f862 	bl	8003aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f873 	bl	8003ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10e      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f06f 0201 	mvn.w	r2, #1
 8003a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fd fcd5 	bl	80013c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	2b80      	cmp	r3, #128	; 0x80
 8003a2a:	d10e      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d107      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f903 	bl	8003c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d10e      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d107      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f838 	bl	8003ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d10e      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d107      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f06f 0220 	mvn.w	r2, #32
 8003a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8cd 	bl	8003c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a40      	ldr	r2, [pc, #256]	; (8003c10 <TIM_Base_SetConfig+0x114>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1a:	d00f      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a3d      	ldr	r2, [pc, #244]	; (8003c14 <TIM_Base_SetConfig+0x118>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00b      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a3c      	ldr	r2, [pc, #240]	; (8003c18 <TIM_Base_SetConfig+0x11c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a3b      	ldr	r2, [pc, #236]	; (8003c1c <TIM_Base_SetConfig+0x120>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a3a      	ldr	r2, [pc, #232]	; (8003c20 <TIM_Base_SetConfig+0x124>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <TIM_Base_SetConfig+0x114>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5c:	d027      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	; (8003c14 <TIM_Base_SetConfig+0x118>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d023      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	; (8003c18 <TIM_Base_SetConfig+0x11c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01f      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2a      	ldr	r2, [pc, #168]	; (8003c1c <TIM_Base_SetConfig+0x120>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <TIM_Base_SetConfig+0x124>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d017      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <TIM_Base_SetConfig+0x128>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <TIM_Base_SetConfig+0x12c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00f      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <TIM_Base_SetConfig+0x130>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <TIM_Base_SetConfig+0x134>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <TIM_Base_SetConfig+0x138>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <TIM_Base_SetConfig+0x13c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <TIM_Base_SetConfig+0x114>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0xf8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <TIM_Base_SetConfig+0x124>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d103      	bne.n	8003bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	615a      	str	r2, [r3, #20]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800
 8003c1c:	40000c00 	.word	0x40000c00
 8003c20:	40010400 	.word	0x40010400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40014400 	.word	0x40014400
 8003c2c:	40014800 	.word	0x40014800
 8003c30:	40001800 	.word	0x40001800
 8003c34:	40001c00 	.word	0x40001c00
 8003c38:	40002000 	.word	0x40002000

08003c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e03f      	b.n	8003cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd fc26 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f90b 	bl	8003ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b088      	sub	sp, #32
 8003d02:	af02      	add	r7, sp, #8
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	f040 8083 	bne.w	8003e26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_UART_Transmit+0x2e>
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e07b      	b.n	8003e28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Transmit+0x40>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e074      	b.n	8003e28 <HAL_UART_Transmit+0x12a>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2221      	movs	r2, #33	; 0x21
 8003d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d54:	f7fd fd9e 	bl	8001894 <HAL_GetTick>
 8003d58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	88fa      	ldrh	r2, [r7, #6]
 8003d5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	88fa      	ldrh	r2, [r7, #6]
 8003d64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003d6e:	e042      	b.n	8003df6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d86:	d122      	bne.n	8003dce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f84c 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e042      	b.n	8003e28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	e017      	b.n	8003df6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	e013      	b.n	8003df6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2180      	movs	r1, #128	; 0x80
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f829 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e01f      	b.n	8003e28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	60ba      	str	r2, [r7, #8]
 8003dee:	781a      	ldrb	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1b7      	bne.n	8003d70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2200      	movs	r2, #0
 8003e08:	2140      	movs	r1, #64	; 0x40
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f810 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e006      	b.n	8003e28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e40:	e02c      	b.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d028      	beq.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e50:	f7fd fd20 	bl	8001894 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d21d      	bcs.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e00f      	b.n	8003ebc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d0c3      	beq.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f06:	f023 030c 	bic.w	r3, r3, #12
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	430b      	orrs	r3, r1
 8003f12:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f32:	f040 818b 	bne.w	800424c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4ac1      	ldr	r2, [pc, #772]	; (8004240 <UART_SetConfig+0x37c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d005      	beq.n	8003f4c <UART_SetConfig+0x88>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4abf      	ldr	r2, [pc, #764]	; (8004244 <UART_SetConfig+0x380>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	f040 80bd 	bne.w	80040c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f4c:	f7ff fc06 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 8003f50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	461d      	mov	r5, r3
 8003f56:	f04f 0600 	mov.w	r6, #0
 8003f5a:	46a8      	mov	r8, r5
 8003f5c:	46b1      	mov	r9, r6
 8003f5e:	eb18 0308 	adds.w	r3, r8, r8
 8003f62:	eb49 0409 	adc.w	r4, r9, r9
 8003f66:	4698      	mov	r8, r3
 8003f68:	46a1      	mov	r9, r4
 8003f6a:	eb18 0805 	adds.w	r8, r8, r5
 8003f6e:	eb49 0906 	adc.w	r9, r9, r6
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f86:	4688      	mov	r8, r1
 8003f88:	4691      	mov	r9, r2
 8003f8a:	eb18 0005 	adds.w	r0, r8, r5
 8003f8e:	eb49 0106 	adc.w	r1, r9, r6
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	461d      	mov	r5, r3
 8003f98:	f04f 0600 	mov.w	r6, #0
 8003f9c:	196b      	adds	r3, r5, r5
 8003f9e:	eb46 0406 	adc.w	r4, r6, r6
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4623      	mov	r3, r4
 8003fa6:	f7fc fe0f 	bl	8000bc8 <__aeabi_uldivmod>
 8003faa:	4603      	mov	r3, r0
 8003fac:	460c      	mov	r4, r1
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4ba5      	ldr	r3, [pc, #660]	; (8004248 <UART_SetConfig+0x384>)
 8003fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	461d      	mov	r5, r3
 8003fc0:	f04f 0600 	mov.w	r6, #0
 8003fc4:	46a9      	mov	r9, r5
 8003fc6:	46b2      	mov	sl, r6
 8003fc8:	eb19 0309 	adds.w	r3, r9, r9
 8003fcc:	eb4a 040a 	adc.w	r4, sl, sl
 8003fd0:	4699      	mov	r9, r3
 8003fd2:	46a2      	mov	sl, r4
 8003fd4:	eb19 0905 	adds.w	r9, r9, r5
 8003fd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ff0:	4689      	mov	r9, r1
 8003ff2:	4692      	mov	sl, r2
 8003ff4:	eb19 0005 	adds.w	r0, r9, r5
 8003ff8:	eb4a 0106 	adc.w	r1, sl, r6
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	461d      	mov	r5, r3
 8004002:	f04f 0600 	mov.w	r6, #0
 8004006:	196b      	adds	r3, r5, r5
 8004008:	eb46 0406 	adc.w	r4, r6, r6
 800400c:	461a      	mov	r2, r3
 800400e:	4623      	mov	r3, r4
 8004010:	f7fc fdda 	bl	8000bc8 <__aeabi_uldivmod>
 8004014:	4603      	mov	r3, r0
 8004016:	460c      	mov	r4, r1
 8004018:	461a      	mov	r2, r3
 800401a:	4b8b      	ldr	r3, [pc, #556]	; (8004248 <UART_SetConfig+0x384>)
 800401c:	fba3 1302 	umull	r1, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	2164      	movs	r1, #100	; 0x64
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	3332      	adds	r3, #50	; 0x32
 800402e:	4a86      	ldr	r2, [pc, #536]	; (8004248 <UART_SetConfig+0x384>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800403c:	4498      	add	r8, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	461d      	mov	r5, r3
 8004042:	f04f 0600 	mov.w	r6, #0
 8004046:	46a9      	mov	r9, r5
 8004048:	46b2      	mov	sl, r6
 800404a:	eb19 0309 	adds.w	r3, r9, r9
 800404e:	eb4a 040a 	adc.w	r4, sl, sl
 8004052:	4699      	mov	r9, r3
 8004054:	46a2      	mov	sl, r4
 8004056:	eb19 0905 	adds.w	r9, r9, r5
 800405a:	eb4a 0a06 	adc.w	sl, sl, r6
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800406a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800406e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004072:	4689      	mov	r9, r1
 8004074:	4692      	mov	sl, r2
 8004076:	eb19 0005 	adds.w	r0, r9, r5
 800407a:	eb4a 0106 	adc.w	r1, sl, r6
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	461d      	mov	r5, r3
 8004084:	f04f 0600 	mov.w	r6, #0
 8004088:	196b      	adds	r3, r5, r5
 800408a:	eb46 0406 	adc.w	r4, r6, r6
 800408e:	461a      	mov	r2, r3
 8004090:	4623      	mov	r3, r4
 8004092:	f7fc fd99 	bl	8000bc8 <__aeabi_uldivmod>
 8004096:	4603      	mov	r3, r0
 8004098:	460c      	mov	r4, r1
 800409a:	461a      	mov	r2, r3
 800409c:	4b6a      	ldr	r3, [pc, #424]	; (8004248 <UART_SetConfig+0x384>)
 800409e:	fba3 1302 	umull	r1, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2164      	movs	r1, #100	; 0x64
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	3332      	adds	r3, #50	; 0x32
 80040b0:	4a65      	ldr	r2, [pc, #404]	; (8004248 <UART_SetConfig+0x384>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	f003 0207 	and.w	r2, r3, #7
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4442      	add	r2, r8
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	e26f      	b.n	80045a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040c6:	f7ff fb35 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 80040ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	461d      	mov	r5, r3
 80040d0:	f04f 0600 	mov.w	r6, #0
 80040d4:	46a8      	mov	r8, r5
 80040d6:	46b1      	mov	r9, r6
 80040d8:	eb18 0308 	adds.w	r3, r8, r8
 80040dc:	eb49 0409 	adc.w	r4, r9, r9
 80040e0:	4698      	mov	r8, r3
 80040e2:	46a1      	mov	r9, r4
 80040e4:	eb18 0805 	adds.w	r8, r8, r5
 80040e8:	eb49 0906 	adc.w	r9, r9, r6
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004100:	4688      	mov	r8, r1
 8004102:	4691      	mov	r9, r2
 8004104:	eb18 0005 	adds.w	r0, r8, r5
 8004108:	eb49 0106 	adc.w	r1, r9, r6
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	461d      	mov	r5, r3
 8004112:	f04f 0600 	mov.w	r6, #0
 8004116:	196b      	adds	r3, r5, r5
 8004118:	eb46 0406 	adc.w	r4, r6, r6
 800411c:	461a      	mov	r2, r3
 800411e:	4623      	mov	r3, r4
 8004120:	f7fc fd52 	bl	8000bc8 <__aeabi_uldivmod>
 8004124:	4603      	mov	r3, r0
 8004126:	460c      	mov	r4, r1
 8004128:	461a      	mov	r2, r3
 800412a:	4b47      	ldr	r3, [pc, #284]	; (8004248 <UART_SetConfig+0x384>)
 800412c:	fba3 2302 	umull	r2, r3, r3, r2
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	461d      	mov	r5, r3
 800413a:	f04f 0600 	mov.w	r6, #0
 800413e:	46a9      	mov	r9, r5
 8004140:	46b2      	mov	sl, r6
 8004142:	eb19 0309 	adds.w	r3, r9, r9
 8004146:	eb4a 040a 	adc.w	r4, sl, sl
 800414a:	4699      	mov	r9, r3
 800414c:	46a2      	mov	sl, r4
 800414e:	eb19 0905 	adds.w	r9, r9, r5
 8004152:	eb4a 0a06 	adc.w	sl, sl, r6
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004162:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004166:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800416a:	4689      	mov	r9, r1
 800416c:	4692      	mov	sl, r2
 800416e:	eb19 0005 	adds.w	r0, r9, r5
 8004172:	eb4a 0106 	adc.w	r1, sl, r6
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	461d      	mov	r5, r3
 800417c:	f04f 0600 	mov.w	r6, #0
 8004180:	196b      	adds	r3, r5, r5
 8004182:	eb46 0406 	adc.w	r4, r6, r6
 8004186:	461a      	mov	r2, r3
 8004188:	4623      	mov	r3, r4
 800418a:	f7fc fd1d 	bl	8000bc8 <__aeabi_uldivmod>
 800418e:	4603      	mov	r3, r0
 8004190:	460c      	mov	r4, r1
 8004192:	461a      	mov	r2, r3
 8004194:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <UART_SetConfig+0x384>)
 8004196:	fba3 1302 	umull	r1, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2164      	movs	r1, #100	; 0x64
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	3332      	adds	r3, #50	; 0x32
 80041a8:	4a27      	ldr	r2, [pc, #156]	; (8004248 <UART_SetConfig+0x384>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041b6:	4498      	add	r8, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	461d      	mov	r5, r3
 80041bc:	f04f 0600 	mov.w	r6, #0
 80041c0:	46a9      	mov	r9, r5
 80041c2:	46b2      	mov	sl, r6
 80041c4:	eb19 0309 	adds.w	r3, r9, r9
 80041c8:	eb4a 040a 	adc.w	r4, sl, sl
 80041cc:	4699      	mov	r9, r3
 80041ce:	46a2      	mov	sl, r4
 80041d0:	eb19 0905 	adds.w	r9, r9, r5
 80041d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ec:	4689      	mov	r9, r1
 80041ee:	4692      	mov	sl, r2
 80041f0:	eb19 0005 	adds.w	r0, r9, r5
 80041f4:	eb4a 0106 	adc.w	r1, sl, r6
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	461d      	mov	r5, r3
 80041fe:	f04f 0600 	mov.w	r6, #0
 8004202:	196b      	adds	r3, r5, r5
 8004204:	eb46 0406 	adc.w	r4, r6, r6
 8004208:	461a      	mov	r2, r3
 800420a:	4623      	mov	r3, r4
 800420c:	f7fc fcdc 	bl	8000bc8 <__aeabi_uldivmod>
 8004210:	4603      	mov	r3, r0
 8004212:	460c      	mov	r4, r1
 8004214:	461a      	mov	r2, r3
 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <UART_SetConfig+0x384>)
 8004218:	fba3 1302 	umull	r1, r3, r3, r2
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	2164      	movs	r1, #100	; 0x64
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	3332      	adds	r3, #50	; 0x32
 800422a:	4a07      	ldr	r2, [pc, #28]	; (8004248 <UART_SetConfig+0x384>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	f003 0207 	and.w	r2, r3, #7
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4442      	add	r2, r8
 800423c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800423e:	e1b2      	b.n	80045a6 <UART_SetConfig+0x6e2>
 8004240:	40011000 	.word	0x40011000
 8004244:	40011400 	.word	0x40011400
 8004248:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4ad7      	ldr	r2, [pc, #860]	; (80045b0 <UART_SetConfig+0x6ec>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d005      	beq.n	8004262 <UART_SetConfig+0x39e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4ad6      	ldr	r2, [pc, #856]	; (80045b4 <UART_SetConfig+0x6f0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	f040 80d1 	bne.w	8004404 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004262:	f7ff fa7b 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 8004266:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	469a      	mov	sl, r3
 800426c:	f04f 0b00 	mov.w	fp, #0
 8004270:	46d0      	mov	r8, sl
 8004272:	46d9      	mov	r9, fp
 8004274:	eb18 0308 	adds.w	r3, r8, r8
 8004278:	eb49 0409 	adc.w	r4, r9, r9
 800427c:	4698      	mov	r8, r3
 800427e:	46a1      	mov	r9, r4
 8004280:	eb18 080a 	adds.w	r8, r8, sl
 8004284:	eb49 090b 	adc.w	r9, r9, fp
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004294:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004298:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800429c:	4688      	mov	r8, r1
 800429e:	4691      	mov	r9, r2
 80042a0:	eb1a 0508 	adds.w	r5, sl, r8
 80042a4:	eb4b 0609 	adc.w	r6, fp, r9
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4619      	mov	r1, r3
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	f04f 0400 	mov.w	r4, #0
 80042ba:	0094      	lsls	r4, r2, #2
 80042bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042c0:	008b      	lsls	r3, r1, #2
 80042c2:	461a      	mov	r2, r3
 80042c4:	4623      	mov	r3, r4
 80042c6:	4628      	mov	r0, r5
 80042c8:	4631      	mov	r1, r6
 80042ca:	f7fc fc7d 	bl	8000bc8 <__aeabi_uldivmod>
 80042ce:	4603      	mov	r3, r0
 80042d0:	460c      	mov	r4, r1
 80042d2:	461a      	mov	r2, r3
 80042d4:	4bb8      	ldr	r3, [pc, #736]	; (80045b8 <UART_SetConfig+0x6f4>)
 80042d6:	fba3 2302 	umull	r2, r3, r3, r2
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	469b      	mov	fp, r3
 80042e4:	f04f 0c00 	mov.w	ip, #0
 80042e8:	46d9      	mov	r9, fp
 80042ea:	46e2      	mov	sl, ip
 80042ec:	eb19 0309 	adds.w	r3, r9, r9
 80042f0:	eb4a 040a 	adc.w	r4, sl, sl
 80042f4:	4699      	mov	r9, r3
 80042f6:	46a2      	mov	sl, r4
 80042f8:	eb19 090b 	adds.w	r9, r9, fp
 80042fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004300:	f04f 0100 	mov.w	r1, #0
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800430c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004310:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004314:	4689      	mov	r9, r1
 8004316:	4692      	mov	sl, r2
 8004318:	eb1b 0509 	adds.w	r5, fp, r9
 800431c:	eb4c 060a 	adc.w	r6, ip, sl
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	4619      	mov	r1, r3
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	f04f 0400 	mov.w	r4, #0
 8004332:	0094      	lsls	r4, r2, #2
 8004334:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004338:	008b      	lsls	r3, r1, #2
 800433a:	461a      	mov	r2, r3
 800433c:	4623      	mov	r3, r4
 800433e:	4628      	mov	r0, r5
 8004340:	4631      	mov	r1, r6
 8004342:	f7fc fc41 	bl	8000bc8 <__aeabi_uldivmod>
 8004346:	4603      	mov	r3, r0
 8004348:	460c      	mov	r4, r1
 800434a:	461a      	mov	r2, r3
 800434c:	4b9a      	ldr	r3, [pc, #616]	; (80045b8 <UART_SetConfig+0x6f4>)
 800434e:	fba3 1302 	umull	r1, r3, r3, r2
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2164      	movs	r1, #100	; 0x64
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	3332      	adds	r3, #50	; 0x32
 8004360:	4a95      	ldr	r2, [pc, #596]	; (80045b8 <UART_SetConfig+0x6f4>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436c:	4498      	add	r8, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	469b      	mov	fp, r3
 8004372:	f04f 0c00 	mov.w	ip, #0
 8004376:	46d9      	mov	r9, fp
 8004378:	46e2      	mov	sl, ip
 800437a:	eb19 0309 	adds.w	r3, r9, r9
 800437e:	eb4a 040a 	adc.w	r4, sl, sl
 8004382:	4699      	mov	r9, r3
 8004384:	46a2      	mov	sl, r4
 8004386:	eb19 090b 	adds.w	r9, r9, fp
 800438a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800438e:	f04f 0100 	mov.w	r1, #0
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800439a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800439e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043a2:	4689      	mov	r9, r1
 80043a4:	4692      	mov	sl, r2
 80043a6:	eb1b 0509 	adds.w	r5, fp, r9
 80043aa:	eb4c 060a 	adc.w	r6, ip, sl
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4619      	mov	r1, r3
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	f04f 0400 	mov.w	r4, #0
 80043c0:	0094      	lsls	r4, r2, #2
 80043c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043c6:	008b      	lsls	r3, r1, #2
 80043c8:	461a      	mov	r2, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	4628      	mov	r0, r5
 80043ce:	4631      	mov	r1, r6
 80043d0:	f7fc fbfa 	bl	8000bc8 <__aeabi_uldivmod>
 80043d4:	4603      	mov	r3, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	461a      	mov	r2, r3
 80043da:	4b77      	ldr	r3, [pc, #476]	; (80045b8 <UART_SetConfig+0x6f4>)
 80043dc:	fba3 1302 	umull	r1, r3, r3, r2
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	2164      	movs	r1, #100	; 0x64
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	3332      	adds	r3, #50	; 0x32
 80043ee:	4a72      	ldr	r2, [pc, #456]	; (80045b8 <UART_SetConfig+0x6f4>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	f003 020f 	and.w	r2, r3, #15
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4442      	add	r2, r8
 8004400:	609a      	str	r2, [r3, #8]
 8004402:	e0d0      	b.n	80045a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7ff f996 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8004408:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	469a      	mov	sl, r3
 800440e:	f04f 0b00 	mov.w	fp, #0
 8004412:	46d0      	mov	r8, sl
 8004414:	46d9      	mov	r9, fp
 8004416:	eb18 0308 	adds.w	r3, r8, r8
 800441a:	eb49 0409 	adc.w	r4, r9, r9
 800441e:	4698      	mov	r8, r3
 8004420:	46a1      	mov	r9, r4
 8004422:	eb18 080a 	adds.w	r8, r8, sl
 8004426:	eb49 090b 	adc.w	r9, r9, fp
 800442a:	f04f 0100 	mov.w	r1, #0
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004436:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800443a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800443e:	4688      	mov	r8, r1
 8004440:	4691      	mov	r9, r2
 8004442:	eb1a 0508 	adds.w	r5, sl, r8
 8004446:	eb4b 0609 	adc.w	r6, fp, r9
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4619      	mov	r1, r3
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	f04f 0400 	mov.w	r4, #0
 800445c:	0094      	lsls	r4, r2, #2
 800445e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004462:	008b      	lsls	r3, r1, #2
 8004464:	461a      	mov	r2, r3
 8004466:	4623      	mov	r3, r4
 8004468:	4628      	mov	r0, r5
 800446a:	4631      	mov	r1, r6
 800446c:	f7fc fbac 	bl	8000bc8 <__aeabi_uldivmod>
 8004470:	4603      	mov	r3, r0
 8004472:	460c      	mov	r4, r1
 8004474:	461a      	mov	r2, r3
 8004476:	4b50      	ldr	r3, [pc, #320]	; (80045b8 <UART_SetConfig+0x6f4>)
 8004478:	fba3 2302 	umull	r2, r3, r3, r2
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	469b      	mov	fp, r3
 8004486:	f04f 0c00 	mov.w	ip, #0
 800448a:	46d9      	mov	r9, fp
 800448c:	46e2      	mov	sl, ip
 800448e:	eb19 0309 	adds.w	r3, r9, r9
 8004492:	eb4a 040a 	adc.w	r4, sl, sl
 8004496:	4699      	mov	r9, r3
 8004498:	46a2      	mov	sl, r4
 800449a:	eb19 090b 	adds.w	r9, r9, fp
 800449e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044a2:	f04f 0100 	mov.w	r1, #0
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044b6:	4689      	mov	r9, r1
 80044b8:	4692      	mov	sl, r2
 80044ba:	eb1b 0509 	adds.w	r5, fp, r9
 80044be:	eb4c 060a 	adc.w	r6, ip, sl
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4619      	mov	r1, r3
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	f04f 0400 	mov.w	r4, #0
 80044d4:	0094      	lsls	r4, r2, #2
 80044d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044da:	008b      	lsls	r3, r1, #2
 80044dc:	461a      	mov	r2, r3
 80044de:	4623      	mov	r3, r4
 80044e0:	4628      	mov	r0, r5
 80044e2:	4631      	mov	r1, r6
 80044e4:	f7fc fb70 	bl	8000bc8 <__aeabi_uldivmod>
 80044e8:	4603      	mov	r3, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	461a      	mov	r2, r3
 80044ee:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <UART_SetConfig+0x6f4>)
 80044f0:	fba3 1302 	umull	r1, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	2164      	movs	r1, #100	; 0x64
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	3332      	adds	r3, #50	; 0x32
 8004502:	4a2d      	ldr	r2, [pc, #180]	; (80045b8 <UART_SetConfig+0x6f4>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450e:	4498      	add	r8, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	469b      	mov	fp, r3
 8004514:	f04f 0c00 	mov.w	ip, #0
 8004518:	46d9      	mov	r9, fp
 800451a:	46e2      	mov	sl, ip
 800451c:	eb19 0309 	adds.w	r3, r9, r9
 8004520:	eb4a 040a 	adc.w	r4, sl, sl
 8004524:	4699      	mov	r9, r3
 8004526:	46a2      	mov	sl, r4
 8004528:	eb19 090b 	adds.w	r9, r9, fp
 800452c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800453c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004540:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004544:	4689      	mov	r9, r1
 8004546:	4692      	mov	sl, r2
 8004548:	eb1b 0509 	adds.w	r5, fp, r9
 800454c:	eb4c 060a 	adc.w	r6, ip, sl
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4619      	mov	r1, r3
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	f04f 0400 	mov.w	r4, #0
 8004562:	0094      	lsls	r4, r2, #2
 8004564:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004568:	008b      	lsls	r3, r1, #2
 800456a:	461a      	mov	r2, r3
 800456c:	4623      	mov	r3, r4
 800456e:	4628      	mov	r0, r5
 8004570:	4631      	mov	r1, r6
 8004572:	f7fc fb29 	bl	8000bc8 <__aeabi_uldivmod>
 8004576:	4603      	mov	r3, r0
 8004578:	460c      	mov	r4, r1
 800457a:	461a      	mov	r2, r3
 800457c:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <UART_SetConfig+0x6f4>)
 800457e:	fba3 1302 	umull	r1, r3, r3, r2
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	2164      	movs	r1, #100	; 0x64
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	3332      	adds	r3, #50	; 0x32
 8004590:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <UART_SetConfig+0x6f4>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	f003 020f 	and.w	r2, r3, #15
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4442      	add	r2, r8
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	e7ff      	b.n	80045a6 <UART_SetConfig+0x6e2>
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b0:	40011000 	.word	0x40011000
 80045b4:	40011400 	.word	0x40011400
 80045b8:	51eb851f 	.word	0x51eb851f

080045bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ce:	2b84      	cmp	r3, #132	; 0x84
 80045d0:	d005      	beq.n	80045de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	3303      	adds	r3, #3
 80045dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045de:	68fb      	ldr	r3, [r7, #12]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f2:	f3ef 8305 	mrs	r3, IPSR
 80045f6:	607b      	str	r3, [r7, #4]
  return(result);
 80045f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004614:	f001 f8fc 	bl	8005810 <vTaskStartScheduler>
  
  return osOK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	bd80      	pop	{r7, pc}

0800461e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800461e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004620:	b089      	sub	sp, #36	; 0x24
 8004622:	af04      	add	r7, sp, #16
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <osThreadCreate+0x54>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01c      	beq.n	8004672 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685c      	ldr	r4, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681d      	ldr	r5, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691e      	ldr	r6, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ffb6 	bl	80045bc <makeFreeRtosPriority>
 8004650:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800465a:	9202      	str	r2, [sp, #8]
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	9100      	str	r1, [sp, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4632      	mov	r2, r6
 8004664:	4629      	mov	r1, r5
 8004666:	4620      	mov	r0, r4
 8004668:	f000 ff0f 	bl	800548a <xTaskCreateStatic>
 800466c:	4603      	mov	r3, r0
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e01c      	b.n	80046ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685c      	ldr	r4, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800467e:	b29e      	uxth	r6, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff98 	bl	80045bc <makeFreeRtosPriority>
 800468c:	4602      	mov	r2, r0
 800468e:	f107 030c 	add.w	r3, r7, #12
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	9200      	str	r2, [sp, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	4632      	mov	r2, r6
 800469a:	4629      	mov	r1, r5
 800469c:	4620      	mov	r0, r4
 800469e:	f000 ff4e 	bl	800553e <xTaskCreate>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046ac:	68fb      	ldr	r3, [r7, #12]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <osDelay+0x16>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	e000      	b.n	80046ce <osDelay+0x18>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f86a 	bl	80057a8 <vTaskDelay>
  
  return osOK;
 80046d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80046de:	b580      	push	{r7, lr}
 80046e0:	b086      	sub	sp, #24
 80046e2:	af02      	add	r7, sp, #8
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d010      	beq.n	8004712 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d10b      	bne.n	800470e <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	2303      	movs	r3, #3
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	4613      	mov	r3, r2
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	2001      	movs	r0, #1
 8004706:	f000 f9bd 	bl	8004a84 <xQueueGenericCreateStatic>
 800470a:	4603      	mov	r3, r0
 800470c:	e016      	b.n	800473c <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	e014      	b.n	800473c <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d110      	bne.n	800473a <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004718:	2203      	movs	r2, #3
 800471a:	2100      	movs	r1, #0
 800471c:	2001      	movs	r0, #1
 800471e:	f000 fa24 	bl	8004b6a <xQueueGenericCreate>
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <osSemaphoreCreate+0x58>
 800472a:	2300      	movs	r3, #0
 800472c:	2200      	movs	r2, #0
 800472e:	2100      	movs	r1, #0
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fa79 	bl	8004c28 <xQueueGenericSend>
      return sema;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	e000      	b.n	800473c <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800473a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	e03a      	b.n	80047d2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d103      	bne.n	8004770 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	e009      	b.n	8004784 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <osSemaphoreWait+0x40>
      ticks = 1;
 8004780:	2301      	movs	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004784:	f7ff ff32 	bl	80045ec <inHandlerMode>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d017      	beq.n	80047be <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	461a      	mov	r2, r3
 8004794:	2100      	movs	r1, #0
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fcd2 	bl	8005140 <xQueueReceiveFromISR>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d001      	beq.n	80047a6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80047a2:	23ff      	movs	r3, #255	; 0xff
 80047a4:	e015      	b.n	80047d2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d011      	beq.n	80047d0 <osSemaphoreWait+0x8c>
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <osSemaphoreWait+0x98>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	e008      	b.n	80047d0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80047be:	68f9      	ldr	r1, [r7, #12]
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fbb5 	bl	8004f30 <xQueueSemaphoreTake>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d001      	beq.n	80047d0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80047cc:	23ff      	movs	r3, #255	; 0xff
 80047ce:	e000      	b.n	80047d2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	e000ed04 	.word	0xe000ed04

080047e0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80047f0:	f7ff fefc 	bl	80045ec <inHandlerMode>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d016      	beq.n	8004828 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fb0b 	bl	8004e1c <xQueueGiveFromISR>
 8004806:	4603      	mov	r3, r0
 8004808:	2b01      	cmp	r3, #1
 800480a:	d001      	beq.n	8004810 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800480c:	23ff      	movs	r3, #255	; 0xff
 800480e:	e017      	b.n	8004840 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d013      	beq.n	800483e <osSemaphoreRelease+0x5e>
 8004816:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <osSemaphoreRelease+0x68>)
 8004818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	e00a      	b.n	800483e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004828:	2300      	movs	r3, #0
 800482a:	2200      	movs	r2, #0
 800482c:	2100      	movs	r1, #0
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f9fa 	bl	8004c28 <xQueueGenericSend>
 8004834:	4603      	mov	r3, r0
 8004836:	2b01      	cmp	r3, #1
 8004838:	d001      	beq.n	800483e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800483a:	23ff      	movs	r3, #255	; 0xff
 800483c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f103 0208 	add.w	r2, r3, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f04f 32ff 	mov.w	r2, #4294967295
 8004864:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f103 0208 	add.w	r2, r3, #8
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f103 0208 	add.w	r2, r3, #8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d103      	bne.n	800490e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e00c      	b.n	8004928 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3308      	adds	r3, #8
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e002      	b.n	800491c <vListInsert+0x2e>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	429a      	cmp	r2, r3
 8004926:	d2f6      	bcs.n	8004916 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	601a      	str	r2, [r3, #0]
}
 8004954:	bf00      	nop
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6892      	ldr	r2, [r2, #8]
 8004976:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6852      	ldr	r2, [r2, #4]
 8004980:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d103      	bne.n	8004994 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	1e5a      	subs	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d109      	bne.n	80049dc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	e7fe      	b.n	80049da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80049dc:	f001 fe66 	bl	80066ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	68f9      	ldr	r1, [r7, #12]
 8004a10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	441a      	add	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	22ff      	movs	r2, #255	; 0xff
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	22ff      	movs	r2, #255	; 0xff
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d114      	bne.n	8004a5c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d01a      	beq.n	8004a70 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3310      	adds	r3, #16
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 f924 	bl	8005c8c <xTaskRemoveFromEventList>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d012      	beq.n	8004a70 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <xQueueGenericReset+0xcc>)
 8004a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	e009      	b.n	8004a70 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3310      	adds	r3, #16
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fef3 	bl	800484c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3324      	adds	r3, #36	; 0x24
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff feee 	bl	800484c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a70:	f001 fe4a 	bl	8006708 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a74:	2301      	movs	r3, #1
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08e      	sub	sp, #56	; 0x38
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <xQueueGenericCreateStatic+0x28>
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aaa:	e7fe      	b.n	8004aaa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <xQueueGenericCreateStatic+0x42>
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <xQueueGenericCreateStatic+0x4e>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <xQueueGenericCreateStatic+0x52>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <xQueueGenericCreateStatic+0x54>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <xQueueGenericCreateStatic+0x6c>
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	623b      	str	r3, [r7, #32]
 8004aee:	e7fe      	b.n	8004aee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <xQueueGenericCreateStatic+0x78>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <xQueueGenericCreateStatic+0x7c>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <xQueueGenericCreateStatic+0x7e>
 8004b00:	2300      	movs	r3, #0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <xQueueGenericCreateStatic+0x96>
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	e7fe      	b.n	8004b18 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b1a:	2348      	movs	r3, #72	; 0x48
 8004b1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b48      	cmp	r3, #72	; 0x48
 8004b22:	d009      	beq.n	8004b38 <xQueueGenericCreateStatic+0xb4>
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e7fe      	b.n	8004b36 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00d      	beq.n	8004b60 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f844 	bl	8004be8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3730      	adds	r7, #48	; 0x30
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b08a      	sub	sp, #40	; 0x28
 8004b6e:	af02      	add	r7, sp, #8
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	4613      	mov	r3, r2
 8004b76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <xQueueGenericCreate+0x28>
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	e7fe      	b.n	8004b90 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	e004      	b.n	8004ba8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	3348      	adds	r3, #72	; 0x48
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 fe97 	bl	80068e0 <pvPortMalloc>
 8004bb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d011      	beq.n	8004bde <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	3348      	adds	r3, #72	; 0x48
 8004bc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bcc:	79fa      	ldrb	r2, [r7, #7]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f805 	bl	8004be8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bde:	69bb      	ldr	r3, [r7, #24]
	}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e002      	b.n	8004c0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c16:	2101      	movs	r1, #1
 8004c18:	69b8      	ldr	r0, [r7, #24]
 8004c1a:	f7ff fecb 	bl	80049b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08e      	sub	sp, #56	; 0x38
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c36:	2300      	movs	r3, #0
 8004c38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d109      	bne.n	8004c58 <xQueueGenericSend+0x30>
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c56:	e7fe      	b.n	8004c56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <xQueueGenericSend+0x3e>
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <xQueueGenericSend+0x42>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <xQueueGenericSend+0x44>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <xQueueGenericSend+0x5c>
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
 8004c82:	e7fe      	b.n	8004c82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d103      	bne.n	8004c92 <xQueueGenericSend+0x6a>
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <xQueueGenericSend+0x6e>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <xQueueGenericSend+0x70>
 8004c96:	2300      	movs	r3, #0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d109      	bne.n	8004cb0 <xQueueGenericSend+0x88>
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	623b      	str	r3, [r7, #32]
 8004cae:	e7fe      	b.n	8004cae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cb0:	f001 f9a2 	bl	8005ff8 <xTaskGetSchedulerState>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <xQueueGenericSend+0x98>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <xQueueGenericSend+0x9c>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <xQueueGenericSend+0x9e>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <xQueueGenericSend+0xb6>
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e7fe      	b.n	8004cdc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cde:	f001 fce5 	bl	80066ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <xQueueGenericSend+0xcc>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d129      	bne.n	8004d48 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cfa:	f000 fab6 	bl	800526a <prvCopyDataToQueue>
 8004cfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d010      	beq.n	8004d2a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	3324      	adds	r3, #36	; 0x24
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 ffbd 	bl	8005c8c <xTaskRemoveFromEventList>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d18:	4b3f      	ldr	r3, [pc, #252]	; (8004e18 <xQueueGenericSend+0x1f0>)
 8004d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	e00a      	b.n	8004d40 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d30:	4b39      	ldr	r3, [pc, #228]	; (8004e18 <xQueueGenericSend+0x1f0>)
 8004d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d40:	f001 fce2 	bl	8006708 <vPortExitCritical>
				return pdPASS;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e063      	b.n	8004e10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d4e:	f001 fcdb 	bl	8006708 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e05c      	b.n	8004e10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d5c:	f107 0314 	add.w	r3, r7, #20
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fff5 	bl	8005d50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d66:	2301      	movs	r3, #1
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d6a:	f001 fccd 	bl	8006708 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d6e:	f000 fdad 	bl	80058cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d72:	f001 fc9b 	bl	80066ac <vPortEnterCritical>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d7c:	b25b      	sxtb	r3, r3
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d103      	bne.n	8004d8c <xQueueGenericSend+0x164>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d103      	bne.n	8004da2 <xQueueGenericSend+0x17a>
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da2:	f001 fcb1 	bl	8006708 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004da6:	1d3a      	adds	r2, r7, #4
 8004da8:	f107 0314 	add.w	r3, r7, #20
 8004dac:	4611      	mov	r1, r2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 ffe4 	bl	8005d7c <xTaskCheckForTimeOut>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d124      	bne.n	8004e04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dbc:	f000 fb4d 	bl	800545a <prvIsQueueFull>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d018      	beq.n	8004df8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	3310      	adds	r3, #16
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 ff38 	bl	8005c44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dd6:	f000 fad8 	bl	800538a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dda:	f000 fd85 	bl	80058e8 <xTaskResumeAll>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f47f af7c 	bne.w	8004cde <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <xQueueGenericSend+0x1f0>)
 8004de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	e772      	b.n	8004cde <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dfa:	f000 fac6 	bl	800538a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dfe:	f000 fd73 	bl	80058e8 <xTaskResumeAll>
 8004e02:	e76c      	b.n	8004cde <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e06:	f000 fac0 	bl	800538a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e0a:	f000 fd6d 	bl	80058e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3738      	adds	r7, #56	; 0x38
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08e      	sub	sp, #56	; 0x38
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d109      	bne.n	8004e44 <xQueueGiveFromISR+0x28>
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	e7fe      	b.n	8004e42 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d009      	beq.n	8004e60 <xQueueGiveFromISR+0x44>
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	e7fe      	b.n	8004e5e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d103      	bne.n	8004e70 <xQueueGiveFromISR+0x54>
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <xQueueGiveFromISR+0x58>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <xQueueGiveFromISR+0x5a>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <xQueueGiveFromISR+0x72>
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	e7fe      	b.n	8004e8c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e8e:	f001 fce9 	bl	8006864 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e92:	f3ef 8211 	mrs	r2, BASEPRI
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	617a      	str	r2, [r7, #20]
 8004ea8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004eaa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d22b      	bcs.n	8004f16 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ed0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d112      	bne.n	8004f00 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d016      	beq.n	8004f10 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	3324      	adds	r3, #36	; 0x24
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fed0 	bl	8005c8c <xTaskRemoveFromEventList>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00e      	beq.n	8004f10 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e007      	b.n	8004f10 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f04:	3301      	adds	r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	b25a      	sxtb	r2, r3
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f10:	2301      	movs	r3, #1
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34
 8004f14:	e001      	b.n	8004f1a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3738      	adds	r7, #56	; 0x38
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08e      	sub	sp, #56	; 0x38
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	e7fe      	b.n	8004f5e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d009      	beq.n	8004f7c <xQueueSemaphoreTake+0x4c>
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	e7fe      	b.n	8004f7a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f7c:	f001 f83c 	bl	8005ff8 <xTaskGetSchedulerState>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <xQueueSemaphoreTake+0x5c>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <xQueueSemaphoreTake+0x60>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <xQueueSemaphoreTake+0x62>
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <xQueueSemaphoreTake+0x7a>
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004faa:	f001 fb7f 	bl	80066ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d024      	beq.n	8005004 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	1e5a      	subs	r2, r3, #1
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d104      	bne.n	8004fd4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004fca:	f001 f9cf 	bl	800636c <pvTaskIncrementMutexHeldCount>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00f      	beq.n	8004ffc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	3310      	adds	r3, #16
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fe53 	bl	8005c8c <xTaskRemoveFromEventList>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fec:	4b53      	ldr	r3, [pc, #332]	; (800513c <xQueueSemaphoreTake+0x20c>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ffc:	f001 fb84 	bl	8006708 <vPortExitCritical>
				return pdPASS;
 8005000:	2301      	movs	r3, #1
 8005002:	e096      	b.n	8005132 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d110      	bne.n	800502c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <xQueueSemaphoreTake+0xf4>
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e7fe      	b.n	8005022 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005024:	f001 fb70 	bl	8006708 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005028:	2300      	movs	r3, #0
 800502a:	e082      	b.n	8005132 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005032:	f107 030c 	add.w	r3, r7, #12
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fe8a 	bl	8005d50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800503c:	2301      	movs	r3, #1
 800503e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005040:	f001 fb62 	bl	8006708 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005044:	f000 fc42 	bl	80058cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005048:	f001 fb30 	bl	80066ac <vPortEnterCritical>
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005052:	b25b      	sxtb	r3, r3
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d103      	bne.n	8005062 <xQueueSemaphoreTake+0x132>
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005068:	b25b      	sxtb	r3, r3
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d103      	bne.n	8005078 <xQueueSemaphoreTake+0x148>
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005078:	f001 fb46 	bl	8006708 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800507c:	463a      	mov	r2, r7
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fe79 	bl	8005d7c <xTaskCheckForTimeOut>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d132      	bne.n	80050f6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005092:	f000 f9cc 	bl	800542e <prvIsQueueEmpty>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d026      	beq.n	80050ea <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80050a4:	f001 fb02 	bl	80066ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 ffc1 	bl	8006034 <xTaskPriorityInherit>
 80050b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80050b4:	f001 fb28 	bl	8006708 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	3324      	adds	r3, #36	; 0x24
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	4611      	mov	r1, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fdbf 	bl	8005c44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050c8:	f000 f95f 	bl	800538a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050cc:	f000 fc0c 	bl	80058e8 <xTaskResumeAll>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f47f af69 	bne.w	8004faa <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80050d8:	4b18      	ldr	r3, [pc, #96]	; (800513c <xQueueSemaphoreTake+0x20c>)
 80050da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	e75f      	b.n	8004faa <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80050ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050ec:	f000 f94d 	bl	800538a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050f0:	f000 fbfa 	bl	80058e8 <xTaskResumeAll>
 80050f4:	e759      	b.n	8004faa <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80050f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050f8:	f000 f947 	bl	800538a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050fc:	f000 fbf4 	bl	80058e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005102:	f000 f994 	bl	800542e <prvIsQueueEmpty>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	f43f af4e 	beq.w	8004faa <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005114:	f001 faca 	bl	80066ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800511a:	f000 f88e 	bl	800523a <prvGetDisinheritPriorityAfterTimeout>
 800511e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005126:	4618      	mov	r0, r3
 8005128:	f001 f888 	bl	800623c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800512c:	f001 faec 	bl	8006708 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005132:	4618      	mov	r0, r3
 8005134:	3738      	adds	r7, #56	; 0x38
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	e000ed04 	.word	0xe000ed04

08005140 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08e      	sub	sp, #56	; 0x38
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	2b00      	cmp	r3, #0
 8005154:	d109      	bne.n	800516a <xQueueReceiveFromISR+0x2a>
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	623b      	str	r3, [r7, #32]
 8005168:	e7fe      	b.n	8005168 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d103      	bne.n	8005178 <xQueueReceiveFromISR+0x38>
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <xQueueReceiveFromISR+0x3c>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <xQueueReceiveFromISR+0x3e>
 800517c:	2300      	movs	r3, #0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <xQueueReceiveFromISR+0x56>
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	e7fe      	b.n	8005194 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005196:	f001 fb65 	bl	8006864 <vPortValidateInterruptPriority>
	__asm volatile
 800519a:	f3ef 8211 	mrs	r2, BASEPRI
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	61ba      	str	r2, [r7, #24]
 80051b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80051b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d02f      	beq.n	8005222 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051d0:	f000 f8b5 	bl	800533e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	1e5a      	subs	r2, r3, #1
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80051dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d112      	bne.n	800520c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	3310      	adds	r3, #16
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fd4a 	bl	8005c8c <xTaskRemoveFromEventList>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00e      	beq.n	800521c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00b      	beq.n	800521c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e007      	b.n	800521c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800520c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005210:	3301      	adds	r3, #1
 8005212:	b2db      	uxtb	r3, r3
 8005214:	b25a      	sxtb	r2, r3
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800521c:	2301      	movs	r3, #1
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
 8005220:	e001      	b.n	8005226 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005222:	2300      	movs	r3, #0
 8005224:	637b      	str	r3, [r7, #52]	; 0x34
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	613b      	str	r3, [r7, #16]
	__asm volatile
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005232:	4618      	mov	r0, r3
 8005234:	3738      	adds	r7, #56	; 0x38
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f1c3 0307 	rsb	r3, r3, #7
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e001      	b.n	800525c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800525c:	68fb      	ldr	r3, [r7, #12]
	}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b086      	sub	sp, #24
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10d      	bne.n	80052a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d14d      	bne.n	800532c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4618      	mov	r0, r3
 8005296:	f000 ff4d 	bl	8006134 <xTaskPriorityDisinherit>
 800529a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	e043      	b.n	800532c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d119      	bne.n	80052de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6858      	ldr	r0, [r3, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	461a      	mov	r2, r3
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	f001 fd13 	bl	8006ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	441a      	add	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d32b      	bcc.n	800532c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	e026      	b.n	800532c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68d8      	ldr	r0, [r3, #12]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	461a      	mov	r2, r3
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	f001 fcf9 	bl	8006ce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	425b      	negs	r3, r3
 80052f8:	441a      	add	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d207      	bcs.n	800531a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	425b      	negs	r3, r3
 8005314:	441a      	add	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d105      	bne.n	800532c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	3b01      	subs	r3, #1
 800532a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005334:	697b      	ldr	r3, [r7, #20]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d018      	beq.n	8005382 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	441a      	add	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	429a      	cmp	r2, r3
 8005368:	d303      	bcc.n	8005372 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68d9      	ldr	r1, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	461a      	mov	r2, r3
 800537c:	6838      	ldr	r0, [r7, #0]
 800537e:	f001 fcaf 	bl	8006ce0 <memcpy>
	}
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005392:	f001 f98b 	bl	80066ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800539c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800539e:	e011      	b.n	80053c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d012      	beq.n	80053ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3324      	adds	r3, #36	; 0x24
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fc6d 	bl	8005c8c <xTaskRemoveFromEventList>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053b8:	f000 fd40 	bl	8005e3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	3b01      	subs	r3, #1
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dce9      	bgt.n	80053a0 <prvUnlockQueue+0x16>
 80053cc:	e000      	b.n	80053d0 <prvUnlockQueue+0x46>
					break;
 80053ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	22ff      	movs	r2, #255	; 0xff
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053d8:	f001 f996 	bl	8006708 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053dc:	f001 f966 	bl	80066ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053e8:	e011      	b.n	800540e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d012      	beq.n	8005418 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3310      	adds	r3, #16
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fc48 	bl	8005c8c <xTaskRemoveFromEventList>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005402:	f000 fd1b 	bl	8005e3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005406:	7bbb      	ldrb	r3, [r7, #14]
 8005408:	3b01      	subs	r3, #1
 800540a:	b2db      	uxtb	r3, r3
 800540c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800540e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005412:	2b00      	cmp	r3, #0
 8005414:	dce9      	bgt.n	80053ea <prvUnlockQueue+0x60>
 8005416:	e000      	b.n	800541a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005418:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	22ff      	movs	r2, #255	; 0xff
 800541e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005422:	f001 f971 	bl	8006708 <vPortExitCritical>
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005436:	f001 f939 	bl	80066ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005442:	2301      	movs	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e001      	b.n	800544c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800544c:	f001 f95c 	bl	8006708 <vPortExitCritical>

	return xReturn;
 8005450:	68fb      	ldr	r3, [r7, #12]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005462:	f001 f923 	bl	80066ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546e:	429a      	cmp	r2, r3
 8005470:	d102      	bne.n	8005478 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e001      	b.n	800547c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800547c:	f001 f944 	bl	8006708 <vPortExitCritical>

	return xReturn;
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800548a:	b580      	push	{r7, lr}
 800548c:	b08e      	sub	sp, #56	; 0x38
 800548e:	af04      	add	r7, sp, #16
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
 8005496:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <xTaskCreateStatic+0x28>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	623b      	str	r3, [r7, #32]
 80054b0:	e7fe      	b.n	80054b0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <xTaskCreateStatic+0x42>
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	e7fe      	b.n	80054ca <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054cc:	2354      	movs	r3, #84	; 0x54
 80054ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b54      	cmp	r3, #84	; 0x54
 80054d4:	d009      	beq.n	80054ea <xTaskCreateStatic+0x60>
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	e7fe      	b.n	80054e8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01e      	beq.n	8005530 <xTaskCreateStatic+0xa6>
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005500:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	2202      	movs	r2, #2
 8005506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800550a:	2300      	movs	r3, #0
 800550c:	9303      	str	r3, [sp, #12]
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	9302      	str	r3, [sp, #8]
 8005512:	f107 0314 	add.w	r3, r7, #20
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f850 	bl	80055c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800552a:	f000 f8d3 	bl	80056d4 <prvAddNewTaskToReadyList>
 800552e:	e001      	b.n	8005534 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005534:	697b      	ldr	r3, [r7, #20]
	}
 8005536:	4618      	mov	r0, r3
 8005538:	3728      	adds	r7, #40	; 0x28
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800553e:	b580      	push	{r7, lr}
 8005540:	b08c      	sub	sp, #48	; 0x30
 8005542:	af04      	add	r7, sp, #16
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f001 f9c4 	bl	80068e0 <pvPortMalloc>
 8005558:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00e      	beq.n	800557e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005560:	2054      	movs	r0, #84	; 0x54
 8005562:	f001 f9bd 	bl	80068e0 <pvPortMalloc>
 8005566:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
 8005574:	e005      	b.n	8005582 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005576:	6978      	ldr	r0, [r7, #20]
 8005578:	f001 fa74 	bl	8006a64 <vPortFree>
 800557c:	e001      	b.n	8005582 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d017      	beq.n	80055b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005590:	88fa      	ldrh	r2, [r7, #6]
 8005592:	2300      	movs	r3, #0
 8005594:	9303      	str	r3, [sp, #12]
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	9302      	str	r3, [sp, #8]
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 f80e 	bl	80055c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055ac:	69f8      	ldr	r0, [r7, #28]
 80055ae:	f000 f891 	bl	80056d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055b2:	2301      	movs	r3, #1
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	e002      	b.n	80055be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055b8:	f04f 33ff 	mov.w	r3, #4294967295
 80055bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055be:	69bb      	ldr	r3, [r7, #24]
	}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3720      	adds	r7, #32
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055e0:	3b01      	subs	r3, #1
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f023 0307 	bic.w	r3, r3, #7
 80055ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <prvInitialiseNewTask+0x46>
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e7fe      	b.n	800560c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01f      	beq.n	8005654 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005614:	2300      	movs	r3, #0
 8005616:	61fb      	str	r3, [r7, #28]
 8005618:	e012      	b.n	8005640 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	7819      	ldrb	r1, [r3, #0]
 8005622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	3334      	adds	r3, #52	; 0x34
 800562a:	460a      	mov	r2, r1
 800562c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3301      	adds	r3, #1
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2b0f      	cmp	r3, #15
 8005644:	d9e9      	bls.n	800561a <prvInitialiseNewTask+0x52>
 8005646:	e000      	b.n	800564a <prvInitialiseNewTask+0x82>
			{
				break;
 8005648:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005652:	e003      	b.n	800565c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	2b06      	cmp	r3, #6
 8005660:	d901      	bls.n	8005666 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005662:	2306      	movs	r3, #6
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800566a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005670:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	2200      	movs	r2, #0
 8005676:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	3304      	adds	r3, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff f905 	bl	800488c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	3318      	adds	r3, #24
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff f900 	bl	800488c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005690:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	f1c3 0207 	rsb	r2, r3, #7
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	2200      	movs	r2, #0
 80056a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	68f9      	ldr	r1, [r7, #12]
 80056b4:	69b8      	ldr	r0, [r7, #24]
 80056b6:	f000 fed3 	bl	8006460 <pxPortInitialiseStack>
 80056ba:	4602      	mov	r2, r0
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056cc:	bf00      	nop
 80056ce:	3720      	adds	r7, #32
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056dc:	f000 ffe6 	bl	80066ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056e0:	4b2a      	ldr	r3, [pc, #168]	; (800578c <prvAddNewTaskToReadyList+0xb8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3301      	adds	r3, #1
 80056e6:	4a29      	ldr	r2, [pc, #164]	; (800578c <prvAddNewTaskToReadyList+0xb8>)
 80056e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056ea:	4b29      	ldr	r3, [pc, #164]	; (8005790 <prvAddNewTaskToReadyList+0xbc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056f2:	4a27      	ldr	r2, [pc, #156]	; (8005790 <prvAddNewTaskToReadyList+0xbc>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056f8:	4b24      	ldr	r3, [pc, #144]	; (800578c <prvAddNewTaskToReadyList+0xb8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d110      	bne.n	8005722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005700:	f000 fbc0 	bl	8005e84 <prvInitialiseTaskLists>
 8005704:	e00d      	b.n	8005722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005706:	4b23      	ldr	r3, [pc, #140]	; (8005794 <prvAddNewTaskToReadyList+0xc0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800570e:	4b20      	ldr	r3, [pc, #128]	; (8005790 <prvAddNewTaskToReadyList+0xbc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	429a      	cmp	r2, r3
 800571a:	d802      	bhi.n	8005722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800571c:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <prvAddNewTaskToReadyList+0xbc>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <prvAddNewTaskToReadyList+0xc4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3301      	adds	r3, #1
 8005728:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <prvAddNewTaskToReadyList+0xc4>)
 800572a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	2201      	movs	r2, #1
 8005732:	409a      	lsls	r2, r3
 8005734:	4b19      	ldr	r3, [pc, #100]	; (800579c <prvAddNewTaskToReadyList+0xc8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4313      	orrs	r3, r2
 800573a:	4a18      	ldr	r2, [pc, #96]	; (800579c <prvAddNewTaskToReadyList+0xc8>)
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <prvAddNewTaskToReadyList+0xcc>)
 800574c:	441a      	add	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3304      	adds	r3, #4
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f7ff f8a6 	bl	80048a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800575a:	f000 ffd5 	bl	8006708 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <prvAddNewTaskToReadyList+0xc0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00e      	beq.n	8005784 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <prvAddNewTaskToReadyList+0xbc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	429a      	cmp	r2, r3
 8005772:	d207      	bcs.n	8005784 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <prvAddNewTaskToReadyList+0xd0>)
 8005776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000554 	.word	0x20000554
 8005790:	20000454 	.word	0x20000454
 8005794:	20000560 	.word	0x20000560
 8005798:	20000570 	.word	0x20000570
 800579c:	2000055c 	.word	0x2000055c
 80057a0:	20000458 	.word	0x20000458
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d016      	beq.n	80057e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057ba:	4b13      	ldr	r3, [pc, #76]	; (8005808 <vTaskDelay+0x60>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <vTaskDelay+0x2e>
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	e7fe      	b.n	80057d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80057d6:	f000 f879 	bl	80058cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057da:	2100      	movs	r1, #0
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fdd9 	bl	8006394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057e2:	f000 f881 	bl	80058e8 <xTaskResumeAll>
 80057e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d107      	bne.n	80057fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <vTaskDelay+0x64>)
 80057f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	2000057c 	.word	0x2000057c
 800580c:	e000ed04 	.word	0xe000ed04

08005810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800581e:	463a      	mov	r2, r7
 8005820:	1d39      	adds	r1, r7, #4
 8005822:	f107 0308 	add.w	r3, r7, #8
 8005826:	4618      	mov	r0, r3
 8005828:	f7fb fbee 	bl	8001008 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	9202      	str	r2, [sp, #8]
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	2300      	movs	r3, #0
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	2300      	movs	r3, #0
 800583c:	460a      	mov	r2, r1
 800583e:	491d      	ldr	r1, [pc, #116]	; (80058b4 <vTaskStartScheduler+0xa4>)
 8005840:	481d      	ldr	r0, [pc, #116]	; (80058b8 <vTaskStartScheduler+0xa8>)
 8005842:	f7ff fe22 	bl	800548a <xTaskCreateStatic>
 8005846:	4602      	mov	r2, r0
 8005848:	4b1c      	ldr	r3, [pc, #112]	; (80058bc <vTaskStartScheduler+0xac>)
 800584a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <vTaskStartScheduler+0xac>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005854:	2301      	movs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e001      	b.n	800585e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d115      	bne.n	8005890 <vTaskStartScheduler+0x80>
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005876:	4b12      	ldr	r3, [pc, #72]	; (80058c0 <vTaskStartScheduler+0xb0>)
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <vTaskStartScheduler+0xb4>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <vTaskStartScheduler+0xb8>)
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800588a:	f000 fe71 	bl	8006570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800588e:	e00d      	b.n	80058ac <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d109      	bne.n	80058ac <vTaskStartScheduler+0x9c>
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e7fe      	b.n	80058aa <vTaskStartScheduler+0x9a>
}
 80058ac:	bf00      	nop
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	080093cc 	.word	0x080093cc
 80058b8:	08005e55 	.word	0x08005e55
 80058bc:	20000578 	.word	0x20000578
 80058c0:	20000574 	.word	0x20000574
 80058c4:	20000560 	.word	0x20000560
 80058c8:	20000558 	.word	0x20000558

080058cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80058d0:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <vTaskSuspendAll+0x18>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a03      	ldr	r2, [pc, #12]	; (80058e4 <vTaskSuspendAll+0x18>)
 80058d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80058da:	bf00      	nop
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	2000057c 	.word	0x2000057c

080058e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058f6:	4b41      	ldr	r3, [pc, #260]	; (80059fc <xTaskResumeAll+0x114>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <xTaskResumeAll+0x2a>
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	e7fe      	b.n	8005910 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005912:	f000 fecb 	bl	80066ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005916:	4b39      	ldr	r3, [pc, #228]	; (80059fc <xTaskResumeAll+0x114>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3b01      	subs	r3, #1
 800591c:	4a37      	ldr	r2, [pc, #220]	; (80059fc <xTaskResumeAll+0x114>)
 800591e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005920:	4b36      	ldr	r3, [pc, #216]	; (80059fc <xTaskResumeAll+0x114>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d161      	bne.n	80059ec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005928:	4b35      	ldr	r3, [pc, #212]	; (8005a00 <xTaskResumeAll+0x118>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d05d      	beq.n	80059ec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005930:	e02e      	b.n	8005990 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005932:	4b34      	ldr	r3, [pc, #208]	; (8005a04 <xTaskResumeAll+0x11c>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3318      	adds	r3, #24
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff f80e 	bl	8004960 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3304      	adds	r3, #4
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff f809 	bl	8004960 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	2201      	movs	r2, #1
 8005954:	409a      	lsls	r2, r3
 8005956:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <xTaskResumeAll+0x120>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4313      	orrs	r3, r2
 800595c:	4a2a      	ldr	r2, [pc, #168]	; (8005a08 <xTaskResumeAll+0x120>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <xTaskResumeAll+0x124>)
 800596e:	441a      	add	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7fe ff95 	bl	80048a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4b23      	ldr	r3, [pc, #140]	; (8005a10 <xTaskResumeAll+0x128>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800598a:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <xTaskResumeAll+0x12c>)
 800598c:	2201      	movs	r2, #1
 800598e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005990:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <xTaskResumeAll+0x11c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1cc      	bne.n	8005932 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800599e:	f000 fb0b 	bl	8005fb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80059a2:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <xTaskResumeAll+0x130>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d010      	beq.n	80059d0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059ae:	f000 f837 	bl	8005a20 <xTaskIncrementTick>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80059b8:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <xTaskResumeAll+0x12c>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f1      	bne.n	80059ae <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <xTaskResumeAll+0x130>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <xTaskResumeAll+0x12c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d009      	beq.n	80059ec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059d8:	2301      	movs	r3, #1
 80059da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059dc:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <xTaskResumeAll+0x134>)
 80059de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059ec:	f000 fe8c 	bl	8006708 <vPortExitCritical>

	return xAlreadyYielded;
 80059f0:	68bb      	ldr	r3, [r7, #8]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	2000057c 	.word	0x2000057c
 8005a00:	20000554 	.word	0x20000554
 8005a04:	20000514 	.word	0x20000514
 8005a08:	2000055c 	.word	0x2000055c
 8005a0c:	20000458 	.word	0x20000458
 8005a10:	20000454 	.word	0x20000454
 8005a14:	20000568 	.word	0x20000568
 8005a18:	20000564 	.word	0x20000564
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a2a:	4b4e      	ldr	r3, [pc, #312]	; (8005b64 <xTaskIncrementTick+0x144>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 8087 	bne.w	8005b42 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a34:	4b4c      	ldr	r3, [pc, #304]	; (8005b68 <xTaskIncrementTick+0x148>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a3c:	4a4a      	ldr	r2, [pc, #296]	; (8005b68 <xTaskIncrementTick+0x148>)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11f      	bne.n	8005a88 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a48:	4b48      	ldr	r3, [pc, #288]	; (8005b6c <xTaskIncrementTick+0x14c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <xTaskIncrementTick+0x46>
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	e7fe      	b.n	8005a64 <xTaskIncrementTick+0x44>
 8005a66:	4b41      	ldr	r3, [pc, #260]	; (8005b6c <xTaskIncrementTick+0x14c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	4b40      	ldr	r3, [pc, #256]	; (8005b70 <xTaskIncrementTick+0x150>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a3e      	ldr	r2, [pc, #248]	; (8005b6c <xTaskIncrementTick+0x14c>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	4a3e      	ldr	r2, [pc, #248]	; (8005b70 <xTaskIncrementTick+0x150>)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	4b3e      	ldr	r3, [pc, #248]	; (8005b74 <xTaskIncrementTick+0x154>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	4a3c      	ldr	r2, [pc, #240]	; (8005b74 <xTaskIncrementTick+0x154>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	f000 fa98 	bl	8005fb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a88:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <xTaskIncrementTick+0x158>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d348      	bcc.n	8005b24 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a92:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <xTaskIncrementTick+0x14c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a9c:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <xTaskIncrementTick+0x158>)
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa2:	601a      	str	r2, [r3, #0]
					break;
 8005aa4:	e03e      	b.n	8005b24 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa6:	4b31      	ldr	r3, [pc, #196]	; (8005b6c <xTaskIncrementTick+0x14c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d203      	bcs.n	8005ac6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005abe:	4a2e      	ldr	r2, [pc, #184]	; (8005b78 <xTaskIncrementTick+0x158>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ac4:	e02e      	b.n	8005b24 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe ff48 	bl	8004960 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	3318      	adds	r3, #24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe ff3f 	bl	8004960 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	409a      	lsls	r2, r3
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <xTaskIncrementTick+0x15c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	4a22      	ldr	r2, [pc, #136]	; (8005b7c <xTaskIncrementTick+0x15c>)
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4a1f      	ldr	r2, [pc, #124]	; (8005b80 <xTaskIncrementTick+0x160>)
 8005b02:	441a      	add	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7fe fecb 	bl	80048a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b14:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <xTaskIncrementTick+0x164>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3b9      	bcc.n	8005a92 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b22:	e7b6      	b.n	8005a92 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b24:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <xTaskIncrementTick+0x164>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2a:	4915      	ldr	r1, [pc, #84]	; (8005b80 <xTaskIncrementTick+0x160>)
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d907      	bls.n	8005b4c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	e004      	b.n	8005b4c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <xTaskIncrementTick+0x168>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3301      	adds	r3, #1
 8005b48:	4a0f      	ldr	r2, [pc, #60]	; (8005b88 <xTaskIncrementTick+0x168>)
 8005b4a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <xTaskIncrementTick+0x16c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b58:	697b      	ldr	r3, [r7, #20]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	2000057c 	.word	0x2000057c
 8005b68:	20000558 	.word	0x20000558
 8005b6c:	2000050c 	.word	0x2000050c
 8005b70:	20000510 	.word	0x20000510
 8005b74:	2000056c 	.word	0x2000056c
 8005b78:	20000574 	.word	0x20000574
 8005b7c:	2000055c 	.word	0x2000055c
 8005b80:	20000458 	.word	0x20000458
 8005b84:	20000454 	.word	0x20000454
 8005b88:	20000564 	.word	0x20000564
 8005b8c:	20000568 	.word	0x20000568

08005b90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b96:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <vTaskSwitchContext+0xa0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b9e:	4b25      	ldr	r3, [pc, #148]	; (8005c34 <vTaskSwitchContext+0xa4>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ba4:	e03e      	b.n	8005c24 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005ba6:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <vTaskSwitchContext+0xa4>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bac:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <vTaskSwitchContext+0xa8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	fab3 f383 	clz	r3, r3
 8005bb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005bba:	7afb      	ldrb	r3, [r7, #11]
 8005bbc:	f1c3 031f 	rsb	r3, r3, #31
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	491e      	ldr	r1, [pc, #120]	; (8005c3c <vTaskSwitchContext+0xac>)
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <vTaskSwitchContext+0x5a>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e7fe      	b.n	8005be8 <vTaskSwitchContext+0x58>
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4a11      	ldr	r2, [pc, #68]	; (8005c3c <vTaskSwitchContext+0xac>)
 8005bf6:	4413      	add	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d104      	bne.n	8005c1a <vTaskSwitchContext+0x8a>
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4a07      	ldr	r2, [pc, #28]	; (8005c40 <vTaskSwitchContext+0xb0>)
 8005c22:	6013      	str	r3, [r2, #0]
}
 8005c24:	bf00      	nop
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	2000057c 	.word	0x2000057c
 8005c34:	20000568 	.word	0x20000568
 8005c38:	2000055c 	.word	0x2000055c
 8005c3c:	20000458 	.word	0x20000458
 8005c40:	20000454 	.word	0x20000454

08005c44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d109      	bne.n	8005c68 <vTaskPlaceOnEventList+0x24>
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e7fe      	b.n	8005c66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c68:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <vTaskPlaceOnEventList+0x44>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3318      	adds	r3, #24
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fe fe3c 	bl	80048ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c76:	2101      	movs	r1, #1
 8005c78:	6838      	ldr	r0, [r7, #0]
 8005c7a:	f000 fb8b 	bl	8006394 <prvAddCurrentTaskToDelayedList>
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000454 	.word	0x20000454

08005c8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <xTaskRemoveFromEventList+0x2a>
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e7fe      	b.n	8005cb4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	3318      	adds	r3, #24
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fe50 	bl	8004960 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <xTaskRemoveFromEventList+0xac>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d11c      	bne.n	8005d02 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fe47 	bl	8004960 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	409a      	lsls	r2, r3
 8005cda:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <xTaskRemoveFromEventList+0xb0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <xTaskRemoveFromEventList+0xb0>)
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <xTaskRemoveFromEventList+0xb4>)
 8005cf2:	441a      	add	r2, r3
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f7fe fdd3 	bl	80048a6 <vListInsertEnd>
 8005d00:	e005      	b.n	8005d0e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	3318      	adds	r3, #24
 8005d06:	4619      	mov	r1, r3
 8005d08:	480e      	ldr	r0, [pc, #56]	; (8005d44 <xTaskRemoveFromEventList+0xb8>)
 8005d0a:	f7fe fdcc 	bl	80048a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d12:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <xTaskRemoveFromEventList+0xbc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d905      	bls.n	8005d28 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <xTaskRemoveFromEventList+0xc0>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e001      	b.n	8005d2c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d2c:	697b      	ldr	r3, [r7, #20]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	2000057c 	.word	0x2000057c
 8005d3c:	2000055c 	.word	0x2000055c
 8005d40:	20000458 	.word	0x20000458
 8005d44:	20000514 	.word	0x20000514
 8005d48:	20000454 	.word	0x20000454
 8005d4c:	20000568 	.word	0x20000568

08005d50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <vTaskInternalSetTimeOutState+0x24>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <vTaskInternalSetTimeOutState+0x28>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	605a      	str	r2, [r3, #4]
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	2000056c 	.word	0x2000056c
 8005d78:	20000558 	.word	0x20000558

08005d7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <xTaskCheckForTimeOut+0x24>
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	e7fe      	b.n	8005d9e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <xTaskCheckForTimeOut+0x3e>
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e7fe      	b.n	8005db8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005dba:	f000 fc77 	bl	80066ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dbe:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <xTaskCheckForTimeOut+0xb8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d102      	bne.n	8005dde <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	e023      	b.n	8005e26 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <xTaskCheckForTimeOut+0xbc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d007      	beq.n	8005dfa <xTaskCheckForTimeOut+0x7e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d302      	bcc.n	8005dfa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e015      	b.n	8005e26 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d20b      	bcs.n	8005e1c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff ff9d 	bl	8005d50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e004      	b.n	8005e26 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e22:	2301      	movs	r3, #1
 8005e24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e26:	f000 fc6f 	bl	8006708 <vPortExitCritical>

	return xReturn;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20000558 	.word	0x20000558
 8005e38:	2000056c 	.word	0x2000056c

08005e3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e40:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <vTaskMissedYield+0x14>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
}
 8005e46:	bf00      	nop
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	20000568 	.word	0x20000568

08005e54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e5c:	f000 f852 	bl	8005f04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <prvIdleTask+0x28>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d9f9      	bls.n	8005e5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <prvIdleTask+0x2c>)
 8005e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e78:	e7f0      	b.n	8005e5c <prvIdleTask+0x8>
 8005e7a:	bf00      	nop
 8005e7c:	20000458 	.word	0x20000458
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	607b      	str	r3, [r7, #4]
 8005e8e:	e00c      	b.n	8005eaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4a12      	ldr	r2, [pc, #72]	; (8005ee4 <prvInitialiseTaskLists+0x60>)
 8005e9c:	4413      	add	r3, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fcd4 	bl	800484c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	d9ef      	bls.n	8005e90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eb0:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <prvInitialiseTaskLists+0x64>)
 8005eb2:	f7fe fccb 	bl	800484c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eb6:	480d      	ldr	r0, [pc, #52]	; (8005eec <prvInitialiseTaskLists+0x68>)
 8005eb8:	f7fe fcc8 	bl	800484c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ebc:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <prvInitialiseTaskLists+0x6c>)
 8005ebe:	f7fe fcc5 	bl	800484c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ec2:	480c      	ldr	r0, [pc, #48]	; (8005ef4 <prvInitialiseTaskLists+0x70>)
 8005ec4:	f7fe fcc2 	bl	800484c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ec8:	480b      	ldr	r0, [pc, #44]	; (8005ef8 <prvInitialiseTaskLists+0x74>)
 8005eca:	f7fe fcbf 	bl	800484c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ece:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <prvInitialiseTaskLists+0x78>)
 8005ed0:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <prvInitialiseTaskLists+0x64>)
 8005ed2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <prvInitialiseTaskLists+0x7c>)
 8005ed6:	4a05      	ldr	r2, [pc, #20]	; (8005eec <prvInitialiseTaskLists+0x68>)
 8005ed8:	601a      	str	r2, [r3, #0]
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000458 	.word	0x20000458
 8005ee8:	200004e4 	.word	0x200004e4
 8005eec:	200004f8 	.word	0x200004f8
 8005ef0:	20000514 	.word	0x20000514
 8005ef4:	20000528 	.word	0x20000528
 8005ef8:	20000540 	.word	0x20000540
 8005efc:	2000050c 	.word	0x2000050c
 8005f00:	20000510 	.word	0x20000510

08005f04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f0a:	e019      	b.n	8005f40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f0c:	f000 fbce 	bl	80066ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f10:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <prvCheckTasksWaitingTermination+0x4c>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe fd1f 	bl	8004960 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <prvCheckTasksWaitingTermination+0x50>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <prvCheckTasksWaitingTermination+0x50>)
 8005f2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <prvCheckTasksWaitingTermination+0x54>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <prvCheckTasksWaitingTermination+0x54>)
 8005f34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f36:	f000 fbe7 	bl	8006708 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f80e 	bl	8005f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <prvCheckTasksWaitingTermination+0x54>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e1      	bne.n	8005f0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000528 	.word	0x20000528
 8005f54:	20000554 	.word	0x20000554
 8005f58:	2000053c 	.word	0x2000053c

08005f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d108      	bne.n	8005f80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fd76 	bl	8006a64 <vPortFree>
				vPortFree( pxTCB );
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fd73 	bl	8006a64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f7e:	e017      	b.n	8005fb0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d103      	bne.n	8005f92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fd6a 	bl	8006a64 <vPortFree>
	}
 8005f90:	e00e      	b.n	8005fb0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d009      	beq.n	8005fb0 <prvDeleteTCB+0x54>
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e7fe      	b.n	8005fae <prvDeleteTCB+0x52>
	}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <prvResetNextTaskUnblockTime+0x38>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fd0:	e008      	b.n	8005fe4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <prvResetNextTaskUnblockTime+0x38>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4a04      	ldr	r2, [pc, #16]	; (8005ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8005fe2:	6013      	str	r3, [r2, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	2000050c 	.word	0x2000050c
 8005ff4:	20000574 	.word	0x20000574

08005ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ffe:	4b0b      	ldr	r3, [pc, #44]	; (800602c <xTaskGetSchedulerState+0x34>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006006:	2301      	movs	r3, #1
 8006008:	607b      	str	r3, [r7, #4]
 800600a:	e008      	b.n	800601e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800600c:	4b08      	ldr	r3, [pc, #32]	; (8006030 <xTaskGetSchedulerState+0x38>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006014:	2302      	movs	r3, #2
 8006016:	607b      	str	r3, [r7, #4]
 8006018:	e001      	b.n	800601e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800601e:	687b      	ldr	r3, [r7, #4]
	}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000560 	.word	0x20000560
 8006030:	2000057c 	.word	0x2000057c

08006034 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d069      	beq.n	800611e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	4b36      	ldr	r3, [pc, #216]	; (8006128 <xTaskPriorityInherit+0xf4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	429a      	cmp	r2, r3
 8006056:	d259      	bcs.n	800610c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	db06      	blt.n	800606e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006060:	4b31      	ldr	r3, [pc, #196]	; (8006128 <xTaskPriorityInherit+0xf4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f1c3 0207 	rsb	r2, r3, #7
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	6959      	ldr	r1, [r3, #20]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4a2b      	ldr	r2, [pc, #172]	; (800612c <xTaskPriorityInherit+0xf8>)
 8006080:	4413      	add	r3, r2
 8006082:	4299      	cmp	r1, r3
 8006084:	d13a      	bne.n	80060fc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	3304      	adds	r3, #4
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fc68 	bl	8004960 <uxListRemove>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d115      	bne.n	80060c2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	4924      	ldr	r1, [pc, #144]	; (800612c <xTaskPriorityInherit+0xf8>)
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <xTaskPriorityInherit+0x8e>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	2201      	movs	r2, #1
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43da      	mvns	r2, r3
 80060b8:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <xTaskPriorityInherit+0xfc>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4013      	ands	r3, r2
 80060be:	4a1c      	ldr	r2, [pc, #112]	; (8006130 <xTaskPriorityInherit+0xfc>)
 80060c0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <xTaskPriorityInherit+0xf4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	2201      	movs	r2, #1
 80060d2:	409a      	lsls	r2, r3
 80060d4:	4b16      	ldr	r3, [pc, #88]	; (8006130 <xTaskPriorityInherit+0xfc>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4313      	orrs	r3, r2
 80060da:	4a15      	ldr	r2, [pc, #84]	; (8006130 <xTaskPriorityInherit+0xfc>)
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4a10      	ldr	r2, [pc, #64]	; (800612c <xTaskPriorityInherit+0xf8>)
 80060ec:	441a      	add	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	3304      	adds	r3, #4
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f7fe fbd6 	bl	80048a6 <vListInsertEnd>
 80060fa:	e004      	b.n	8006106 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <xTaskPriorityInherit+0xf4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006106:	2301      	movs	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e008      	b.n	800611e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006110:	4b05      	ldr	r3, [pc, #20]	; (8006128 <xTaskPriorityInherit+0xf4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	429a      	cmp	r2, r3
 8006118:	d201      	bcs.n	800611e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800611a:	2301      	movs	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800611e:	68fb      	ldr	r3, [r7, #12]
	}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000454 	.word	0x20000454
 800612c:	20000458 	.word	0x20000458
 8006130:	2000055c 	.word	0x2000055c

08006134 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d06c      	beq.n	8006224 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800614a:	4b39      	ldr	r3, [pc, #228]	; (8006230 <xTaskPriorityDisinherit+0xfc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	429a      	cmp	r2, r3
 8006152:	d009      	beq.n	8006168 <xTaskPriorityDisinherit+0x34>
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e7fe      	b.n	8006166 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616c:	2b00      	cmp	r3, #0
 800616e:	d109      	bne.n	8006184 <xTaskPriorityDisinherit+0x50>
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	e7fe      	b.n	8006182 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006188:	1e5a      	subs	r2, r3, #1
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006196:	429a      	cmp	r2, r3
 8006198:	d044      	beq.n	8006224 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d140      	bne.n	8006224 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fbda 	bl	8004960 <uxListRemove>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d115      	bne.n	80061de <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b6:	491f      	ldr	r1, [pc, #124]	; (8006234 <xTaskPriorityDisinherit+0x100>)
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xTaskPriorityDisinherit+0xaa>
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	2201      	movs	r2, #1
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	43da      	mvns	r2, r3
 80061d4:	4b18      	ldr	r3, [pc, #96]	; (8006238 <xTaskPriorityDisinherit+0x104>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4013      	ands	r3, r2
 80061da:	4a17      	ldr	r2, [pc, #92]	; (8006238 <xTaskPriorityDisinherit+0x104>)
 80061dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	f1c3 0207 	rsb	r2, r3, #7
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	2201      	movs	r2, #1
 80061f8:	409a      	lsls	r2, r3
 80061fa:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <xTaskPriorityDisinherit+0x104>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4313      	orrs	r3, r2
 8006200:	4a0d      	ldr	r2, [pc, #52]	; (8006238 <xTaskPriorityDisinherit+0x104>)
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4a08      	ldr	r2, [pc, #32]	; (8006234 <xTaskPriorityDisinherit+0x100>)
 8006212:	441a      	add	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f7fe fb43 	bl	80048a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006220:	2301      	movs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006224:	697b      	ldr	r3, [r7, #20]
	}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000454 	.word	0x20000454
 8006234:	20000458 	.word	0x20000458
 8006238:	2000055c 	.word	0x2000055c

0800623c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800624a:	2301      	movs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8081 	beq.w	8006358 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e7fe      	b.n	8006270 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d902      	bls.n	8006282 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	e002      	b.n	8006288 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006286:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	429a      	cmp	r2, r3
 8006290:	d062      	beq.n	8006358 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	429a      	cmp	r2, r3
 800629a:	d15d      	bne.n	8006358 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800629c:	4b30      	ldr	r3, [pc, #192]	; (8006360 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d109      	bne.n	80062ba <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	e7fe      	b.n	80062b8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	db04      	blt.n	80062d8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f1c3 0207 	rsb	r2, r3, #7
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	6959      	ldr	r1, [r3, #20]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80062e8:	4413      	add	r3, r2
 80062ea:	4299      	cmp	r1, r3
 80062ec:	d134      	bne.n	8006358 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fb34 	bl	8004960 <uxListRemove>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d115      	bne.n	800632a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006302:	4918      	ldr	r1, [pc, #96]	; (8006364 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	2201      	movs	r2, #1
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	43da      	mvns	r2, r3
 8006320:	4b11      	ldr	r3, [pc, #68]	; (8006368 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4013      	ands	r3, r2
 8006326:	4a10      	ldr	r2, [pc, #64]	; (8006368 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006328:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632e:	2201      	movs	r2, #1
 8006330:	409a      	lsls	r2, r3
 8006332:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4313      	orrs	r3, r2
 8006338:	4a0b      	ldr	r2, [pc, #44]	; (8006368 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4a06      	ldr	r2, [pc, #24]	; (8006364 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800634a:	441a      	add	r2, r3
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f7fe faa7 	bl	80048a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006358:	bf00      	nop
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20000454 	.word	0x20000454
 8006364:	20000458 	.word	0x20000458
 8006368:	2000055c 	.word	0x2000055c

0800636c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <pvTaskIncrementMutexHeldCount+0x24>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <pvTaskIncrementMutexHeldCount+0x24>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800637e:	3201      	adds	r2, #1
 8006380:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006382:	4b03      	ldr	r3, [pc, #12]	; (8006390 <pvTaskIncrementMutexHeldCount+0x24>)
 8006384:	681b      	ldr	r3, [r3, #0]
	}
 8006386:	4618      	mov	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	20000454 	.word	0x20000454

08006394 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800639e:	4b29      	ldr	r3, [pc, #164]	; (8006444 <prvAddCurrentTaskToDelayedList+0xb0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063a4:	4b28      	ldr	r3, [pc, #160]	; (8006448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3304      	adds	r3, #4
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fad8 	bl	8004960 <uxListRemove>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80063b6:	4b24      	ldr	r3, [pc, #144]	; (8006448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	2201      	movs	r2, #1
 80063be:	fa02 f303 	lsl.w	r3, r2, r3
 80063c2:	43da      	mvns	r2, r3
 80063c4:	4b21      	ldr	r3, [pc, #132]	; (800644c <prvAddCurrentTaskToDelayedList+0xb8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4013      	ands	r3, r2
 80063ca:	4a20      	ldr	r2, [pc, #128]	; (800644c <prvAddCurrentTaskToDelayedList+0xb8>)
 80063cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d10a      	bne.n	80063ec <prvAddCurrentTaskToDelayedList+0x58>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063dc:	4b1a      	ldr	r3, [pc, #104]	; (8006448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	481a      	ldr	r0, [pc, #104]	; (8006450 <prvAddCurrentTaskToDelayedList+0xbc>)
 80063e6:	f7fe fa5e 	bl	80048a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063ea:	e026      	b.n	800643a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4413      	add	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063f4:	4b14      	ldr	r3, [pc, #80]	; (8006448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	429a      	cmp	r2, r3
 8006402:	d209      	bcs.n	8006418 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <prvAddCurrentTaskToDelayedList+0xb4>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3304      	adds	r3, #4
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f7fe fa6c 	bl	80048ee <vListInsert>
}
 8006416:	e010      	b.n	800643a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <prvAddCurrentTaskToDelayedList+0xc4>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <prvAddCurrentTaskToDelayedList+0xb4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3304      	adds	r3, #4
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f7fe fa62 	bl	80048ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800642a:	4b0c      	ldr	r3, [pc, #48]	; (800645c <prvAddCurrentTaskToDelayedList+0xc8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	429a      	cmp	r2, r3
 8006432:	d202      	bcs.n	800643a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006434:	4a09      	ldr	r2, [pc, #36]	; (800645c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6013      	str	r3, [r2, #0]
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000558 	.word	0x20000558
 8006448:	20000454 	.word	0x20000454
 800644c:	2000055c 	.word	0x2000055c
 8006450:	20000540 	.word	0x20000540
 8006454:	20000510 	.word	0x20000510
 8006458:	2000050c 	.word	0x2000050c
 800645c:	20000574 	.word	0x20000574

08006460 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3b04      	subs	r3, #4
 8006470:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006478:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3b04      	subs	r3, #4
 800647e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f023 0201 	bic.w	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3b04      	subs	r3, #4
 800648e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006490:	4a0c      	ldr	r2, [pc, #48]	; (80064c4 <pxPortInitialiseStack+0x64>)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3b14      	subs	r3, #20
 800649a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3b04      	subs	r3, #4
 80064a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f06f 0202 	mvn.w	r2, #2
 80064ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3b20      	subs	r3, #32
 80064b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064b6:	68fb      	ldr	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	080064c9 	.word	0x080064c9

080064c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064d2:	4b11      	ldr	r3, [pc, #68]	; (8006518 <prvTaskExitError+0x50>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d009      	beq.n	80064f0 <prvTaskExitError+0x28>
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e7fe      	b.n	80064ee <prvTaskExitError+0x26>
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006502:	bf00      	nop
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0fc      	beq.n	8006504 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	2000000c 	.word	0x2000000c
 800651c:	00000000 	.word	0x00000000

08006520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <pxCurrentTCBConst2>)
 8006522:	6819      	ldr	r1, [r3, #0]
 8006524:	6808      	ldr	r0, [r1, #0]
 8006526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	f380 8809 	msr	PSP, r0
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f380 8811 	msr	BASEPRI, r0
 800653a:	4770      	bx	lr
 800653c:	f3af 8000 	nop.w

08006540 <pxCurrentTCBConst2>:
 8006540:	20000454 	.word	0x20000454
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop

08006548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006548:	4808      	ldr	r0, [pc, #32]	; (800656c <prvPortStartFirstTask+0x24>)
 800654a:	6800      	ldr	r0, [r0, #0]
 800654c:	6800      	ldr	r0, [r0, #0]
 800654e:	f380 8808 	msr	MSP, r0
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f380 8814 	msr	CONTROL, r0
 800655a:	b662      	cpsie	i
 800655c:	b661      	cpsie	f
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	df00      	svc	0
 8006568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800656a:	bf00      	nop
 800656c:	e000ed08 	.word	0xe000ed08

08006570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006576:	4b44      	ldr	r3, [pc, #272]	; (8006688 <xPortStartScheduler+0x118>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a44      	ldr	r2, [pc, #272]	; (800668c <xPortStartScheduler+0x11c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d109      	bne.n	8006594 <xPortStartScheduler+0x24>
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e7fe      	b.n	8006592 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006594:	4b3c      	ldr	r3, [pc, #240]	; (8006688 <xPortStartScheduler+0x118>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a3d      	ldr	r2, [pc, #244]	; (8006690 <xPortStartScheduler+0x120>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d109      	bne.n	80065b2 <xPortStartScheduler+0x42>
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e7fe      	b.n	80065b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065b2:	4b38      	ldr	r3, [pc, #224]	; (8006694 <xPortStartScheduler+0x124>)
 80065b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	22ff      	movs	r2, #255	; 0xff
 80065c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	4b30      	ldr	r3, [pc, #192]	; (8006698 <xPortStartScheduler+0x128>)
 80065d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065da:	4b30      	ldr	r3, [pc, #192]	; (800669c <xPortStartScheduler+0x12c>)
 80065dc:	2207      	movs	r2, #7
 80065de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065e0:	e009      	b.n	80065f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80065e2:	4b2e      	ldr	r3, [pc, #184]	; (800669c <xPortStartScheduler+0x12c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	4a2c      	ldr	r2, [pc, #176]	; (800669c <xPortStartScheduler+0x12c>)
 80065ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fe:	2b80      	cmp	r3, #128	; 0x80
 8006600:	d0ef      	beq.n	80065e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006602:	4b26      	ldr	r3, [pc, #152]	; (800669c <xPortStartScheduler+0x12c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f1c3 0307 	rsb	r3, r3, #7
 800660a:	2b04      	cmp	r3, #4
 800660c:	d009      	beq.n	8006622 <xPortStartScheduler+0xb2>
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	e7fe      	b.n	8006620 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006622:	4b1e      	ldr	r3, [pc, #120]	; (800669c <xPortStartScheduler+0x12c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	4a1c      	ldr	r2, [pc, #112]	; (800669c <xPortStartScheduler+0x12c>)
 800662a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800662c:	4b1b      	ldr	r3, [pc, #108]	; (800669c <xPortStartScheduler+0x12c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006634:	4a19      	ldr	r2, [pc, #100]	; (800669c <xPortStartScheduler+0x12c>)
 8006636:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006640:	4b17      	ldr	r3, [pc, #92]	; (80066a0 <xPortStartScheduler+0x130>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a16      	ldr	r2, [pc, #88]	; (80066a0 <xPortStartScheduler+0x130>)
 8006646:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800664a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800664c:	4b14      	ldr	r3, [pc, #80]	; (80066a0 <xPortStartScheduler+0x130>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a13      	ldr	r2, [pc, #76]	; (80066a0 <xPortStartScheduler+0x130>)
 8006652:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006656:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006658:	f000 f8d6 	bl	8006808 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800665c:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <xPortStartScheduler+0x134>)
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006662:	f000 f8f5 	bl	8006850 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <xPortStartScheduler+0x138>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a0f      	ldr	r2, [pc, #60]	; (80066a8 <xPortStartScheduler+0x138>)
 800666c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006670:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006672:	f7ff ff69 	bl	8006548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006676:	f7ff fa8b 	bl	8005b90 <vTaskSwitchContext>
	prvTaskExitError();
 800667a:	f7ff ff25 	bl	80064c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	e000ed00 	.word	0xe000ed00
 800668c:	410fc271 	.word	0x410fc271
 8006690:	410fc270 	.word	0x410fc270
 8006694:	e000e400 	.word	0xe000e400
 8006698:	20000580 	.word	0x20000580
 800669c:	20000584 	.word	0x20000584
 80066a0:	e000ed20 	.word	0xe000ed20
 80066a4:	2000000c 	.word	0x2000000c
 80066a8:	e000ef34 	.word	0xe000ef34

080066ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066c4:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <vPortEnterCritical+0x54>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3301      	adds	r3, #1
 80066ca:	4a0d      	ldr	r2, [pc, #52]	; (8006700 <vPortEnterCritical+0x54>)
 80066cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <vPortEnterCritical+0x54>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d10e      	bne.n	80066f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066d6:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <vPortEnterCritical+0x58>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <vPortEnterCritical+0x48>
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	e7fe      	b.n	80066f2 <vPortEnterCritical+0x46>
	}
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	2000000c 	.word	0x2000000c
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800670e:	4b11      	ldr	r3, [pc, #68]	; (8006754 <vPortExitCritical+0x4c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <vPortExitCritical+0x22>
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	e7fe      	b.n	8006728 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <vPortExitCritical+0x4c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3b01      	subs	r3, #1
 8006730:	4a08      	ldr	r2, [pc, #32]	; (8006754 <vPortExitCritical+0x4c>)
 8006732:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006734:	4b07      	ldr	r3, [pc, #28]	; (8006754 <vPortExitCritical+0x4c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <vPortExitCritical+0x3e>
 800673c:	2300      	movs	r3, #0
 800673e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	2000000c 	.word	0x2000000c
	...

08006760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006760:	f3ef 8009 	mrs	r0, PSP
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <pxCurrentTCBConst>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	f01e 0f10 	tst.w	lr, #16
 8006770:	bf08      	it	eq
 8006772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677a:	6010      	str	r0, [r2, #0]
 800677c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006784:	f380 8811 	msr	BASEPRI, r0
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f7ff f9fe 	bl	8005b90 <vTaskSwitchContext>
 8006794:	f04f 0000 	mov.w	r0, #0
 8006798:	f380 8811 	msr	BASEPRI, r0
 800679c:	bc09      	pop	{r0, r3}
 800679e:	6819      	ldr	r1, [r3, #0]
 80067a0:	6808      	ldr	r0, [r1, #0]
 80067a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a6:	f01e 0f10 	tst.w	lr, #16
 80067aa:	bf08      	it	eq
 80067ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067b0:	f380 8809 	msr	PSP, r0
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	f3af 8000 	nop.w

080067c0 <pxCurrentTCBConst>:
 80067c0:	20000454 	.word	0x20000454
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop

080067c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067e0:	f7ff f91e 	bl	8005a20 <xTaskIncrementTick>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067ea:	4b06      	ldr	r3, [pc, #24]	; (8006804 <SysTick_Handler+0x3c>)
 80067ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	2300      	movs	r3, #0
 80067f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <vPortSetupTimerInterrupt+0x34>)
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <vPortSetupTimerInterrupt+0x38>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <vPortSetupTimerInterrupt+0x3c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a0a      	ldr	r2, [pc, #40]	; (8006848 <vPortSetupTimerInterrupt+0x40>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	099b      	lsrs	r3, r3, #6
 8006824:	4a09      	ldr	r2, [pc, #36]	; (800684c <vPortSetupTimerInterrupt+0x44>)
 8006826:	3b01      	subs	r3, #1
 8006828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800682a:	4b04      	ldr	r3, [pc, #16]	; (800683c <vPortSetupTimerInterrupt+0x34>)
 800682c:	2207      	movs	r2, #7
 800682e:	601a      	str	r2, [r3, #0]
}
 8006830:	bf00      	nop
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	e000e010 	.word	0xe000e010
 8006840:	e000e018 	.word	0xe000e018
 8006844:	20000000 	.word	0x20000000
 8006848:	10624dd3 	.word	0x10624dd3
 800684c:	e000e014 	.word	0xe000e014

08006850 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006850:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006860 <vPortEnableVFP+0x10>
 8006854:	6801      	ldr	r1, [r0, #0]
 8006856:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800685a:	6001      	str	r1, [r0, #0]
 800685c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800685e:	bf00      	nop
 8006860:	e000ed88 	.word	0xe000ed88

08006864 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800686a:	f3ef 8305 	mrs	r3, IPSR
 800686e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b0f      	cmp	r3, #15
 8006874:	d913      	bls.n	800689e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006876:	4a16      	ldr	r2, [pc, #88]	; (80068d0 <vPortValidateInterruptPriority+0x6c>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006880:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <vPortValidateInterruptPriority+0x70>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	7afa      	ldrb	r2, [r7, #11]
 8006886:	429a      	cmp	r2, r3
 8006888:	d209      	bcs.n	800689e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	607b      	str	r3, [r7, #4]
 800689c:	e7fe      	b.n	800689c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800689e:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <vPortValidateInterruptPriority+0x74>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068a6:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <vPortValidateInterruptPriority+0x78>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d909      	bls.n	80068c2 <vPortValidateInterruptPriority+0x5e>
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	e7fe      	b.n	80068c0 <vPortValidateInterruptPriority+0x5c>
	}
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	e000e3f0 	.word	0xe000e3f0
 80068d4:	20000580 	.word	0x20000580
 80068d8:	e000ed0c 	.word	0xe000ed0c
 80068dc:	20000584 	.word	0x20000584

080068e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	; 0x28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068e8:	2300      	movs	r3, #0
 80068ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068ec:	f7fe ffee 	bl	80058cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068f0:	4b57      	ldr	r3, [pc, #348]	; (8006a50 <pvPortMalloc+0x170>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068f8:	f000 f90c 	bl	8006b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068fc:	4b55      	ldr	r3, [pc, #340]	; (8006a54 <pvPortMalloc+0x174>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4013      	ands	r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	f040 808c 	bne.w	8006a22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01c      	beq.n	800694a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006910:	2208      	movs	r2, #8
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4413      	add	r3, r2
 8006916:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	2b00      	cmp	r3, #0
 8006920:	d013      	beq.n	800694a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f023 0307 	bic.w	r3, r3, #7
 8006928:	3308      	adds	r3, #8
 800692a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <pvPortMalloc+0x6a>
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e7fe      	b.n	8006948 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d068      	beq.n	8006a22 <pvPortMalloc+0x142>
 8006950:	4b41      	ldr	r3, [pc, #260]	; (8006a58 <pvPortMalloc+0x178>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	429a      	cmp	r2, r3
 8006958:	d863      	bhi.n	8006a22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800695a:	4b40      	ldr	r3, [pc, #256]	; (8006a5c <pvPortMalloc+0x17c>)
 800695c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800695e:	4b3f      	ldr	r3, [pc, #252]	; (8006a5c <pvPortMalloc+0x17c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006964:	e004      	b.n	8006970 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	429a      	cmp	r2, r3
 8006978:	d903      	bls.n	8006982 <pvPortMalloc+0xa2>
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1f1      	bne.n	8006966 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006982:	4b33      	ldr	r3, [pc, #204]	; (8006a50 <pvPortMalloc+0x170>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006988:	429a      	cmp	r2, r3
 800698a:	d04a      	beq.n	8006a22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2208      	movs	r2, #8
 8006992:	4413      	add	r3, r2
 8006994:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	1ad2      	subs	r2, r2, r3
 80069a6:	2308      	movs	r3, #8
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d91e      	bls.n	80069ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4413      	add	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d009      	beq.n	80069d4 <pvPortMalloc+0xf4>
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	613b      	str	r3, [r7, #16]
 80069d2:	e7fe      	b.n	80069d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	1ad2      	subs	r2, r2, r3
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069e6:	69b8      	ldr	r0, [r7, #24]
 80069e8:	f000 f8f6 	bl	8006bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069ec:	4b1a      	ldr	r3, [pc, #104]	; (8006a58 <pvPortMalloc+0x178>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	4a18      	ldr	r2, [pc, #96]	; (8006a58 <pvPortMalloc+0x178>)
 80069f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069fa:	4b17      	ldr	r3, [pc, #92]	; (8006a58 <pvPortMalloc+0x178>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b18      	ldr	r3, [pc, #96]	; (8006a60 <pvPortMalloc+0x180>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d203      	bcs.n	8006a0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a06:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <pvPortMalloc+0x178>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a15      	ldr	r2, [pc, #84]	; (8006a60 <pvPortMalloc+0x180>)
 8006a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <pvPortMalloc+0x174>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a22:	f7fe ff61 	bl	80058e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d009      	beq.n	8006a44 <pvPortMalloc+0x164>
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	e7fe      	b.n	8006a42 <pvPortMalloc+0x162>
	return pvReturn;
 8006a44:	69fb      	ldr	r3, [r7, #28]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3728      	adds	r7, #40	; 0x28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20004190 	.word	0x20004190
 8006a54:	2000419c 	.word	0x2000419c
 8006a58:	20004194 	.word	0x20004194
 8006a5c:	20004188 	.word	0x20004188
 8006a60:	20004198 	.word	0x20004198

08006a64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d046      	beq.n	8006b04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a76:	2308      	movs	r3, #8
 8006a78:	425b      	negs	r3, r3
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	4b20      	ldr	r3, [pc, #128]	; (8006b0c <vPortFree+0xa8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d109      	bne.n	8006aa6 <vPortFree+0x42>
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	e7fe      	b.n	8006aa4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <vPortFree+0x5e>
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	60bb      	str	r3, [r7, #8]
 8006ac0:	e7fe      	b.n	8006ac0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <vPortFree+0xa8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d019      	beq.n	8006b04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d115      	bne.n	8006b04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <vPortFree+0xa8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ae8:	f7fe fef0 	bl	80058cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <vPortFree+0xac>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4413      	add	r3, r2
 8006af6:	4a06      	ldr	r2, [pc, #24]	; (8006b10 <vPortFree+0xac>)
 8006af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006afa:	6938      	ldr	r0, [r7, #16]
 8006afc:	f000 f86c 	bl	8006bd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b00:	f7fe fef2 	bl	80058e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b04:	bf00      	nop
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	2000419c 	.word	0x2000419c
 8006b10:	20004194 	.word	0x20004194

08006b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b20:	4b27      	ldr	r3, [pc, #156]	; (8006bc0 <prvHeapInit+0xac>)
 8006b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00c      	beq.n	8006b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3307      	adds	r3, #7
 8006b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0307 	bic.w	r3, r3, #7
 8006b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <prvHeapInit+0xac>)
 8006b44:	4413      	add	r3, r2
 8006b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <prvHeapInit+0xb0>)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b52:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <prvHeapInit+0xb0>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b60:	2208      	movs	r2, #8
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0307 	bic.w	r3, r3, #7
 8006b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4a15      	ldr	r2, [pc, #84]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b7e:	4b12      	ldr	r3, [pc, #72]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	1ad2      	subs	r2, r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <prvHeapInit+0xb4>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	4a0a      	ldr	r2, [pc, #40]	; (8006bcc <prvHeapInit+0xb8>)
 8006ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4a09      	ldr	r2, [pc, #36]	; (8006bd0 <prvHeapInit+0xbc>)
 8006baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bac:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <prvHeapInit+0xc0>)
 8006bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bb2:	601a      	str	r2, [r3, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	20000588 	.word	0x20000588
 8006bc4:	20004188 	.word	0x20004188
 8006bc8:	20004190 	.word	0x20004190
 8006bcc:	20004198 	.word	0x20004198
 8006bd0:	20004194 	.word	0x20004194
 8006bd4:	2000419c 	.word	0x2000419c

08006bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006be0:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <prvInsertBlockIntoFreeList+0xac>)
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e002      	b.n	8006bec <prvInsertBlockIntoFreeList+0x14>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d8f7      	bhi.n	8006be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	4413      	add	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d108      	bne.n	8006c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	441a      	add	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	441a      	add	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d118      	bne.n	8006c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	4b15      	ldr	r3, [pc, #84]	; (8006c88 <prvInsertBlockIntoFreeList+0xb0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d00d      	beq.n	8006c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	441a      	add	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e008      	b.n	8006c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c56:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <prvInsertBlockIntoFreeList+0xb0>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e003      	b.n	8006c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d002      	beq.n	8006c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20004188 	.word	0x20004188
 8006c88:	20004190 	.word	0x20004190

08006c8c <__errno>:
 8006c8c:	4b01      	ldr	r3, [pc, #4]	; (8006c94 <__errno+0x8>)
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000010 	.word	0x20000010

08006c98 <__libc_init_array>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4e0d      	ldr	r6, [pc, #52]	; (8006cd0 <__libc_init_array+0x38>)
 8006c9c:	4c0d      	ldr	r4, [pc, #52]	; (8006cd4 <__libc_init_array+0x3c>)
 8006c9e:	1ba4      	subs	r4, r4, r6
 8006ca0:	10a4      	asrs	r4, r4, #2
 8006ca2:	2500      	movs	r5, #0
 8006ca4:	42a5      	cmp	r5, r4
 8006ca6:	d109      	bne.n	8006cbc <__libc_init_array+0x24>
 8006ca8:	4e0b      	ldr	r6, [pc, #44]	; (8006cd8 <__libc_init_array+0x40>)
 8006caa:	4c0c      	ldr	r4, [pc, #48]	; (8006cdc <__libc_init_array+0x44>)
 8006cac:	f002 fb48 	bl	8009340 <_init>
 8006cb0:	1ba4      	subs	r4, r4, r6
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	2500      	movs	r5, #0
 8006cb6:	42a5      	cmp	r5, r4
 8006cb8:	d105      	bne.n	8006cc6 <__libc_init_array+0x2e>
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
 8006cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cc0:	4798      	blx	r3
 8006cc2:	3501      	adds	r5, #1
 8006cc4:	e7ee      	b.n	8006ca4 <__libc_init_array+0xc>
 8006cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cca:	4798      	blx	r3
 8006ccc:	3501      	adds	r5, #1
 8006cce:	e7f2      	b.n	8006cb6 <__libc_init_array+0x1e>
 8006cd0:	080096b8 	.word	0x080096b8
 8006cd4:	080096b8 	.word	0x080096b8
 8006cd8:	080096b8 	.word	0x080096b8
 8006cdc:	080096bc 	.word	0x080096bc

08006ce0 <memcpy>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	1e43      	subs	r3, r0, #1
 8006ce4:	440a      	add	r2, r1
 8006ce6:	4291      	cmp	r1, r2
 8006ce8:	d100      	bne.n	8006cec <memcpy+0xc>
 8006cea:	bd10      	pop	{r4, pc}
 8006cec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf4:	e7f7      	b.n	8006ce6 <memcpy+0x6>

08006cf6 <memset>:
 8006cf6:	4402      	add	r2, r0
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d100      	bne.n	8006d00 <memset+0xa>
 8006cfe:	4770      	bx	lr
 8006d00:	f803 1b01 	strb.w	r1, [r3], #1
 8006d04:	e7f9      	b.n	8006cfa <memset+0x4>

08006d06 <__cvt>:
 8006d06:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0a:	ec55 4b10 	vmov	r4, r5, d0
 8006d0e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006d10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d14:	2d00      	cmp	r5, #0
 8006d16:	460e      	mov	r6, r1
 8006d18:	4691      	mov	r9, r2
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	bfb8      	it	lt
 8006d1e:	4622      	movlt	r2, r4
 8006d20:	462b      	mov	r3, r5
 8006d22:	f027 0720 	bic.w	r7, r7, #32
 8006d26:	bfbb      	ittet	lt
 8006d28:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d2c:	461d      	movlt	r5, r3
 8006d2e:	2300      	movge	r3, #0
 8006d30:	232d      	movlt	r3, #45	; 0x2d
 8006d32:	bfb8      	it	lt
 8006d34:	4614      	movlt	r4, r2
 8006d36:	2f46      	cmp	r7, #70	; 0x46
 8006d38:	700b      	strb	r3, [r1, #0]
 8006d3a:	d004      	beq.n	8006d46 <__cvt+0x40>
 8006d3c:	2f45      	cmp	r7, #69	; 0x45
 8006d3e:	d100      	bne.n	8006d42 <__cvt+0x3c>
 8006d40:	3601      	adds	r6, #1
 8006d42:	2102      	movs	r1, #2
 8006d44:	e000      	b.n	8006d48 <__cvt+0x42>
 8006d46:	2103      	movs	r1, #3
 8006d48:	ab03      	add	r3, sp, #12
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	ab02      	add	r3, sp, #8
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	4632      	mov	r2, r6
 8006d52:	4653      	mov	r3, sl
 8006d54:	ec45 4b10 	vmov	d0, r4, r5
 8006d58:	f000 fcd6 	bl	8007708 <_dtoa_r>
 8006d5c:	2f47      	cmp	r7, #71	; 0x47
 8006d5e:	4680      	mov	r8, r0
 8006d60:	d102      	bne.n	8006d68 <__cvt+0x62>
 8006d62:	f019 0f01 	tst.w	r9, #1
 8006d66:	d026      	beq.n	8006db6 <__cvt+0xb0>
 8006d68:	2f46      	cmp	r7, #70	; 0x46
 8006d6a:	eb08 0906 	add.w	r9, r8, r6
 8006d6e:	d111      	bne.n	8006d94 <__cvt+0x8e>
 8006d70:	f898 3000 	ldrb.w	r3, [r8]
 8006d74:	2b30      	cmp	r3, #48	; 0x30
 8006d76:	d10a      	bne.n	8006d8e <__cvt+0x88>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 feb2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d84:	b918      	cbnz	r0, 8006d8e <__cvt+0x88>
 8006d86:	f1c6 0601 	rsb	r6, r6, #1
 8006d8a:	f8ca 6000 	str.w	r6, [sl]
 8006d8e:	f8da 3000 	ldr.w	r3, [sl]
 8006d92:	4499      	add	r9, r3
 8006d94:	2200      	movs	r2, #0
 8006d96:	2300      	movs	r3, #0
 8006d98:	4620      	mov	r0, r4
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	f7f9 fea4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006da0:	b938      	cbnz	r0, 8006db2 <__cvt+0xac>
 8006da2:	2230      	movs	r2, #48	; 0x30
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	454b      	cmp	r3, r9
 8006da8:	d205      	bcs.n	8006db6 <__cvt+0xb0>
 8006daa:	1c59      	adds	r1, r3, #1
 8006dac:	9103      	str	r1, [sp, #12]
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	e7f8      	b.n	8006da4 <__cvt+0x9e>
 8006db2:	f8cd 900c 	str.w	r9, [sp, #12]
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dba:	eba3 0308 	sub.w	r3, r3, r8
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	b004      	add	sp, #16
 8006dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006dc8 <__exponent>:
 8006dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	4604      	mov	r4, r0
 8006dce:	bfba      	itte	lt
 8006dd0:	4249      	neglt	r1, r1
 8006dd2:	232d      	movlt	r3, #45	; 0x2d
 8006dd4:	232b      	movge	r3, #43	; 0x2b
 8006dd6:	2909      	cmp	r1, #9
 8006dd8:	f804 2b02 	strb.w	r2, [r4], #2
 8006ddc:	7043      	strb	r3, [r0, #1]
 8006dde:	dd20      	ble.n	8006e22 <__exponent+0x5a>
 8006de0:	f10d 0307 	add.w	r3, sp, #7
 8006de4:	461f      	mov	r7, r3
 8006de6:	260a      	movs	r6, #10
 8006de8:	fb91 f5f6 	sdiv	r5, r1, r6
 8006dec:	fb06 1115 	mls	r1, r6, r5, r1
 8006df0:	3130      	adds	r1, #48	; 0x30
 8006df2:	2d09      	cmp	r5, #9
 8006df4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006df8:	f103 32ff 	add.w	r2, r3, #4294967295
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	dc09      	bgt.n	8006e14 <__exponent+0x4c>
 8006e00:	3130      	adds	r1, #48	; 0x30
 8006e02:	3b02      	subs	r3, #2
 8006e04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e08:	42bb      	cmp	r3, r7
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	d304      	bcc.n	8006e18 <__exponent+0x50>
 8006e0e:	1a10      	subs	r0, r2, r0
 8006e10:	b003      	add	sp, #12
 8006e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e14:	4613      	mov	r3, r2
 8006e16:	e7e7      	b.n	8006de8 <__exponent+0x20>
 8006e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e1c:	f804 2b01 	strb.w	r2, [r4], #1
 8006e20:	e7f2      	b.n	8006e08 <__exponent+0x40>
 8006e22:	2330      	movs	r3, #48	; 0x30
 8006e24:	4419      	add	r1, r3
 8006e26:	7083      	strb	r3, [r0, #2]
 8006e28:	1d02      	adds	r2, r0, #4
 8006e2a:	70c1      	strb	r1, [r0, #3]
 8006e2c:	e7ef      	b.n	8006e0e <__exponent+0x46>
	...

08006e30 <_printf_float>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	b08d      	sub	sp, #52	; 0x34
 8006e36:	460c      	mov	r4, r1
 8006e38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	461f      	mov	r7, r3
 8006e40:	4605      	mov	r5, r0
 8006e42:	f001 fae3 	bl	800840c <_localeconv_r>
 8006e46:	6803      	ldr	r3, [r0, #0]
 8006e48:	9304      	str	r3, [sp, #16]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7f9 f9d0 	bl	80001f0 <strlen>
 8006e50:	2300      	movs	r3, #0
 8006e52:	930a      	str	r3, [sp, #40]	; 0x28
 8006e54:	f8d8 3000 	ldr.w	r3, [r8]
 8006e58:	9005      	str	r0, [sp, #20]
 8006e5a:	3307      	adds	r3, #7
 8006e5c:	f023 0307 	bic.w	r3, r3, #7
 8006e60:	f103 0208 	add.w	r2, r3, #8
 8006e64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006e68:	f8d4 b000 	ldr.w	fp, [r4]
 8006e6c:	f8c8 2000 	str.w	r2, [r8]
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e78:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e80:	9307      	str	r3, [sp, #28]
 8006e82:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e86:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8a:	4ba7      	ldr	r3, [pc, #668]	; (8007128 <_printf_float+0x2f8>)
 8006e8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e90:	f7f9 fe5c 	bl	8000b4c <__aeabi_dcmpun>
 8006e94:	bb70      	cbnz	r0, 8006ef4 <_printf_float+0xc4>
 8006e96:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9a:	4ba3      	ldr	r3, [pc, #652]	; (8007128 <_printf_float+0x2f8>)
 8006e9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ea0:	f7f9 fe36 	bl	8000b10 <__aeabi_dcmple>
 8006ea4:	bb30      	cbnz	r0, 8006ef4 <_printf_float+0xc4>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4640      	mov	r0, r8
 8006eac:	4649      	mov	r1, r9
 8006eae:	f7f9 fe25 	bl	8000afc <__aeabi_dcmplt>
 8006eb2:	b110      	cbz	r0, 8006eba <_printf_float+0x8a>
 8006eb4:	232d      	movs	r3, #45	; 0x2d
 8006eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eba:	4a9c      	ldr	r2, [pc, #624]	; (800712c <_printf_float+0x2fc>)
 8006ebc:	4b9c      	ldr	r3, [pc, #624]	; (8007130 <_printf_float+0x300>)
 8006ebe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006ec2:	bf8c      	ite	hi
 8006ec4:	4690      	movhi	r8, r2
 8006ec6:	4698      	movls	r8, r3
 8006ec8:	2303      	movs	r3, #3
 8006eca:	f02b 0204 	bic.w	r2, fp, #4
 8006ece:	6123      	str	r3, [r4, #16]
 8006ed0:	6022      	str	r2, [r4, #0]
 8006ed2:	f04f 0900 	mov.w	r9, #0
 8006ed6:	9700      	str	r7, [sp, #0]
 8006ed8:	4633      	mov	r3, r6
 8006eda:	aa0b      	add	r2, sp, #44	; 0x2c
 8006edc:	4621      	mov	r1, r4
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 f9e6 	bl	80072b0 <_printf_common>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f040 808d 	bne.w	8007004 <_printf_float+0x1d4>
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295
 8006eee:	b00d      	add	sp, #52	; 0x34
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	4642      	mov	r2, r8
 8006ef6:	464b      	mov	r3, r9
 8006ef8:	4640      	mov	r0, r8
 8006efa:	4649      	mov	r1, r9
 8006efc:	f7f9 fe26 	bl	8000b4c <__aeabi_dcmpun>
 8006f00:	b110      	cbz	r0, 8006f08 <_printf_float+0xd8>
 8006f02:	4a8c      	ldr	r2, [pc, #560]	; (8007134 <_printf_float+0x304>)
 8006f04:	4b8c      	ldr	r3, [pc, #560]	; (8007138 <_printf_float+0x308>)
 8006f06:	e7da      	b.n	8006ebe <_printf_float+0x8e>
 8006f08:	6861      	ldr	r1, [r4, #4]
 8006f0a:	1c4b      	adds	r3, r1, #1
 8006f0c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006f10:	a80a      	add	r0, sp, #40	; 0x28
 8006f12:	d13e      	bne.n	8006f92 <_printf_float+0x162>
 8006f14:	2306      	movs	r3, #6
 8006f16:	6063      	str	r3, [r4, #4]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006f1e:	ab09      	add	r3, sp, #36	; 0x24
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	ec49 8b10 	vmov	d0, r8, r9
 8006f26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f2a:	6022      	str	r2, [r4, #0]
 8006f2c:	f8cd a004 	str.w	sl, [sp, #4]
 8006f30:	6861      	ldr	r1, [r4, #4]
 8006f32:	4628      	mov	r0, r5
 8006f34:	f7ff fee7 	bl	8006d06 <__cvt>
 8006f38:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006f3c:	2b47      	cmp	r3, #71	; 0x47
 8006f3e:	4680      	mov	r8, r0
 8006f40:	d109      	bne.n	8006f56 <_printf_float+0x126>
 8006f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f44:	1cd8      	adds	r0, r3, #3
 8006f46:	db02      	blt.n	8006f4e <_printf_float+0x11e>
 8006f48:	6862      	ldr	r2, [r4, #4]
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	dd47      	ble.n	8006fde <_printf_float+0x1ae>
 8006f4e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f52:	fa5f fa8a 	uxtb.w	sl, sl
 8006f56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006f5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f5c:	d824      	bhi.n	8006fa8 <_printf_float+0x178>
 8006f5e:	3901      	subs	r1, #1
 8006f60:	4652      	mov	r2, sl
 8006f62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f66:	9109      	str	r1, [sp, #36]	; 0x24
 8006f68:	f7ff ff2e 	bl	8006dc8 <__exponent>
 8006f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f6e:	1813      	adds	r3, r2, r0
 8006f70:	2a01      	cmp	r2, #1
 8006f72:	4681      	mov	r9, r0
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	dc02      	bgt.n	8006f7e <_printf_float+0x14e>
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	07d1      	lsls	r1, r2, #31
 8006f7c:	d501      	bpl.n	8006f82 <_printf_float+0x152>
 8006f7e:	3301      	adds	r3, #1
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0a5      	beq.n	8006ed6 <_printf_float+0xa6>
 8006f8a:	232d      	movs	r3, #45	; 0x2d
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f90:	e7a1      	b.n	8006ed6 <_printf_float+0xa6>
 8006f92:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006f96:	f000 8177 	beq.w	8007288 <_printf_float+0x458>
 8006f9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006f9e:	d1bb      	bne.n	8006f18 <_printf_float+0xe8>
 8006fa0:	2900      	cmp	r1, #0
 8006fa2:	d1b9      	bne.n	8006f18 <_printf_float+0xe8>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e7b6      	b.n	8006f16 <_printf_float+0xe6>
 8006fa8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006fac:	d119      	bne.n	8006fe2 <_printf_float+0x1b2>
 8006fae:	2900      	cmp	r1, #0
 8006fb0:	6863      	ldr	r3, [r4, #4]
 8006fb2:	dd0c      	ble.n	8006fce <_printf_float+0x19e>
 8006fb4:	6121      	str	r1, [r4, #16]
 8006fb6:	b913      	cbnz	r3, 8006fbe <_printf_float+0x18e>
 8006fb8:	6822      	ldr	r2, [r4, #0]
 8006fba:	07d2      	lsls	r2, r2, #31
 8006fbc:	d502      	bpl.n	8006fc4 <_printf_float+0x194>
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	440b      	add	r3, r1
 8006fc2:	6123      	str	r3, [r4, #16]
 8006fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8006fc8:	f04f 0900 	mov.w	r9, #0
 8006fcc:	e7d9      	b.n	8006f82 <_printf_float+0x152>
 8006fce:	b913      	cbnz	r3, 8006fd6 <_printf_float+0x1a6>
 8006fd0:	6822      	ldr	r2, [r4, #0]
 8006fd2:	07d0      	lsls	r0, r2, #31
 8006fd4:	d501      	bpl.n	8006fda <_printf_float+0x1aa>
 8006fd6:	3302      	adds	r3, #2
 8006fd8:	e7f3      	b.n	8006fc2 <_printf_float+0x192>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e7f1      	b.n	8006fc2 <_printf_float+0x192>
 8006fde:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006fe2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	db05      	blt.n	8006ff6 <_printf_float+0x1c6>
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	6123      	str	r3, [r4, #16]
 8006fee:	07d1      	lsls	r1, r2, #31
 8006ff0:	d5e8      	bpl.n	8006fc4 <_printf_float+0x194>
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	e7e5      	b.n	8006fc2 <_printf_float+0x192>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bfd4      	ite	le
 8006ffa:	f1c3 0302 	rsble	r3, r3, #2
 8006ffe:	2301      	movgt	r3, #1
 8007000:	4413      	add	r3, r2
 8007002:	e7de      	b.n	8006fc2 <_printf_float+0x192>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	055a      	lsls	r2, r3, #21
 8007008:	d407      	bmi.n	800701a <_printf_float+0x1ea>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	4642      	mov	r2, r8
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	d12b      	bne.n	8007070 <_printf_float+0x240>
 8007018:	e767      	b.n	8006eea <_printf_float+0xba>
 800701a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800701e:	f240 80dc 	bls.w	80071da <_printf_float+0x3aa>
 8007022:	2200      	movs	r2, #0
 8007024:	2300      	movs	r3, #0
 8007026:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800702a:	f7f9 fd5d 	bl	8000ae8 <__aeabi_dcmpeq>
 800702e:	2800      	cmp	r0, #0
 8007030:	d033      	beq.n	800709a <_printf_float+0x26a>
 8007032:	2301      	movs	r3, #1
 8007034:	4a41      	ldr	r2, [pc, #260]	; (800713c <_printf_float+0x30c>)
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	47b8      	blx	r7
 800703c:	3001      	adds	r0, #1
 800703e:	f43f af54 	beq.w	8006eea <_printf_float+0xba>
 8007042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007046:	429a      	cmp	r2, r3
 8007048:	db02      	blt.n	8007050 <_printf_float+0x220>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	07d8      	lsls	r0, r3, #31
 800704e:	d50f      	bpl.n	8007070 <_printf_float+0x240>
 8007050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007054:	4631      	mov	r1, r6
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	f43f af45 	beq.w	8006eea <_printf_float+0xba>
 8007060:	f04f 0800 	mov.w	r8, #0
 8007064:	f104 091a 	add.w	r9, r4, #26
 8007068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800706a:	3b01      	subs	r3, #1
 800706c:	4543      	cmp	r3, r8
 800706e:	dc09      	bgt.n	8007084 <_printf_float+0x254>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	079b      	lsls	r3, r3, #30
 8007074:	f100 8103 	bmi.w	800727e <_printf_float+0x44e>
 8007078:	68e0      	ldr	r0, [r4, #12]
 800707a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800707c:	4298      	cmp	r0, r3
 800707e:	bfb8      	it	lt
 8007080:	4618      	movlt	r0, r3
 8007082:	e734      	b.n	8006eee <_printf_float+0xbe>
 8007084:	2301      	movs	r3, #1
 8007086:	464a      	mov	r2, r9
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	f43f af2b 	beq.w	8006eea <_printf_float+0xba>
 8007094:	f108 0801 	add.w	r8, r8, #1
 8007098:	e7e6      	b.n	8007068 <_printf_float+0x238>
 800709a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	dc2b      	bgt.n	80070f8 <_printf_float+0x2c8>
 80070a0:	2301      	movs	r3, #1
 80070a2:	4a26      	ldr	r2, [pc, #152]	; (800713c <_printf_float+0x30c>)
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	f43f af1d 	beq.w	8006eea <_printf_float+0xba>
 80070b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b2:	b923      	cbnz	r3, 80070be <_printf_float+0x28e>
 80070b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b6:	b913      	cbnz	r3, 80070be <_printf_float+0x28e>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	07d9      	lsls	r1, r3, #31
 80070bc:	d5d8      	bpl.n	8007070 <_printf_float+0x240>
 80070be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	f43f af0e 	beq.w	8006eea <_printf_float+0xba>
 80070ce:	f04f 0900 	mov.w	r9, #0
 80070d2:	f104 0a1a 	add.w	sl, r4, #26
 80070d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d8:	425b      	negs	r3, r3
 80070da:	454b      	cmp	r3, r9
 80070dc:	dc01      	bgt.n	80070e2 <_printf_float+0x2b2>
 80070de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e0:	e794      	b.n	800700c <_printf_float+0x1dc>
 80070e2:	2301      	movs	r3, #1
 80070e4:	4652      	mov	r2, sl
 80070e6:	4631      	mov	r1, r6
 80070e8:	4628      	mov	r0, r5
 80070ea:	47b8      	blx	r7
 80070ec:	3001      	adds	r0, #1
 80070ee:	f43f aefc 	beq.w	8006eea <_printf_float+0xba>
 80070f2:	f109 0901 	add.w	r9, r9, #1
 80070f6:	e7ee      	b.n	80070d6 <_printf_float+0x2a6>
 80070f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070fc:	429a      	cmp	r2, r3
 80070fe:	bfa8      	it	ge
 8007100:	461a      	movge	r2, r3
 8007102:	2a00      	cmp	r2, #0
 8007104:	4691      	mov	r9, r2
 8007106:	dd07      	ble.n	8007118 <_printf_float+0x2e8>
 8007108:	4613      	mov	r3, r2
 800710a:	4631      	mov	r1, r6
 800710c:	4642      	mov	r2, r8
 800710e:	4628      	mov	r0, r5
 8007110:	47b8      	blx	r7
 8007112:	3001      	adds	r0, #1
 8007114:	f43f aee9 	beq.w	8006eea <_printf_float+0xba>
 8007118:	f104 031a 	add.w	r3, r4, #26
 800711c:	f04f 0b00 	mov.w	fp, #0
 8007120:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007124:	9306      	str	r3, [sp, #24]
 8007126:	e015      	b.n	8007154 <_printf_float+0x324>
 8007128:	7fefffff 	.word	0x7fefffff
 800712c:	080093f4 	.word	0x080093f4
 8007130:	080093f0 	.word	0x080093f0
 8007134:	080093fc 	.word	0x080093fc
 8007138:	080093f8 	.word	0x080093f8
 800713c:	08009400 	.word	0x08009400
 8007140:	2301      	movs	r3, #1
 8007142:	9a06      	ldr	r2, [sp, #24]
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f aecd 	beq.w	8006eea <_printf_float+0xba>
 8007150:	f10b 0b01 	add.w	fp, fp, #1
 8007154:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007158:	ebaa 0309 	sub.w	r3, sl, r9
 800715c:	455b      	cmp	r3, fp
 800715e:	dcef      	bgt.n	8007140 <_printf_float+0x310>
 8007160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007164:	429a      	cmp	r2, r3
 8007166:	44d0      	add	r8, sl
 8007168:	db15      	blt.n	8007196 <_printf_float+0x366>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	07da      	lsls	r2, r3, #31
 800716e:	d412      	bmi.n	8007196 <_printf_float+0x366>
 8007170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007172:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007174:	eba3 020a 	sub.w	r2, r3, sl
 8007178:	eba3 0a01 	sub.w	sl, r3, r1
 800717c:	4592      	cmp	sl, r2
 800717e:	bfa8      	it	ge
 8007180:	4692      	movge	sl, r2
 8007182:	f1ba 0f00 	cmp.w	sl, #0
 8007186:	dc0e      	bgt.n	80071a6 <_printf_float+0x376>
 8007188:	f04f 0800 	mov.w	r8, #0
 800718c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007190:	f104 091a 	add.w	r9, r4, #26
 8007194:	e019      	b.n	80071ca <_printf_float+0x39a>
 8007196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	d1e5      	bne.n	8007170 <_printf_float+0x340>
 80071a4:	e6a1      	b.n	8006eea <_printf_float+0xba>
 80071a6:	4653      	mov	r3, sl
 80071a8:	4642      	mov	r2, r8
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	d1e9      	bne.n	8007188 <_printf_float+0x358>
 80071b4:	e699      	b.n	8006eea <_printf_float+0xba>
 80071b6:	2301      	movs	r3, #1
 80071b8:	464a      	mov	r2, r9
 80071ba:	4631      	mov	r1, r6
 80071bc:	4628      	mov	r0, r5
 80071be:	47b8      	blx	r7
 80071c0:	3001      	adds	r0, #1
 80071c2:	f43f ae92 	beq.w	8006eea <_printf_float+0xba>
 80071c6:	f108 0801 	add.w	r8, r8, #1
 80071ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071ce:	1a9b      	subs	r3, r3, r2
 80071d0:	eba3 030a 	sub.w	r3, r3, sl
 80071d4:	4543      	cmp	r3, r8
 80071d6:	dcee      	bgt.n	80071b6 <_printf_float+0x386>
 80071d8:	e74a      	b.n	8007070 <_printf_float+0x240>
 80071da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071dc:	2a01      	cmp	r2, #1
 80071de:	dc01      	bgt.n	80071e4 <_printf_float+0x3b4>
 80071e0:	07db      	lsls	r3, r3, #31
 80071e2:	d53a      	bpl.n	800725a <_printf_float+0x42a>
 80071e4:	2301      	movs	r3, #1
 80071e6:	4642      	mov	r2, r8
 80071e8:	4631      	mov	r1, r6
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b8      	blx	r7
 80071ee:	3001      	adds	r0, #1
 80071f0:	f43f ae7b 	beq.w	8006eea <_printf_float+0xba>
 80071f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071f8:	4631      	mov	r1, r6
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	f108 0801 	add.w	r8, r8, #1
 8007204:	f43f ae71 	beq.w	8006eea <_printf_float+0xba>
 8007208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720a:	2200      	movs	r2, #0
 800720c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007214:	2300      	movs	r3, #0
 8007216:	f7f9 fc67 	bl	8000ae8 <__aeabi_dcmpeq>
 800721a:	b9c8      	cbnz	r0, 8007250 <_printf_float+0x420>
 800721c:	4653      	mov	r3, sl
 800721e:	4642      	mov	r2, r8
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	d10e      	bne.n	8007248 <_printf_float+0x418>
 800722a:	e65e      	b.n	8006eea <_printf_float+0xba>
 800722c:	2301      	movs	r3, #1
 800722e:	4652      	mov	r2, sl
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	f43f ae57 	beq.w	8006eea <_printf_float+0xba>
 800723c:	f108 0801 	add.w	r8, r8, #1
 8007240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007242:	3b01      	subs	r3, #1
 8007244:	4543      	cmp	r3, r8
 8007246:	dcf1      	bgt.n	800722c <_printf_float+0x3fc>
 8007248:	464b      	mov	r3, r9
 800724a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800724e:	e6de      	b.n	800700e <_printf_float+0x1de>
 8007250:	f04f 0800 	mov.w	r8, #0
 8007254:	f104 0a1a 	add.w	sl, r4, #26
 8007258:	e7f2      	b.n	8007240 <_printf_float+0x410>
 800725a:	2301      	movs	r3, #1
 800725c:	e7df      	b.n	800721e <_printf_float+0x3ee>
 800725e:	2301      	movs	r3, #1
 8007260:	464a      	mov	r2, r9
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	f43f ae3e 	beq.w	8006eea <_printf_float+0xba>
 800726e:	f108 0801 	add.w	r8, r8, #1
 8007272:	68e3      	ldr	r3, [r4, #12]
 8007274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	4543      	cmp	r3, r8
 800727a:	dcf0      	bgt.n	800725e <_printf_float+0x42e>
 800727c:	e6fc      	b.n	8007078 <_printf_float+0x248>
 800727e:	f04f 0800 	mov.w	r8, #0
 8007282:	f104 0919 	add.w	r9, r4, #25
 8007286:	e7f4      	b.n	8007272 <_printf_float+0x442>
 8007288:	2900      	cmp	r1, #0
 800728a:	f43f ae8b 	beq.w	8006fa4 <_printf_float+0x174>
 800728e:	2300      	movs	r3, #0
 8007290:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007294:	ab09      	add	r3, sp, #36	; 0x24
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	ec49 8b10 	vmov	d0, r8, r9
 800729c:	6022      	str	r2, [r4, #0]
 800729e:	f8cd a004 	str.w	sl, [sp, #4]
 80072a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072a6:	4628      	mov	r0, r5
 80072a8:	f7ff fd2d 	bl	8006d06 <__cvt>
 80072ac:	4680      	mov	r8, r0
 80072ae:	e648      	b.n	8006f42 <_printf_float+0x112>

080072b0 <_printf_common>:
 80072b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b4:	4691      	mov	r9, r2
 80072b6:	461f      	mov	r7, r3
 80072b8:	688a      	ldr	r2, [r1, #8]
 80072ba:	690b      	ldr	r3, [r1, #16]
 80072bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072c0:	4293      	cmp	r3, r2
 80072c2:	bfb8      	it	lt
 80072c4:	4613      	movlt	r3, r2
 80072c6:	f8c9 3000 	str.w	r3, [r9]
 80072ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072ce:	4606      	mov	r6, r0
 80072d0:	460c      	mov	r4, r1
 80072d2:	b112      	cbz	r2, 80072da <_printf_common+0x2a>
 80072d4:	3301      	adds	r3, #1
 80072d6:	f8c9 3000 	str.w	r3, [r9]
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	0699      	lsls	r1, r3, #26
 80072de:	bf42      	ittt	mi
 80072e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072e4:	3302      	addmi	r3, #2
 80072e6:	f8c9 3000 	strmi.w	r3, [r9]
 80072ea:	6825      	ldr	r5, [r4, #0]
 80072ec:	f015 0506 	ands.w	r5, r5, #6
 80072f0:	d107      	bne.n	8007302 <_printf_common+0x52>
 80072f2:	f104 0a19 	add.w	sl, r4, #25
 80072f6:	68e3      	ldr	r3, [r4, #12]
 80072f8:	f8d9 2000 	ldr.w	r2, [r9]
 80072fc:	1a9b      	subs	r3, r3, r2
 80072fe:	42ab      	cmp	r3, r5
 8007300:	dc28      	bgt.n	8007354 <_printf_common+0xa4>
 8007302:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007306:	6822      	ldr	r2, [r4, #0]
 8007308:	3300      	adds	r3, #0
 800730a:	bf18      	it	ne
 800730c:	2301      	movne	r3, #1
 800730e:	0692      	lsls	r2, r2, #26
 8007310:	d42d      	bmi.n	800736e <_printf_common+0xbe>
 8007312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007316:	4639      	mov	r1, r7
 8007318:	4630      	mov	r0, r6
 800731a:	47c0      	blx	r8
 800731c:	3001      	adds	r0, #1
 800731e:	d020      	beq.n	8007362 <_printf_common+0xb2>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	68e5      	ldr	r5, [r4, #12]
 8007324:	f8d9 2000 	ldr.w	r2, [r9]
 8007328:	f003 0306 	and.w	r3, r3, #6
 800732c:	2b04      	cmp	r3, #4
 800732e:	bf08      	it	eq
 8007330:	1aad      	subeq	r5, r5, r2
 8007332:	68a3      	ldr	r3, [r4, #8]
 8007334:	6922      	ldr	r2, [r4, #16]
 8007336:	bf0c      	ite	eq
 8007338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800733c:	2500      	movne	r5, #0
 800733e:	4293      	cmp	r3, r2
 8007340:	bfc4      	itt	gt
 8007342:	1a9b      	subgt	r3, r3, r2
 8007344:	18ed      	addgt	r5, r5, r3
 8007346:	f04f 0900 	mov.w	r9, #0
 800734a:	341a      	adds	r4, #26
 800734c:	454d      	cmp	r5, r9
 800734e:	d11a      	bne.n	8007386 <_printf_common+0xd6>
 8007350:	2000      	movs	r0, #0
 8007352:	e008      	b.n	8007366 <_printf_common+0xb6>
 8007354:	2301      	movs	r3, #1
 8007356:	4652      	mov	r2, sl
 8007358:	4639      	mov	r1, r7
 800735a:	4630      	mov	r0, r6
 800735c:	47c0      	blx	r8
 800735e:	3001      	adds	r0, #1
 8007360:	d103      	bne.n	800736a <_printf_common+0xba>
 8007362:	f04f 30ff 	mov.w	r0, #4294967295
 8007366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736a:	3501      	adds	r5, #1
 800736c:	e7c3      	b.n	80072f6 <_printf_common+0x46>
 800736e:	18e1      	adds	r1, r4, r3
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	2030      	movs	r0, #48	; 0x30
 8007374:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007378:	4422      	add	r2, r4
 800737a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800737e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007382:	3302      	adds	r3, #2
 8007384:	e7c5      	b.n	8007312 <_printf_common+0x62>
 8007386:	2301      	movs	r3, #1
 8007388:	4622      	mov	r2, r4
 800738a:	4639      	mov	r1, r7
 800738c:	4630      	mov	r0, r6
 800738e:	47c0      	blx	r8
 8007390:	3001      	adds	r0, #1
 8007392:	d0e6      	beq.n	8007362 <_printf_common+0xb2>
 8007394:	f109 0901 	add.w	r9, r9, #1
 8007398:	e7d8      	b.n	800734c <_printf_common+0x9c>
	...

0800739c <_printf_i>:
 800739c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073a4:	460c      	mov	r4, r1
 80073a6:	7e09      	ldrb	r1, [r1, #24]
 80073a8:	b085      	sub	sp, #20
 80073aa:	296e      	cmp	r1, #110	; 0x6e
 80073ac:	4617      	mov	r7, r2
 80073ae:	4606      	mov	r6, r0
 80073b0:	4698      	mov	r8, r3
 80073b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073b4:	f000 80b3 	beq.w	800751e <_printf_i+0x182>
 80073b8:	d822      	bhi.n	8007400 <_printf_i+0x64>
 80073ba:	2963      	cmp	r1, #99	; 0x63
 80073bc:	d036      	beq.n	800742c <_printf_i+0x90>
 80073be:	d80a      	bhi.n	80073d6 <_printf_i+0x3a>
 80073c0:	2900      	cmp	r1, #0
 80073c2:	f000 80b9 	beq.w	8007538 <_printf_i+0x19c>
 80073c6:	2958      	cmp	r1, #88	; 0x58
 80073c8:	f000 8083 	beq.w	80074d2 <_printf_i+0x136>
 80073cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073d4:	e032      	b.n	800743c <_printf_i+0xa0>
 80073d6:	2964      	cmp	r1, #100	; 0x64
 80073d8:	d001      	beq.n	80073de <_printf_i+0x42>
 80073da:	2969      	cmp	r1, #105	; 0x69
 80073dc:	d1f6      	bne.n	80073cc <_printf_i+0x30>
 80073de:	6820      	ldr	r0, [r4, #0]
 80073e0:	6813      	ldr	r3, [r2, #0]
 80073e2:	0605      	lsls	r5, r0, #24
 80073e4:	f103 0104 	add.w	r1, r3, #4
 80073e8:	d52a      	bpl.n	8007440 <_printf_i+0xa4>
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6011      	str	r1, [r2, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da03      	bge.n	80073fa <_printf_i+0x5e>
 80073f2:	222d      	movs	r2, #45	; 0x2d
 80073f4:	425b      	negs	r3, r3
 80073f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80073fa:	486f      	ldr	r0, [pc, #444]	; (80075b8 <_printf_i+0x21c>)
 80073fc:	220a      	movs	r2, #10
 80073fe:	e039      	b.n	8007474 <_printf_i+0xd8>
 8007400:	2973      	cmp	r1, #115	; 0x73
 8007402:	f000 809d 	beq.w	8007540 <_printf_i+0x1a4>
 8007406:	d808      	bhi.n	800741a <_printf_i+0x7e>
 8007408:	296f      	cmp	r1, #111	; 0x6f
 800740a:	d020      	beq.n	800744e <_printf_i+0xb2>
 800740c:	2970      	cmp	r1, #112	; 0x70
 800740e:	d1dd      	bne.n	80073cc <_printf_i+0x30>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	f043 0320 	orr.w	r3, r3, #32
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	e003      	b.n	8007422 <_printf_i+0x86>
 800741a:	2975      	cmp	r1, #117	; 0x75
 800741c:	d017      	beq.n	800744e <_printf_i+0xb2>
 800741e:	2978      	cmp	r1, #120	; 0x78
 8007420:	d1d4      	bne.n	80073cc <_printf_i+0x30>
 8007422:	2378      	movs	r3, #120	; 0x78
 8007424:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007428:	4864      	ldr	r0, [pc, #400]	; (80075bc <_printf_i+0x220>)
 800742a:	e055      	b.n	80074d8 <_printf_i+0x13c>
 800742c:	6813      	ldr	r3, [r2, #0]
 800742e:	1d19      	adds	r1, r3, #4
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6011      	str	r1, [r2, #0]
 8007434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800743c:	2301      	movs	r3, #1
 800743e:	e08c      	b.n	800755a <_printf_i+0x1be>
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6011      	str	r1, [r2, #0]
 8007444:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007448:	bf18      	it	ne
 800744a:	b21b      	sxthne	r3, r3
 800744c:	e7cf      	b.n	80073ee <_printf_i+0x52>
 800744e:	6813      	ldr	r3, [r2, #0]
 8007450:	6825      	ldr	r5, [r4, #0]
 8007452:	1d18      	adds	r0, r3, #4
 8007454:	6010      	str	r0, [r2, #0]
 8007456:	0628      	lsls	r0, r5, #24
 8007458:	d501      	bpl.n	800745e <_printf_i+0xc2>
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	e002      	b.n	8007464 <_printf_i+0xc8>
 800745e:	0668      	lsls	r0, r5, #25
 8007460:	d5fb      	bpl.n	800745a <_printf_i+0xbe>
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	4854      	ldr	r0, [pc, #336]	; (80075b8 <_printf_i+0x21c>)
 8007466:	296f      	cmp	r1, #111	; 0x6f
 8007468:	bf14      	ite	ne
 800746a:	220a      	movne	r2, #10
 800746c:	2208      	moveq	r2, #8
 800746e:	2100      	movs	r1, #0
 8007470:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007474:	6865      	ldr	r5, [r4, #4]
 8007476:	60a5      	str	r5, [r4, #8]
 8007478:	2d00      	cmp	r5, #0
 800747a:	f2c0 8095 	blt.w	80075a8 <_printf_i+0x20c>
 800747e:	6821      	ldr	r1, [r4, #0]
 8007480:	f021 0104 	bic.w	r1, r1, #4
 8007484:	6021      	str	r1, [r4, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d13d      	bne.n	8007506 <_printf_i+0x16a>
 800748a:	2d00      	cmp	r5, #0
 800748c:	f040 808e 	bne.w	80075ac <_printf_i+0x210>
 8007490:	4665      	mov	r5, ip
 8007492:	2a08      	cmp	r2, #8
 8007494:	d10b      	bne.n	80074ae <_printf_i+0x112>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	07db      	lsls	r3, r3, #31
 800749a:	d508      	bpl.n	80074ae <_printf_i+0x112>
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	6862      	ldr	r2, [r4, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	bfde      	ittt	le
 80074a4:	2330      	movle	r3, #48	; 0x30
 80074a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074ae:	ebac 0305 	sub.w	r3, ip, r5
 80074b2:	6123      	str	r3, [r4, #16]
 80074b4:	f8cd 8000 	str.w	r8, [sp]
 80074b8:	463b      	mov	r3, r7
 80074ba:	aa03      	add	r2, sp, #12
 80074bc:	4621      	mov	r1, r4
 80074be:	4630      	mov	r0, r6
 80074c0:	f7ff fef6 	bl	80072b0 <_printf_common>
 80074c4:	3001      	adds	r0, #1
 80074c6:	d14d      	bne.n	8007564 <_printf_i+0x1c8>
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	b005      	add	sp, #20
 80074ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074d2:	4839      	ldr	r0, [pc, #228]	; (80075b8 <_printf_i+0x21c>)
 80074d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074d8:	6813      	ldr	r3, [r2, #0]
 80074da:	6821      	ldr	r1, [r4, #0]
 80074dc:	1d1d      	adds	r5, r3, #4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6015      	str	r5, [r2, #0]
 80074e2:	060a      	lsls	r2, r1, #24
 80074e4:	d50b      	bpl.n	80074fe <_printf_i+0x162>
 80074e6:	07ca      	lsls	r2, r1, #31
 80074e8:	bf44      	itt	mi
 80074ea:	f041 0120 	orrmi.w	r1, r1, #32
 80074ee:	6021      	strmi	r1, [r4, #0]
 80074f0:	b91b      	cbnz	r3, 80074fa <_printf_i+0x15e>
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	f022 0220 	bic.w	r2, r2, #32
 80074f8:	6022      	str	r2, [r4, #0]
 80074fa:	2210      	movs	r2, #16
 80074fc:	e7b7      	b.n	800746e <_printf_i+0xd2>
 80074fe:	064d      	lsls	r5, r1, #25
 8007500:	bf48      	it	mi
 8007502:	b29b      	uxthmi	r3, r3
 8007504:	e7ef      	b.n	80074e6 <_printf_i+0x14a>
 8007506:	4665      	mov	r5, ip
 8007508:	fbb3 f1f2 	udiv	r1, r3, r2
 800750c:	fb02 3311 	mls	r3, r2, r1, r3
 8007510:	5cc3      	ldrb	r3, [r0, r3]
 8007512:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007516:	460b      	mov	r3, r1
 8007518:	2900      	cmp	r1, #0
 800751a:	d1f5      	bne.n	8007508 <_printf_i+0x16c>
 800751c:	e7b9      	b.n	8007492 <_printf_i+0xf6>
 800751e:	6813      	ldr	r3, [r2, #0]
 8007520:	6825      	ldr	r5, [r4, #0]
 8007522:	6961      	ldr	r1, [r4, #20]
 8007524:	1d18      	adds	r0, r3, #4
 8007526:	6010      	str	r0, [r2, #0]
 8007528:	0628      	lsls	r0, r5, #24
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	d501      	bpl.n	8007532 <_printf_i+0x196>
 800752e:	6019      	str	r1, [r3, #0]
 8007530:	e002      	b.n	8007538 <_printf_i+0x19c>
 8007532:	066a      	lsls	r2, r5, #25
 8007534:	d5fb      	bpl.n	800752e <_printf_i+0x192>
 8007536:	8019      	strh	r1, [r3, #0]
 8007538:	2300      	movs	r3, #0
 800753a:	6123      	str	r3, [r4, #16]
 800753c:	4665      	mov	r5, ip
 800753e:	e7b9      	b.n	80074b4 <_printf_i+0x118>
 8007540:	6813      	ldr	r3, [r2, #0]
 8007542:	1d19      	adds	r1, r3, #4
 8007544:	6011      	str	r1, [r2, #0]
 8007546:	681d      	ldr	r5, [r3, #0]
 8007548:	6862      	ldr	r2, [r4, #4]
 800754a:	2100      	movs	r1, #0
 800754c:	4628      	mov	r0, r5
 800754e:	f7f8 fe57 	bl	8000200 <memchr>
 8007552:	b108      	cbz	r0, 8007558 <_printf_i+0x1bc>
 8007554:	1b40      	subs	r0, r0, r5
 8007556:	6060      	str	r0, [r4, #4]
 8007558:	6863      	ldr	r3, [r4, #4]
 800755a:	6123      	str	r3, [r4, #16]
 800755c:	2300      	movs	r3, #0
 800755e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007562:	e7a7      	b.n	80074b4 <_printf_i+0x118>
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	462a      	mov	r2, r5
 8007568:	4639      	mov	r1, r7
 800756a:	4630      	mov	r0, r6
 800756c:	47c0      	blx	r8
 800756e:	3001      	adds	r0, #1
 8007570:	d0aa      	beq.n	80074c8 <_printf_i+0x12c>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	079b      	lsls	r3, r3, #30
 8007576:	d413      	bmi.n	80075a0 <_printf_i+0x204>
 8007578:	68e0      	ldr	r0, [r4, #12]
 800757a:	9b03      	ldr	r3, [sp, #12]
 800757c:	4298      	cmp	r0, r3
 800757e:	bfb8      	it	lt
 8007580:	4618      	movlt	r0, r3
 8007582:	e7a3      	b.n	80074cc <_printf_i+0x130>
 8007584:	2301      	movs	r3, #1
 8007586:	464a      	mov	r2, r9
 8007588:	4639      	mov	r1, r7
 800758a:	4630      	mov	r0, r6
 800758c:	47c0      	blx	r8
 800758e:	3001      	adds	r0, #1
 8007590:	d09a      	beq.n	80074c8 <_printf_i+0x12c>
 8007592:	3501      	adds	r5, #1
 8007594:	68e3      	ldr	r3, [r4, #12]
 8007596:	9a03      	ldr	r2, [sp, #12]
 8007598:	1a9b      	subs	r3, r3, r2
 800759a:	42ab      	cmp	r3, r5
 800759c:	dcf2      	bgt.n	8007584 <_printf_i+0x1e8>
 800759e:	e7eb      	b.n	8007578 <_printf_i+0x1dc>
 80075a0:	2500      	movs	r5, #0
 80075a2:	f104 0919 	add.w	r9, r4, #25
 80075a6:	e7f5      	b.n	8007594 <_printf_i+0x1f8>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1ac      	bne.n	8007506 <_printf_i+0x16a>
 80075ac:	7803      	ldrb	r3, [r0, #0]
 80075ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b6:	e76c      	b.n	8007492 <_printf_i+0xf6>
 80075b8:	08009402 	.word	0x08009402
 80075bc:	08009413 	.word	0x08009413

080075c0 <iprintf>:
 80075c0:	b40f      	push	{r0, r1, r2, r3}
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <iprintf+0x2c>)
 80075c4:	b513      	push	{r0, r1, r4, lr}
 80075c6:	681c      	ldr	r4, [r3, #0]
 80075c8:	b124      	cbz	r4, 80075d4 <iprintf+0x14>
 80075ca:	69a3      	ldr	r3, [r4, #24]
 80075cc:	b913      	cbnz	r3, 80075d4 <iprintf+0x14>
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 fe92 	bl	80082f8 <__sinit>
 80075d4:	ab05      	add	r3, sp, #20
 80075d6:	9a04      	ldr	r2, [sp, #16]
 80075d8:	68a1      	ldr	r1, [r4, #8]
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	4620      	mov	r0, r4
 80075de:	f001 fae7 	bl	8008bb0 <_vfiprintf_r>
 80075e2:	b002      	add	sp, #8
 80075e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e8:	b004      	add	sp, #16
 80075ea:	4770      	bx	lr
 80075ec:	20000010 	.word	0x20000010

080075f0 <quorem>:
 80075f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	6903      	ldr	r3, [r0, #16]
 80075f6:	690c      	ldr	r4, [r1, #16]
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	4680      	mov	r8, r0
 80075fc:	f2c0 8082 	blt.w	8007704 <quorem+0x114>
 8007600:	3c01      	subs	r4, #1
 8007602:	f101 0714 	add.w	r7, r1, #20
 8007606:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800760a:	f100 0614 	add.w	r6, r0, #20
 800760e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007612:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007616:	eb06 030c 	add.w	r3, r6, ip
 800761a:	3501      	adds	r5, #1
 800761c:	eb07 090c 	add.w	r9, r7, ip
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	fbb0 f5f5 	udiv	r5, r0, r5
 8007626:	b395      	cbz	r5, 800768e <quorem+0x9e>
 8007628:	f04f 0a00 	mov.w	sl, #0
 800762c:	4638      	mov	r0, r7
 800762e:	46b6      	mov	lr, r6
 8007630:	46d3      	mov	fp, sl
 8007632:	f850 2b04 	ldr.w	r2, [r0], #4
 8007636:	b293      	uxth	r3, r2
 8007638:	fb05 a303 	mla	r3, r5, r3, sl
 800763c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007640:	b29b      	uxth	r3, r3
 8007642:	ebab 0303 	sub.w	r3, fp, r3
 8007646:	0c12      	lsrs	r2, r2, #16
 8007648:	f8de b000 	ldr.w	fp, [lr]
 800764c:	fb05 a202 	mla	r2, r5, r2, sl
 8007650:	fa13 f38b 	uxtah	r3, r3, fp
 8007654:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007658:	fa1f fb82 	uxth.w	fp, r2
 800765c:	f8de 2000 	ldr.w	r2, [lr]
 8007660:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007664:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007668:	b29b      	uxth	r3, r3
 800766a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800766e:	4581      	cmp	r9, r0
 8007670:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007674:	f84e 3b04 	str.w	r3, [lr], #4
 8007678:	d2db      	bcs.n	8007632 <quorem+0x42>
 800767a:	f856 300c 	ldr.w	r3, [r6, ip]
 800767e:	b933      	cbnz	r3, 800768e <quorem+0x9e>
 8007680:	9b01      	ldr	r3, [sp, #4]
 8007682:	3b04      	subs	r3, #4
 8007684:	429e      	cmp	r6, r3
 8007686:	461a      	mov	r2, r3
 8007688:	d330      	bcc.n	80076ec <quorem+0xfc>
 800768a:	f8c8 4010 	str.w	r4, [r8, #16]
 800768e:	4640      	mov	r0, r8
 8007690:	f001 f8e8 	bl	8008864 <__mcmp>
 8007694:	2800      	cmp	r0, #0
 8007696:	db25      	blt.n	80076e4 <quorem+0xf4>
 8007698:	3501      	adds	r5, #1
 800769a:	4630      	mov	r0, r6
 800769c:	f04f 0c00 	mov.w	ip, #0
 80076a0:	f857 2b04 	ldr.w	r2, [r7], #4
 80076a4:	f8d0 e000 	ldr.w	lr, [r0]
 80076a8:	b293      	uxth	r3, r2
 80076aa:	ebac 0303 	sub.w	r3, ip, r3
 80076ae:	0c12      	lsrs	r2, r2, #16
 80076b0:	fa13 f38e 	uxtah	r3, r3, lr
 80076b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076bc:	b29b      	uxth	r3, r3
 80076be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c2:	45b9      	cmp	r9, r7
 80076c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076c8:	f840 3b04 	str.w	r3, [r0], #4
 80076cc:	d2e8      	bcs.n	80076a0 <quorem+0xb0>
 80076ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80076d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80076d6:	b92a      	cbnz	r2, 80076e4 <quorem+0xf4>
 80076d8:	3b04      	subs	r3, #4
 80076da:	429e      	cmp	r6, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	d30b      	bcc.n	80076f8 <quorem+0x108>
 80076e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80076e4:	4628      	mov	r0, r5
 80076e6:	b003      	add	sp, #12
 80076e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	3b04      	subs	r3, #4
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	d1ca      	bne.n	800768a <quorem+0x9a>
 80076f4:	3c01      	subs	r4, #1
 80076f6:	e7c5      	b.n	8007684 <quorem+0x94>
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	3b04      	subs	r3, #4
 80076fc:	2a00      	cmp	r2, #0
 80076fe:	d1ef      	bne.n	80076e0 <quorem+0xf0>
 8007700:	3c01      	subs	r4, #1
 8007702:	e7ea      	b.n	80076da <quorem+0xea>
 8007704:	2000      	movs	r0, #0
 8007706:	e7ee      	b.n	80076e6 <quorem+0xf6>

08007708 <_dtoa_r>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	ec57 6b10 	vmov	r6, r7, d0
 8007710:	b097      	sub	sp, #92	; 0x5c
 8007712:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007714:	9106      	str	r1, [sp, #24]
 8007716:	4604      	mov	r4, r0
 8007718:	920b      	str	r2, [sp, #44]	; 0x2c
 800771a:	9312      	str	r3, [sp, #72]	; 0x48
 800771c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007720:	e9cd 6700 	strd	r6, r7, [sp]
 8007724:	b93d      	cbnz	r5, 8007736 <_dtoa_r+0x2e>
 8007726:	2010      	movs	r0, #16
 8007728:	f000 fe7e 	bl	8008428 <malloc>
 800772c:	6260      	str	r0, [r4, #36]	; 0x24
 800772e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007732:	6005      	str	r5, [r0, #0]
 8007734:	60c5      	str	r5, [r0, #12]
 8007736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007738:	6819      	ldr	r1, [r3, #0]
 800773a:	b151      	cbz	r1, 8007752 <_dtoa_r+0x4a>
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	604a      	str	r2, [r1, #4]
 8007740:	2301      	movs	r3, #1
 8007742:	4093      	lsls	r3, r2
 8007744:	608b      	str	r3, [r1, #8]
 8007746:	4620      	mov	r0, r4
 8007748:	f000 feaa 	bl	80084a0 <_Bfree>
 800774c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	1e3b      	subs	r3, r7, #0
 8007754:	bfbb      	ittet	lt
 8007756:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800775a:	9301      	strlt	r3, [sp, #4]
 800775c:	2300      	movge	r3, #0
 800775e:	2201      	movlt	r2, #1
 8007760:	bfac      	ite	ge
 8007762:	f8c8 3000 	strge.w	r3, [r8]
 8007766:	f8c8 2000 	strlt.w	r2, [r8]
 800776a:	4baf      	ldr	r3, [pc, #700]	; (8007a28 <_dtoa_r+0x320>)
 800776c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007770:	ea33 0308 	bics.w	r3, r3, r8
 8007774:	d114      	bne.n	80077a0 <_dtoa_r+0x98>
 8007776:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007778:	f242 730f 	movw	r3, #9999	; 0x270f
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	b923      	cbnz	r3, 800778c <_dtoa_r+0x84>
 8007782:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007786:	2800      	cmp	r0, #0
 8007788:	f000 8542 	beq.w	8008210 <_dtoa_r+0xb08>
 800778c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800778e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007a3c <_dtoa_r+0x334>
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8544 	beq.w	8008220 <_dtoa_r+0xb18>
 8007798:	f10b 0303 	add.w	r3, fp, #3
 800779c:	f000 bd3e 	b.w	800821c <_dtoa_r+0xb14>
 80077a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80077a4:	2200      	movs	r2, #0
 80077a6:	2300      	movs	r3, #0
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f9 f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 80077b0:	4681      	mov	r9, r0
 80077b2:	b168      	cbz	r0, 80077d0 <_dtoa_r+0xc8>
 80077b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077b6:	2301      	movs	r3, #1
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8524 	beq.w	800820a <_dtoa_r+0xb02>
 80077c2:	4b9a      	ldr	r3, [pc, #616]	; (8007a2c <_dtoa_r+0x324>)
 80077c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	f000 bd28 	b.w	8008220 <_dtoa_r+0xb18>
 80077d0:	aa14      	add	r2, sp, #80	; 0x50
 80077d2:	a915      	add	r1, sp, #84	; 0x54
 80077d4:	ec47 6b10 	vmov	d0, r6, r7
 80077d8:	4620      	mov	r0, r4
 80077da:	f001 f8ba 	bl	8008952 <__d2b>
 80077de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80077e2:	9004      	str	r0, [sp, #16]
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	d07c      	beq.n	80078e2 <_dtoa_r+0x1da>
 80077e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80077f0:	46b2      	mov	sl, r6
 80077f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80077f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80077fe:	2200      	movs	r2, #0
 8007800:	4b8b      	ldr	r3, [pc, #556]	; (8007a30 <_dtoa_r+0x328>)
 8007802:	4650      	mov	r0, sl
 8007804:	4659      	mov	r1, fp
 8007806:	f7f8 fd4f 	bl	80002a8 <__aeabi_dsub>
 800780a:	a381      	add	r3, pc, #516	; (adr r3, 8007a10 <_dtoa_r+0x308>)
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f7f8 ff02 	bl	8000618 <__aeabi_dmul>
 8007814:	a380      	add	r3, pc, #512	; (adr r3, 8007a18 <_dtoa_r+0x310>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7f8 fd47 	bl	80002ac <__adddf3>
 800781e:	4606      	mov	r6, r0
 8007820:	4628      	mov	r0, r5
 8007822:	460f      	mov	r7, r1
 8007824:	f7f8 fe8e 	bl	8000544 <__aeabi_i2d>
 8007828:	a37d      	add	r3, pc, #500	; (adr r3, 8007a20 <_dtoa_r+0x318>)
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	f7f8 fef3 	bl	8000618 <__aeabi_dmul>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4630      	mov	r0, r6
 8007838:	4639      	mov	r1, r7
 800783a:	f7f8 fd37 	bl	80002ac <__adddf3>
 800783e:	4606      	mov	r6, r0
 8007840:	460f      	mov	r7, r1
 8007842:	f7f9 f999 	bl	8000b78 <__aeabi_d2iz>
 8007846:	2200      	movs	r2, #0
 8007848:	4682      	mov	sl, r0
 800784a:	2300      	movs	r3, #0
 800784c:	4630      	mov	r0, r6
 800784e:	4639      	mov	r1, r7
 8007850:	f7f9 f954 	bl	8000afc <__aeabi_dcmplt>
 8007854:	b148      	cbz	r0, 800786a <_dtoa_r+0x162>
 8007856:	4650      	mov	r0, sl
 8007858:	f7f8 fe74 	bl	8000544 <__aeabi_i2d>
 800785c:	4632      	mov	r2, r6
 800785e:	463b      	mov	r3, r7
 8007860:	f7f9 f942 	bl	8000ae8 <__aeabi_dcmpeq>
 8007864:	b908      	cbnz	r0, 800786a <_dtoa_r+0x162>
 8007866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800786a:	f1ba 0f16 	cmp.w	sl, #22
 800786e:	d859      	bhi.n	8007924 <_dtoa_r+0x21c>
 8007870:	4970      	ldr	r1, [pc, #448]	; (8007a34 <_dtoa_r+0x32c>)
 8007872:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800787a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800787e:	f7f9 f95b 	bl	8000b38 <__aeabi_dcmpgt>
 8007882:	2800      	cmp	r0, #0
 8007884:	d050      	beq.n	8007928 <_dtoa_r+0x220>
 8007886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800788a:	2300      	movs	r3, #0
 800788c:	930f      	str	r3, [sp, #60]	; 0x3c
 800788e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007890:	1b5d      	subs	r5, r3, r5
 8007892:	f1b5 0801 	subs.w	r8, r5, #1
 8007896:	bf49      	itett	mi
 8007898:	f1c5 0301 	rsbmi	r3, r5, #1
 800789c:	2300      	movpl	r3, #0
 800789e:	9305      	strmi	r3, [sp, #20]
 80078a0:	f04f 0800 	movmi.w	r8, #0
 80078a4:	bf58      	it	pl
 80078a6:	9305      	strpl	r3, [sp, #20]
 80078a8:	f1ba 0f00 	cmp.w	sl, #0
 80078ac:	db3e      	blt.n	800792c <_dtoa_r+0x224>
 80078ae:	2300      	movs	r3, #0
 80078b0:	44d0      	add	r8, sl
 80078b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80078b6:	9307      	str	r3, [sp, #28]
 80078b8:	9b06      	ldr	r3, [sp, #24]
 80078ba:	2b09      	cmp	r3, #9
 80078bc:	f200 8090 	bhi.w	80079e0 <_dtoa_r+0x2d8>
 80078c0:	2b05      	cmp	r3, #5
 80078c2:	bfc4      	itt	gt
 80078c4:	3b04      	subgt	r3, #4
 80078c6:	9306      	strgt	r3, [sp, #24]
 80078c8:	9b06      	ldr	r3, [sp, #24]
 80078ca:	f1a3 0302 	sub.w	r3, r3, #2
 80078ce:	bfcc      	ite	gt
 80078d0:	2500      	movgt	r5, #0
 80078d2:	2501      	movle	r5, #1
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	f200 808f 	bhi.w	80079f8 <_dtoa_r+0x2f0>
 80078da:	e8df f003 	tbb	[pc, r3]
 80078de:	7f7d      	.short	0x7f7d
 80078e0:	7131      	.short	0x7131
 80078e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80078e6:	441d      	add	r5, r3
 80078e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80078ec:	2820      	cmp	r0, #32
 80078ee:	dd13      	ble.n	8007918 <_dtoa_r+0x210>
 80078f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80078f4:	9b00      	ldr	r3, [sp, #0]
 80078f6:	fa08 f800 	lsl.w	r8, r8, r0
 80078fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80078fe:	fa23 f000 	lsr.w	r0, r3, r0
 8007902:	ea48 0000 	orr.w	r0, r8, r0
 8007906:	f7f8 fe0d 	bl	8000524 <__aeabi_ui2d>
 800790a:	2301      	movs	r3, #1
 800790c:	4682      	mov	sl, r0
 800790e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007912:	3d01      	subs	r5, #1
 8007914:	9313      	str	r3, [sp, #76]	; 0x4c
 8007916:	e772      	b.n	80077fe <_dtoa_r+0xf6>
 8007918:	9b00      	ldr	r3, [sp, #0]
 800791a:	f1c0 0020 	rsb	r0, r0, #32
 800791e:	fa03 f000 	lsl.w	r0, r3, r0
 8007922:	e7f0      	b.n	8007906 <_dtoa_r+0x1fe>
 8007924:	2301      	movs	r3, #1
 8007926:	e7b1      	b.n	800788c <_dtoa_r+0x184>
 8007928:	900f      	str	r0, [sp, #60]	; 0x3c
 800792a:	e7b0      	b.n	800788e <_dtoa_r+0x186>
 800792c:	9b05      	ldr	r3, [sp, #20]
 800792e:	eba3 030a 	sub.w	r3, r3, sl
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	f1ca 0300 	rsb	r3, sl, #0
 8007938:	9307      	str	r3, [sp, #28]
 800793a:	2300      	movs	r3, #0
 800793c:	930e      	str	r3, [sp, #56]	; 0x38
 800793e:	e7bb      	b.n	80078b8 <_dtoa_r+0x1b0>
 8007940:	2301      	movs	r3, #1
 8007942:	930a      	str	r3, [sp, #40]	; 0x28
 8007944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007946:	2b00      	cmp	r3, #0
 8007948:	dd59      	ble.n	80079fe <_dtoa_r+0x2f6>
 800794a:	9302      	str	r3, [sp, #8]
 800794c:	4699      	mov	r9, r3
 800794e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007950:	2200      	movs	r2, #0
 8007952:	6072      	str	r2, [r6, #4]
 8007954:	2204      	movs	r2, #4
 8007956:	f102 0014 	add.w	r0, r2, #20
 800795a:	4298      	cmp	r0, r3
 800795c:	6871      	ldr	r1, [r6, #4]
 800795e:	d953      	bls.n	8007a08 <_dtoa_r+0x300>
 8007960:	4620      	mov	r0, r4
 8007962:	f000 fd69 	bl	8008438 <_Balloc>
 8007966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007968:	6030      	str	r0, [r6, #0]
 800796a:	f1b9 0f0e 	cmp.w	r9, #14
 800796e:	f8d3 b000 	ldr.w	fp, [r3]
 8007972:	f200 80e6 	bhi.w	8007b42 <_dtoa_r+0x43a>
 8007976:	2d00      	cmp	r5, #0
 8007978:	f000 80e3 	beq.w	8007b42 <_dtoa_r+0x43a>
 800797c:	ed9d 7b00 	vldr	d7, [sp]
 8007980:	f1ba 0f00 	cmp.w	sl, #0
 8007984:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007988:	dd74      	ble.n	8007a74 <_dtoa_r+0x36c>
 800798a:	4a2a      	ldr	r2, [pc, #168]	; (8007a34 <_dtoa_r+0x32c>)
 800798c:	f00a 030f 	and.w	r3, sl, #15
 8007990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007994:	ed93 7b00 	vldr	d7, [r3]
 8007998:	ea4f 162a 	mov.w	r6, sl, asr #4
 800799c:	06f0      	lsls	r0, r6, #27
 800799e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80079a2:	d565      	bpl.n	8007a70 <_dtoa_r+0x368>
 80079a4:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <_dtoa_r+0x330>)
 80079a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079ae:	f7f8 ff5d 	bl	800086c <__aeabi_ddiv>
 80079b2:	e9cd 0100 	strd	r0, r1, [sp]
 80079b6:	f006 060f 	and.w	r6, r6, #15
 80079ba:	2503      	movs	r5, #3
 80079bc:	4f1e      	ldr	r7, [pc, #120]	; (8007a38 <_dtoa_r+0x330>)
 80079be:	e04c      	b.n	8007a5a <_dtoa_r+0x352>
 80079c0:	2301      	movs	r3, #1
 80079c2:	930a      	str	r3, [sp, #40]	; 0x28
 80079c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c6:	4453      	add	r3, sl
 80079c8:	f103 0901 	add.w	r9, r3, #1
 80079cc:	9302      	str	r3, [sp, #8]
 80079ce:	464b      	mov	r3, r9
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	bfb8      	it	lt
 80079d4:	2301      	movlt	r3, #1
 80079d6:	e7ba      	b.n	800794e <_dtoa_r+0x246>
 80079d8:	2300      	movs	r3, #0
 80079da:	e7b2      	b.n	8007942 <_dtoa_r+0x23a>
 80079dc:	2300      	movs	r3, #0
 80079de:	e7f0      	b.n	80079c2 <_dtoa_r+0x2ba>
 80079e0:	2501      	movs	r5, #1
 80079e2:	2300      	movs	r3, #0
 80079e4:	9306      	str	r3, [sp, #24]
 80079e6:	950a      	str	r5, [sp, #40]	; 0x28
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ec:	9302      	str	r3, [sp, #8]
 80079ee:	4699      	mov	r9, r3
 80079f0:	2200      	movs	r2, #0
 80079f2:	2312      	movs	r3, #18
 80079f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80079f6:	e7aa      	b.n	800794e <_dtoa_r+0x246>
 80079f8:	2301      	movs	r3, #1
 80079fa:	930a      	str	r3, [sp, #40]	; 0x28
 80079fc:	e7f4      	b.n	80079e8 <_dtoa_r+0x2e0>
 80079fe:	2301      	movs	r3, #1
 8007a00:	9302      	str	r3, [sp, #8]
 8007a02:	4699      	mov	r9, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	e7f5      	b.n	80079f4 <_dtoa_r+0x2ec>
 8007a08:	3101      	adds	r1, #1
 8007a0a:	6071      	str	r1, [r6, #4]
 8007a0c:	0052      	lsls	r2, r2, #1
 8007a0e:	e7a2      	b.n	8007956 <_dtoa_r+0x24e>
 8007a10:	636f4361 	.word	0x636f4361
 8007a14:	3fd287a7 	.word	0x3fd287a7
 8007a18:	8b60c8b3 	.word	0x8b60c8b3
 8007a1c:	3fc68a28 	.word	0x3fc68a28
 8007a20:	509f79fb 	.word	0x509f79fb
 8007a24:	3fd34413 	.word	0x3fd34413
 8007a28:	7ff00000 	.word	0x7ff00000
 8007a2c:	08009401 	.word	0x08009401
 8007a30:	3ff80000 	.word	0x3ff80000
 8007a34:	080094c0 	.word	0x080094c0
 8007a38:	08009498 	.word	0x08009498
 8007a3c:	0800942d 	.word	0x0800942d
 8007a40:	07f1      	lsls	r1, r6, #31
 8007a42:	d508      	bpl.n	8007a56 <_dtoa_r+0x34e>
 8007a44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a4c:	f7f8 fde4 	bl	8000618 <__aeabi_dmul>
 8007a50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a54:	3501      	adds	r5, #1
 8007a56:	1076      	asrs	r6, r6, #1
 8007a58:	3708      	adds	r7, #8
 8007a5a:	2e00      	cmp	r6, #0
 8007a5c:	d1f0      	bne.n	8007a40 <_dtoa_r+0x338>
 8007a5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a66:	f7f8 ff01 	bl	800086c <__aeabi_ddiv>
 8007a6a:	e9cd 0100 	strd	r0, r1, [sp]
 8007a6e:	e01a      	b.n	8007aa6 <_dtoa_r+0x39e>
 8007a70:	2502      	movs	r5, #2
 8007a72:	e7a3      	b.n	80079bc <_dtoa_r+0x2b4>
 8007a74:	f000 80a0 	beq.w	8007bb8 <_dtoa_r+0x4b0>
 8007a78:	f1ca 0600 	rsb	r6, sl, #0
 8007a7c:	4b9f      	ldr	r3, [pc, #636]	; (8007cfc <_dtoa_r+0x5f4>)
 8007a7e:	4fa0      	ldr	r7, [pc, #640]	; (8007d00 <_dtoa_r+0x5f8>)
 8007a80:	f006 020f 	and.w	r2, r6, #15
 8007a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a90:	f7f8 fdc2 	bl	8000618 <__aeabi_dmul>
 8007a94:	e9cd 0100 	strd	r0, r1, [sp]
 8007a98:	1136      	asrs	r6, r6, #4
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2502      	movs	r5, #2
 8007a9e:	2e00      	cmp	r6, #0
 8007aa0:	d17f      	bne.n	8007ba2 <_dtoa_r+0x49a>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e1      	bne.n	8007a6a <_dtoa_r+0x362>
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8087 	beq.w	8007bbc <_dtoa_r+0x4b4>
 8007aae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	4b93      	ldr	r3, [pc, #588]	; (8007d04 <_dtoa_r+0x5fc>)
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4639      	mov	r1, r7
 8007aba:	f7f9 f81f 	bl	8000afc <__aeabi_dcmplt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d07c      	beq.n	8007bbc <_dtoa_r+0x4b4>
 8007ac2:	f1b9 0f00 	cmp.w	r9, #0
 8007ac6:	d079      	beq.n	8007bbc <_dtoa_r+0x4b4>
 8007ac8:	9b02      	ldr	r3, [sp, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	dd35      	ble.n	8007b3a <_dtoa_r+0x432>
 8007ace:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ad2:	9308      	str	r3, [sp, #32]
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	4b8b      	ldr	r3, [pc, #556]	; (8007d08 <_dtoa_r+0x600>)
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7f8 fd9c 	bl	8000618 <__aeabi_dmul>
 8007ae0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ae4:	9f02      	ldr	r7, [sp, #8]
 8007ae6:	3501      	adds	r5, #1
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f7f8 fd2b 	bl	8000544 <__aeabi_i2d>
 8007aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007af2:	f7f8 fd91 	bl	8000618 <__aeabi_dmul>
 8007af6:	2200      	movs	r2, #0
 8007af8:	4b84      	ldr	r3, [pc, #528]	; (8007d0c <_dtoa_r+0x604>)
 8007afa:	f7f8 fbd7 	bl	80002ac <__adddf3>
 8007afe:	4605      	mov	r5, r0
 8007b00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b04:	2f00      	cmp	r7, #0
 8007b06:	d15d      	bne.n	8007bc4 <_dtoa_r+0x4bc>
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4b81      	ldr	r3, [pc, #516]	; (8007d10 <_dtoa_r+0x608>)
 8007b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b10:	f7f8 fbca 	bl	80002a8 <__aeabi_dsub>
 8007b14:	462a      	mov	r2, r5
 8007b16:	4633      	mov	r3, r6
 8007b18:	e9cd 0100 	strd	r0, r1, [sp]
 8007b1c:	f7f9 f80c 	bl	8000b38 <__aeabi_dcmpgt>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	f040 8288 	bne.w	8008036 <_dtoa_r+0x92e>
 8007b26:	462a      	mov	r2, r5
 8007b28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b30:	f7f8 ffe4 	bl	8000afc <__aeabi_dcmplt>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	f040 827c 	bne.w	8008032 <_dtoa_r+0x92a>
 8007b3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b3e:	e9cd 2300 	strd	r2, r3, [sp]
 8007b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f2c0 8150 	blt.w	8007dea <_dtoa_r+0x6e2>
 8007b4a:	f1ba 0f0e 	cmp.w	sl, #14
 8007b4e:	f300 814c 	bgt.w	8007dea <_dtoa_r+0x6e2>
 8007b52:	4b6a      	ldr	r3, [pc, #424]	; (8007cfc <_dtoa_r+0x5f4>)
 8007b54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b58:	ed93 7b00 	vldr	d7, [r3]
 8007b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b64:	f280 80d8 	bge.w	8007d18 <_dtoa_r+0x610>
 8007b68:	f1b9 0f00 	cmp.w	r9, #0
 8007b6c:	f300 80d4 	bgt.w	8007d18 <_dtoa_r+0x610>
 8007b70:	f040 825e 	bne.w	8008030 <_dtoa_r+0x928>
 8007b74:	2200      	movs	r2, #0
 8007b76:	4b66      	ldr	r3, [pc, #408]	; (8007d10 <_dtoa_r+0x608>)
 8007b78:	ec51 0b17 	vmov	r0, r1, d7
 8007b7c:	f7f8 fd4c 	bl	8000618 <__aeabi_dmul>
 8007b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b84:	f7f8 ffce 	bl	8000b24 <__aeabi_dcmpge>
 8007b88:	464f      	mov	r7, r9
 8007b8a:	464e      	mov	r6, r9
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f040 8234 	bne.w	8007ffa <_dtoa_r+0x8f2>
 8007b92:	2331      	movs	r3, #49	; 0x31
 8007b94:	f10b 0501 	add.w	r5, fp, #1
 8007b98:	f88b 3000 	strb.w	r3, [fp]
 8007b9c:	f10a 0a01 	add.w	sl, sl, #1
 8007ba0:	e22f      	b.n	8008002 <_dtoa_r+0x8fa>
 8007ba2:	07f2      	lsls	r2, r6, #31
 8007ba4:	d505      	bpl.n	8007bb2 <_dtoa_r+0x4aa>
 8007ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007baa:	f7f8 fd35 	bl	8000618 <__aeabi_dmul>
 8007bae:	3501      	adds	r5, #1
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	1076      	asrs	r6, r6, #1
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	e772      	b.n	8007a9e <_dtoa_r+0x396>
 8007bb8:	2502      	movs	r5, #2
 8007bba:	e774      	b.n	8007aa6 <_dtoa_r+0x39e>
 8007bbc:	f8cd a020 	str.w	sl, [sp, #32]
 8007bc0:	464f      	mov	r7, r9
 8007bc2:	e791      	b.n	8007ae8 <_dtoa_r+0x3e0>
 8007bc4:	4b4d      	ldr	r3, [pc, #308]	; (8007cfc <_dtoa_r+0x5f4>)
 8007bc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d047      	beq.n	8007c64 <_dtoa_r+0x55c>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	2000      	movs	r0, #0
 8007bda:	494e      	ldr	r1, [pc, #312]	; (8007d14 <_dtoa_r+0x60c>)
 8007bdc:	f7f8 fe46 	bl	800086c <__aeabi_ddiv>
 8007be0:	462a      	mov	r2, r5
 8007be2:	4633      	mov	r3, r6
 8007be4:	f7f8 fb60 	bl	80002a8 <__aeabi_dsub>
 8007be8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007bec:	465d      	mov	r5, fp
 8007bee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bf2:	f7f8 ffc1 	bl	8000b78 <__aeabi_d2iz>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	f7f8 fca4 	bl	8000544 <__aeabi_i2d>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c04:	f7f8 fb50 	bl	80002a8 <__aeabi_dsub>
 8007c08:	3630      	adds	r6, #48	; 0x30
 8007c0a:	f805 6b01 	strb.w	r6, [r5], #1
 8007c0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c12:	e9cd 0100 	strd	r0, r1, [sp]
 8007c16:	f7f8 ff71 	bl	8000afc <__aeabi_dcmplt>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d163      	bne.n	8007ce6 <_dtoa_r+0x5de>
 8007c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c22:	2000      	movs	r0, #0
 8007c24:	4937      	ldr	r1, [pc, #220]	; (8007d04 <_dtoa_r+0x5fc>)
 8007c26:	f7f8 fb3f 	bl	80002a8 <__aeabi_dsub>
 8007c2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c2e:	f7f8 ff65 	bl	8000afc <__aeabi_dcmplt>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	f040 80b7 	bne.w	8007da6 <_dtoa_r+0x69e>
 8007c38:	eba5 030b 	sub.w	r3, r5, fp
 8007c3c:	429f      	cmp	r7, r3
 8007c3e:	f77f af7c 	ble.w	8007b3a <_dtoa_r+0x432>
 8007c42:	2200      	movs	r2, #0
 8007c44:	4b30      	ldr	r3, [pc, #192]	; (8007d08 <_dtoa_r+0x600>)
 8007c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c4a:	f7f8 fce5 	bl	8000618 <__aeabi_dmul>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c54:	4b2c      	ldr	r3, [pc, #176]	; (8007d08 <_dtoa_r+0x600>)
 8007c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c5a:	f7f8 fcdd 	bl	8000618 <__aeabi_dmul>
 8007c5e:	e9cd 0100 	strd	r0, r1, [sp]
 8007c62:	e7c4      	b.n	8007bee <_dtoa_r+0x4e6>
 8007c64:	462a      	mov	r2, r5
 8007c66:	4633      	mov	r3, r6
 8007c68:	f7f8 fcd6 	bl	8000618 <__aeabi_dmul>
 8007c6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c70:	eb0b 0507 	add.w	r5, fp, r7
 8007c74:	465e      	mov	r6, fp
 8007c76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c7a:	f7f8 ff7d 	bl	8000b78 <__aeabi_d2iz>
 8007c7e:	4607      	mov	r7, r0
 8007c80:	f7f8 fc60 	bl	8000544 <__aeabi_i2d>
 8007c84:	3730      	adds	r7, #48	; 0x30
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c8e:	f7f8 fb0b 	bl	80002a8 <__aeabi_dsub>
 8007c92:	f806 7b01 	strb.w	r7, [r6], #1
 8007c96:	42ae      	cmp	r6, r5
 8007c98:	e9cd 0100 	strd	r0, r1, [sp]
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	d126      	bne.n	8007cf0 <_dtoa_r+0x5e8>
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <_dtoa_r+0x60c>)
 8007ca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ca8:	f7f8 fb00 	bl	80002ac <__adddf3>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cb4:	f7f8 ff40 	bl	8000b38 <__aeabi_dcmpgt>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d174      	bne.n	8007da6 <_dtoa_r+0x69e>
 8007cbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	4914      	ldr	r1, [pc, #80]	; (8007d14 <_dtoa_r+0x60c>)
 8007cc4:	f7f8 faf0 	bl	80002a8 <__aeabi_dsub>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cd0:	f7f8 ff14 	bl	8000afc <__aeabi_dcmplt>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f43f af30 	beq.w	8007b3a <_dtoa_r+0x432>
 8007cda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cde:	2b30      	cmp	r3, #48	; 0x30
 8007ce0:	f105 32ff 	add.w	r2, r5, #4294967295
 8007ce4:	d002      	beq.n	8007cec <_dtoa_r+0x5e4>
 8007ce6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007cea:	e04a      	b.n	8007d82 <_dtoa_r+0x67a>
 8007cec:	4615      	mov	r5, r2
 8007cee:	e7f4      	b.n	8007cda <_dtoa_r+0x5d2>
 8007cf0:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <_dtoa_r+0x600>)
 8007cf2:	f7f8 fc91 	bl	8000618 <__aeabi_dmul>
 8007cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8007cfa:	e7bc      	b.n	8007c76 <_dtoa_r+0x56e>
 8007cfc:	080094c0 	.word	0x080094c0
 8007d00:	08009498 	.word	0x08009498
 8007d04:	3ff00000 	.word	0x3ff00000
 8007d08:	40240000 	.word	0x40240000
 8007d0c:	401c0000 	.word	0x401c0000
 8007d10:	40140000 	.word	0x40140000
 8007d14:	3fe00000 	.word	0x3fe00000
 8007d18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007d1c:	465d      	mov	r5, fp
 8007d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d22:	4630      	mov	r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	f7f8 fda1 	bl	800086c <__aeabi_ddiv>
 8007d2a:	f7f8 ff25 	bl	8000b78 <__aeabi_d2iz>
 8007d2e:	4680      	mov	r8, r0
 8007d30:	f7f8 fc08 	bl	8000544 <__aeabi_i2d>
 8007d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d38:	f7f8 fc6e 	bl	8000618 <__aeabi_dmul>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007d48:	f7f8 faae 	bl	80002a8 <__aeabi_dsub>
 8007d4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007d50:	eba5 060b 	sub.w	r6, r5, fp
 8007d54:	45b1      	cmp	r9, r6
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	d139      	bne.n	8007dd0 <_dtoa_r+0x6c8>
 8007d5c:	f7f8 faa6 	bl	80002ac <__adddf3>
 8007d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d64:	4606      	mov	r6, r0
 8007d66:	460f      	mov	r7, r1
 8007d68:	f7f8 fee6 	bl	8000b38 <__aeabi_dcmpgt>
 8007d6c:	b9c8      	cbnz	r0, 8007da2 <_dtoa_r+0x69a>
 8007d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d72:	4630      	mov	r0, r6
 8007d74:	4639      	mov	r1, r7
 8007d76:	f7f8 feb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d7a:	b110      	cbz	r0, 8007d82 <_dtoa_r+0x67a>
 8007d7c:	f018 0f01 	tst.w	r8, #1
 8007d80:	d10f      	bne.n	8007da2 <_dtoa_r+0x69a>
 8007d82:	9904      	ldr	r1, [sp, #16]
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 fb8b 	bl	80084a0 <_Bfree>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d8e:	702b      	strb	r3, [r5, #0]
 8007d90:	f10a 0301 	add.w	r3, sl, #1
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8241 	beq.w	8008220 <_dtoa_r+0xb18>
 8007d9e:	601d      	str	r5, [r3, #0]
 8007da0:	e23e      	b.n	8008220 <_dtoa_r+0xb18>
 8007da2:	f8cd a020 	str.w	sl, [sp, #32]
 8007da6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007daa:	2a39      	cmp	r2, #57	; 0x39
 8007dac:	f105 33ff 	add.w	r3, r5, #4294967295
 8007db0:	d108      	bne.n	8007dc4 <_dtoa_r+0x6bc>
 8007db2:	459b      	cmp	fp, r3
 8007db4:	d10a      	bne.n	8007dcc <_dtoa_r+0x6c4>
 8007db6:	9b08      	ldr	r3, [sp, #32]
 8007db8:	3301      	adds	r3, #1
 8007dba:	9308      	str	r3, [sp, #32]
 8007dbc:	2330      	movs	r3, #48	; 0x30
 8007dbe:	f88b 3000 	strb.w	r3, [fp]
 8007dc2:	465b      	mov	r3, fp
 8007dc4:	781a      	ldrb	r2, [r3, #0]
 8007dc6:	3201      	adds	r2, #1
 8007dc8:	701a      	strb	r2, [r3, #0]
 8007dca:	e78c      	b.n	8007ce6 <_dtoa_r+0x5de>
 8007dcc:	461d      	mov	r5, r3
 8007dce:	e7ea      	b.n	8007da6 <_dtoa_r+0x69e>
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4b9b      	ldr	r3, [pc, #620]	; (8008040 <_dtoa_r+0x938>)
 8007dd4:	f7f8 fc20 	bl	8000618 <__aeabi_dmul>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4606      	mov	r6, r0
 8007dde:	460f      	mov	r7, r1
 8007de0:	f7f8 fe82 	bl	8000ae8 <__aeabi_dcmpeq>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d09a      	beq.n	8007d1e <_dtoa_r+0x616>
 8007de8:	e7cb      	b.n	8007d82 <_dtoa_r+0x67a>
 8007dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	f000 808b 	beq.w	8007f08 <_dtoa_r+0x800>
 8007df2:	9a06      	ldr	r2, [sp, #24]
 8007df4:	2a01      	cmp	r2, #1
 8007df6:	dc6e      	bgt.n	8007ed6 <_dtoa_r+0x7ce>
 8007df8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	d067      	beq.n	8007ece <_dtoa_r+0x7c6>
 8007dfe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e02:	9f07      	ldr	r7, [sp, #28]
 8007e04:	9d05      	ldr	r5, [sp, #20]
 8007e06:	9a05      	ldr	r2, [sp, #20]
 8007e08:	2101      	movs	r1, #1
 8007e0a:	441a      	add	r2, r3
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	9205      	str	r2, [sp, #20]
 8007e10:	4498      	add	r8, r3
 8007e12:	f000 fbe5 	bl	80085e0 <__i2b>
 8007e16:	4606      	mov	r6, r0
 8007e18:	2d00      	cmp	r5, #0
 8007e1a:	dd0c      	ble.n	8007e36 <_dtoa_r+0x72e>
 8007e1c:	f1b8 0f00 	cmp.w	r8, #0
 8007e20:	dd09      	ble.n	8007e36 <_dtoa_r+0x72e>
 8007e22:	4545      	cmp	r5, r8
 8007e24:	9a05      	ldr	r2, [sp, #20]
 8007e26:	462b      	mov	r3, r5
 8007e28:	bfa8      	it	ge
 8007e2a:	4643      	movge	r3, r8
 8007e2c:	1ad2      	subs	r2, r2, r3
 8007e2e:	9205      	str	r2, [sp, #20]
 8007e30:	1aed      	subs	r5, r5, r3
 8007e32:	eba8 0803 	sub.w	r8, r8, r3
 8007e36:	9b07      	ldr	r3, [sp, #28]
 8007e38:	b1eb      	cbz	r3, 8007e76 <_dtoa_r+0x76e>
 8007e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d067      	beq.n	8007f10 <_dtoa_r+0x808>
 8007e40:	b18f      	cbz	r7, 8007e66 <_dtoa_r+0x75e>
 8007e42:	4631      	mov	r1, r6
 8007e44:	463a      	mov	r2, r7
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 fc6a 	bl	8008720 <__pow5mult>
 8007e4c:	9a04      	ldr	r2, [sp, #16]
 8007e4e:	4601      	mov	r1, r0
 8007e50:	4606      	mov	r6, r0
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fbcd 	bl	80085f2 <__multiply>
 8007e58:	9904      	ldr	r1, [sp, #16]
 8007e5a:	9008      	str	r0, [sp, #32]
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 fb1f 	bl	80084a0 <_Bfree>
 8007e62:	9b08      	ldr	r3, [sp, #32]
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	9b07      	ldr	r3, [sp, #28]
 8007e68:	1bda      	subs	r2, r3, r7
 8007e6a:	d004      	beq.n	8007e76 <_dtoa_r+0x76e>
 8007e6c:	9904      	ldr	r1, [sp, #16]
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 fc56 	bl	8008720 <__pow5mult>
 8007e74:	9004      	str	r0, [sp, #16]
 8007e76:	2101      	movs	r1, #1
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 fbb1 	bl	80085e0 <__i2b>
 8007e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e80:	4607      	mov	r7, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 81d0 	beq.w	8008228 <_dtoa_r+0xb20>
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 fc47 	bl	8008720 <__pow5mult>
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	4607      	mov	r7, r0
 8007e98:	dc40      	bgt.n	8007f1c <_dtoa_r+0x814>
 8007e9a:	9b00      	ldr	r3, [sp, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d139      	bne.n	8007f14 <_dtoa_r+0x80c>
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d136      	bne.n	8007f18 <_dtoa_r+0x810>
 8007eaa:	9b01      	ldr	r3, [sp, #4]
 8007eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eb0:	0d1b      	lsrs	r3, r3, #20
 8007eb2:	051b      	lsls	r3, r3, #20
 8007eb4:	b12b      	cbz	r3, 8007ec2 <_dtoa_r+0x7ba>
 8007eb6:	9b05      	ldr	r3, [sp, #20]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	9305      	str	r3, [sp, #20]
 8007ebc:	f108 0801 	add.w	r8, r8, #1
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	9307      	str	r3, [sp, #28]
 8007ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d12a      	bne.n	8007f20 <_dtoa_r+0x818>
 8007eca:	2001      	movs	r0, #1
 8007ecc:	e030      	b.n	8007f30 <_dtoa_r+0x828>
 8007ece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ed0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ed4:	e795      	b.n	8007e02 <_dtoa_r+0x6fa>
 8007ed6:	9b07      	ldr	r3, [sp, #28]
 8007ed8:	f109 37ff 	add.w	r7, r9, #4294967295
 8007edc:	42bb      	cmp	r3, r7
 8007ede:	bfbf      	itttt	lt
 8007ee0:	9b07      	ldrlt	r3, [sp, #28]
 8007ee2:	9707      	strlt	r7, [sp, #28]
 8007ee4:	1afa      	sublt	r2, r7, r3
 8007ee6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007ee8:	bfbb      	ittet	lt
 8007eea:	189b      	addlt	r3, r3, r2
 8007eec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007eee:	1bdf      	subge	r7, r3, r7
 8007ef0:	2700      	movlt	r7, #0
 8007ef2:	f1b9 0f00 	cmp.w	r9, #0
 8007ef6:	bfb5      	itete	lt
 8007ef8:	9b05      	ldrlt	r3, [sp, #20]
 8007efa:	9d05      	ldrge	r5, [sp, #20]
 8007efc:	eba3 0509 	sublt.w	r5, r3, r9
 8007f00:	464b      	movge	r3, r9
 8007f02:	bfb8      	it	lt
 8007f04:	2300      	movlt	r3, #0
 8007f06:	e77e      	b.n	8007e06 <_dtoa_r+0x6fe>
 8007f08:	9f07      	ldr	r7, [sp, #28]
 8007f0a:	9d05      	ldr	r5, [sp, #20]
 8007f0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007f0e:	e783      	b.n	8007e18 <_dtoa_r+0x710>
 8007f10:	9a07      	ldr	r2, [sp, #28]
 8007f12:	e7ab      	b.n	8007e6c <_dtoa_r+0x764>
 8007f14:	2300      	movs	r3, #0
 8007f16:	e7d4      	b.n	8007ec2 <_dtoa_r+0x7ba>
 8007f18:	9b00      	ldr	r3, [sp, #0]
 8007f1a:	e7d2      	b.n	8007ec2 <_dtoa_r+0x7ba>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007f26:	6918      	ldr	r0, [r3, #16]
 8007f28:	f000 fb0c 	bl	8008544 <__hi0bits>
 8007f2c:	f1c0 0020 	rsb	r0, r0, #32
 8007f30:	4440      	add	r0, r8
 8007f32:	f010 001f 	ands.w	r0, r0, #31
 8007f36:	d047      	beq.n	8007fc8 <_dtoa_r+0x8c0>
 8007f38:	f1c0 0320 	rsb	r3, r0, #32
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	dd3b      	ble.n	8007fb8 <_dtoa_r+0x8b0>
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	f1c0 001c 	rsb	r0, r0, #28
 8007f46:	4403      	add	r3, r0
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	4405      	add	r5, r0
 8007f4c:	4480      	add	r8, r0
 8007f4e:	9b05      	ldr	r3, [sp, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	dd05      	ble.n	8007f60 <_dtoa_r+0x858>
 8007f54:	461a      	mov	r2, r3
 8007f56:	9904      	ldr	r1, [sp, #16]
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fc2f 	bl	80087bc <__lshift>
 8007f5e:	9004      	str	r0, [sp, #16]
 8007f60:	f1b8 0f00 	cmp.w	r8, #0
 8007f64:	dd05      	ble.n	8007f72 <_dtoa_r+0x86a>
 8007f66:	4639      	mov	r1, r7
 8007f68:	4642      	mov	r2, r8
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fc26 	bl	80087bc <__lshift>
 8007f70:	4607      	mov	r7, r0
 8007f72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f74:	b353      	cbz	r3, 8007fcc <_dtoa_r+0x8c4>
 8007f76:	4639      	mov	r1, r7
 8007f78:	9804      	ldr	r0, [sp, #16]
 8007f7a:	f000 fc73 	bl	8008864 <__mcmp>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	da24      	bge.n	8007fcc <_dtoa_r+0x8c4>
 8007f82:	2300      	movs	r3, #0
 8007f84:	220a      	movs	r2, #10
 8007f86:	9904      	ldr	r1, [sp, #16]
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 faa0 	bl	80084ce <__multadd>
 8007f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f90:	9004      	str	r0, [sp, #16]
 8007f92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 814d 	beq.w	8008236 <_dtoa_r+0xb2e>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	220a      	movs	r2, #10
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fa93 	bl	80084ce <__multadd>
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	4606      	mov	r6, r0
 8007fae:	dc4f      	bgt.n	8008050 <_dtoa_r+0x948>
 8007fb0:	9b06      	ldr	r3, [sp, #24]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	dd4c      	ble.n	8008050 <_dtoa_r+0x948>
 8007fb6:	e011      	b.n	8007fdc <_dtoa_r+0x8d4>
 8007fb8:	d0c9      	beq.n	8007f4e <_dtoa_r+0x846>
 8007fba:	9a05      	ldr	r2, [sp, #20]
 8007fbc:	331c      	adds	r3, #28
 8007fbe:	441a      	add	r2, r3
 8007fc0:	9205      	str	r2, [sp, #20]
 8007fc2:	441d      	add	r5, r3
 8007fc4:	4498      	add	r8, r3
 8007fc6:	e7c2      	b.n	8007f4e <_dtoa_r+0x846>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	e7f6      	b.n	8007fba <_dtoa_r+0x8b2>
 8007fcc:	f1b9 0f00 	cmp.w	r9, #0
 8007fd0:	dc38      	bgt.n	8008044 <_dtoa_r+0x93c>
 8007fd2:	9b06      	ldr	r3, [sp, #24]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	dd35      	ble.n	8008044 <_dtoa_r+0x93c>
 8007fd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fdc:	9b02      	ldr	r3, [sp, #8]
 8007fde:	b963      	cbnz	r3, 8007ffa <_dtoa_r+0x8f2>
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	2205      	movs	r2, #5
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f000 fa72 	bl	80084ce <__multadd>
 8007fea:	4601      	mov	r1, r0
 8007fec:	4607      	mov	r7, r0
 8007fee:	9804      	ldr	r0, [sp, #16]
 8007ff0:	f000 fc38 	bl	8008864 <__mcmp>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	f73f adcc 	bgt.w	8007b92 <_dtoa_r+0x48a>
 8007ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ffc:	465d      	mov	r5, fp
 8007ffe:	ea6f 0a03 	mvn.w	sl, r3
 8008002:	f04f 0900 	mov.w	r9, #0
 8008006:	4639      	mov	r1, r7
 8008008:	4620      	mov	r0, r4
 800800a:	f000 fa49 	bl	80084a0 <_Bfree>
 800800e:	2e00      	cmp	r6, #0
 8008010:	f43f aeb7 	beq.w	8007d82 <_dtoa_r+0x67a>
 8008014:	f1b9 0f00 	cmp.w	r9, #0
 8008018:	d005      	beq.n	8008026 <_dtoa_r+0x91e>
 800801a:	45b1      	cmp	r9, r6
 800801c:	d003      	beq.n	8008026 <_dtoa_r+0x91e>
 800801e:	4649      	mov	r1, r9
 8008020:	4620      	mov	r0, r4
 8008022:	f000 fa3d 	bl	80084a0 <_Bfree>
 8008026:	4631      	mov	r1, r6
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fa39 	bl	80084a0 <_Bfree>
 800802e:	e6a8      	b.n	8007d82 <_dtoa_r+0x67a>
 8008030:	2700      	movs	r7, #0
 8008032:	463e      	mov	r6, r7
 8008034:	e7e1      	b.n	8007ffa <_dtoa_r+0x8f2>
 8008036:	f8dd a020 	ldr.w	sl, [sp, #32]
 800803a:	463e      	mov	r6, r7
 800803c:	e5a9      	b.n	8007b92 <_dtoa_r+0x48a>
 800803e:	bf00      	nop
 8008040:	40240000 	.word	0x40240000
 8008044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008046:	f8cd 9008 	str.w	r9, [sp, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 80fa 	beq.w	8008244 <_dtoa_r+0xb3c>
 8008050:	2d00      	cmp	r5, #0
 8008052:	dd05      	ble.n	8008060 <_dtoa_r+0x958>
 8008054:	4631      	mov	r1, r6
 8008056:	462a      	mov	r2, r5
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fbaf 	bl	80087bc <__lshift>
 800805e:	4606      	mov	r6, r0
 8008060:	9b07      	ldr	r3, [sp, #28]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d04c      	beq.n	8008100 <_dtoa_r+0x9f8>
 8008066:	6871      	ldr	r1, [r6, #4]
 8008068:	4620      	mov	r0, r4
 800806a:	f000 f9e5 	bl	8008438 <_Balloc>
 800806e:	6932      	ldr	r2, [r6, #16]
 8008070:	3202      	adds	r2, #2
 8008072:	4605      	mov	r5, r0
 8008074:	0092      	lsls	r2, r2, #2
 8008076:	f106 010c 	add.w	r1, r6, #12
 800807a:	300c      	adds	r0, #12
 800807c:	f7fe fe30 	bl	8006ce0 <memcpy>
 8008080:	2201      	movs	r2, #1
 8008082:	4629      	mov	r1, r5
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fb99 	bl	80087bc <__lshift>
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	f8cd b014 	str.w	fp, [sp, #20]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	46b1      	mov	r9, r6
 8008096:	9307      	str	r3, [sp, #28]
 8008098:	4606      	mov	r6, r0
 800809a:	4639      	mov	r1, r7
 800809c:	9804      	ldr	r0, [sp, #16]
 800809e:	f7ff faa7 	bl	80075f0 <quorem>
 80080a2:	4649      	mov	r1, r9
 80080a4:	4605      	mov	r5, r0
 80080a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80080aa:	9804      	ldr	r0, [sp, #16]
 80080ac:	f000 fbda 	bl	8008864 <__mcmp>
 80080b0:	4632      	mov	r2, r6
 80080b2:	9000      	str	r0, [sp, #0]
 80080b4:	4639      	mov	r1, r7
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 fbee 	bl	8008898 <__mdiff>
 80080bc:	68c3      	ldr	r3, [r0, #12]
 80080be:	4602      	mov	r2, r0
 80080c0:	bb03      	cbnz	r3, 8008104 <_dtoa_r+0x9fc>
 80080c2:	4601      	mov	r1, r0
 80080c4:	9008      	str	r0, [sp, #32]
 80080c6:	9804      	ldr	r0, [sp, #16]
 80080c8:	f000 fbcc 	bl	8008864 <__mcmp>
 80080cc:	9a08      	ldr	r2, [sp, #32]
 80080ce:	4603      	mov	r3, r0
 80080d0:	4611      	mov	r1, r2
 80080d2:	4620      	mov	r0, r4
 80080d4:	9308      	str	r3, [sp, #32]
 80080d6:	f000 f9e3 	bl	80084a0 <_Bfree>
 80080da:	9b08      	ldr	r3, [sp, #32]
 80080dc:	b9a3      	cbnz	r3, 8008108 <_dtoa_r+0xa00>
 80080de:	9a06      	ldr	r2, [sp, #24]
 80080e0:	b992      	cbnz	r2, 8008108 <_dtoa_r+0xa00>
 80080e2:	9a07      	ldr	r2, [sp, #28]
 80080e4:	b982      	cbnz	r2, 8008108 <_dtoa_r+0xa00>
 80080e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80080ea:	d029      	beq.n	8008140 <_dtoa_r+0xa38>
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dd01      	ble.n	80080f6 <_dtoa_r+0x9ee>
 80080f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80080f6:	9b05      	ldr	r3, [sp, #20]
 80080f8:	1c5d      	adds	r5, r3, #1
 80080fa:	f883 8000 	strb.w	r8, [r3]
 80080fe:	e782      	b.n	8008006 <_dtoa_r+0x8fe>
 8008100:	4630      	mov	r0, r6
 8008102:	e7c2      	b.n	800808a <_dtoa_r+0x982>
 8008104:	2301      	movs	r3, #1
 8008106:	e7e3      	b.n	80080d0 <_dtoa_r+0x9c8>
 8008108:	9a00      	ldr	r2, [sp, #0]
 800810a:	2a00      	cmp	r2, #0
 800810c:	db04      	blt.n	8008118 <_dtoa_r+0xa10>
 800810e:	d125      	bne.n	800815c <_dtoa_r+0xa54>
 8008110:	9a06      	ldr	r2, [sp, #24]
 8008112:	bb1a      	cbnz	r2, 800815c <_dtoa_r+0xa54>
 8008114:	9a07      	ldr	r2, [sp, #28]
 8008116:	bb0a      	cbnz	r2, 800815c <_dtoa_r+0xa54>
 8008118:	2b00      	cmp	r3, #0
 800811a:	ddec      	ble.n	80080f6 <_dtoa_r+0x9ee>
 800811c:	2201      	movs	r2, #1
 800811e:	9904      	ldr	r1, [sp, #16]
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fb4b 	bl	80087bc <__lshift>
 8008126:	4639      	mov	r1, r7
 8008128:	9004      	str	r0, [sp, #16]
 800812a:	f000 fb9b 	bl	8008864 <__mcmp>
 800812e:	2800      	cmp	r0, #0
 8008130:	dc03      	bgt.n	800813a <_dtoa_r+0xa32>
 8008132:	d1e0      	bne.n	80080f6 <_dtoa_r+0x9ee>
 8008134:	f018 0f01 	tst.w	r8, #1
 8008138:	d0dd      	beq.n	80080f6 <_dtoa_r+0x9ee>
 800813a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800813e:	d1d8      	bne.n	80080f2 <_dtoa_r+0x9ea>
 8008140:	9b05      	ldr	r3, [sp, #20]
 8008142:	9a05      	ldr	r2, [sp, #20]
 8008144:	1c5d      	adds	r5, r3, #1
 8008146:	2339      	movs	r3, #57	; 0x39
 8008148:	7013      	strb	r3, [r2, #0]
 800814a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800814e:	2b39      	cmp	r3, #57	; 0x39
 8008150:	f105 32ff 	add.w	r2, r5, #4294967295
 8008154:	d04f      	beq.n	80081f6 <_dtoa_r+0xaee>
 8008156:	3301      	adds	r3, #1
 8008158:	7013      	strb	r3, [r2, #0]
 800815a:	e754      	b.n	8008006 <_dtoa_r+0x8fe>
 800815c:	9a05      	ldr	r2, [sp, #20]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f102 0501 	add.w	r5, r2, #1
 8008164:	dd06      	ble.n	8008174 <_dtoa_r+0xa6c>
 8008166:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800816a:	d0e9      	beq.n	8008140 <_dtoa_r+0xa38>
 800816c:	f108 0801 	add.w	r8, r8, #1
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	e7c2      	b.n	80080fa <_dtoa_r+0x9f2>
 8008174:	9a02      	ldr	r2, [sp, #8]
 8008176:	f805 8c01 	strb.w	r8, [r5, #-1]
 800817a:	eba5 030b 	sub.w	r3, r5, fp
 800817e:	4293      	cmp	r3, r2
 8008180:	d021      	beq.n	80081c6 <_dtoa_r+0xabe>
 8008182:	2300      	movs	r3, #0
 8008184:	220a      	movs	r2, #10
 8008186:	9904      	ldr	r1, [sp, #16]
 8008188:	4620      	mov	r0, r4
 800818a:	f000 f9a0 	bl	80084ce <__multadd>
 800818e:	45b1      	cmp	r9, r6
 8008190:	9004      	str	r0, [sp, #16]
 8008192:	f04f 0300 	mov.w	r3, #0
 8008196:	f04f 020a 	mov.w	r2, #10
 800819a:	4649      	mov	r1, r9
 800819c:	4620      	mov	r0, r4
 800819e:	d105      	bne.n	80081ac <_dtoa_r+0xaa4>
 80081a0:	f000 f995 	bl	80084ce <__multadd>
 80081a4:	4681      	mov	r9, r0
 80081a6:	4606      	mov	r6, r0
 80081a8:	9505      	str	r5, [sp, #20]
 80081aa:	e776      	b.n	800809a <_dtoa_r+0x992>
 80081ac:	f000 f98f 	bl	80084ce <__multadd>
 80081b0:	4631      	mov	r1, r6
 80081b2:	4681      	mov	r9, r0
 80081b4:	2300      	movs	r3, #0
 80081b6:	220a      	movs	r2, #10
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 f988 	bl	80084ce <__multadd>
 80081be:	4606      	mov	r6, r0
 80081c0:	e7f2      	b.n	80081a8 <_dtoa_r+0xaa0>
 80081c2:	f04f 0900 	mov.w	r9, #0
 80081c6:	2201      	movs	r2, #1
 80081c8:	9904      	ldr	r1, [sp, #16]
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 faf6 	bl	80087bc <__lshift>
 80081d0:	4639      	mov	r1, r7
 80081d2:	9004      	str	r0, [sp, #16]
 80081d4:	f000 fb46 	bl	8008864 <__mcmp>
 80081d8:	2800      	cmp	r0, #0
 80081da:	dcb6      	bgt.n	800814a <_dtoa_r+0xa42>
 80081dc:	d102      	bne.n	80081e4 <_dtoa_r+0xadc>
 80081de:	f018 0f01 	tst.w	r8, #1
 80081e2:	d1b2      	bne.n	800814a <_dtoa_r+0xa42>
 80081e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081e8:	2b30      	cmp	r3, #48	; 0x30
 80081ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80081ee:	f47f af0a 	bne.w	8008006 <_dtoa_r+0x8fe>
 80081f2:	4615      	mov	r5, r2
 80081f4:	e7f6      	b.n	80081e4 <_dtoa_r+0xadc>
 80081f6:	4593      	cmp	fp, r2
 80081f8:	d105      	bne.n	8008206 <_dtoa_r+0xafe>
 80081fa:	2331      	movs	r3, #49	; 0x31
 80081fc:	f10a 0a01 	add.w	sl, sl, #1
 8008200:	f88b 3000 	strb.w	r3, [fp]
 8008204:	e6ff      	b.n	8008006 <_dtoa_r+0x8fe>
 8008206:	4615      	mov	r5, r2
 8008208:	e79f      	b.n	800814a <_dtoa_r+0xa42>
 800820a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008270 <_dtoa_r+0xb68>
 800820e:	e007      	b.n	8008220 <_dtoa_r+0xb18>
 8008210:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008212:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008274 <_dtoa_r+0xb6c>
 8008216:	b11b      	cbz	r3, 8008220 <_dtoa_r+0xb18>
 8008218:	f10b 0308 	add.w	r3, fp, #8
 800821c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	4658      	mov	r0, fp
 8008222:	b017      	add	sp, #92	; 0x5c
 8008224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008228:	9b06      	ldr	r3, [sp, #24]
 800822a:	2b01      	cmp	r3, #1
 800822c:	f77f ae35 	ble.w	8007e9a <_dtoa_r+0x792>
 8008230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008232:	9307      	str	r3, [sp, #28]
 8008234:	e649      	b.n	8007eca <_dtoa_r+0x7c2>
 8008236:	9b02      	ldr	r3, [sp, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	dc03      	bgt.n	8008244 <_dtoa_r+0xb3c>
 800823c:	9b06      	ldr	r3, [sp, #24]
 800823e:	2b02      	cmp	r3, #2
 8008240:	f73f aecc 	bgt.w	8007fdc <_dtoa_r+0x8d4>
 8008244:	465d      	mov	r5, fp
 8008246:	4639      	mov	r1, r7
 8008248:	9804      	ldr	r0, [sp, #16]
 800824a:	f7ff f9d1 	bl	80075f0 <quorem>
 800824e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008252:	f805 8b01 	strb.w	r8, [r5], #1
 8008256:	9a02      	ldr	r2, [sp, #8]
 8008258:	eba5 030b 	sub.w	r3, r5, fp
 800825c:	429a      	cmp	r2, r3
 800825e:	ddb0      	ble.n	80081c2 <_dtoa_r+0xaba>
 8008260:	2300      	movs	r3, #0
 8008262:	220a      	movs	r2, #10
 8008264:	9904      	ldr	r1, [sp, #16]
 8008266:	4620      	mov	r0, r4
 8008268:	f000 f931 	bl	80084ce <__multadd>
 800826c:	9004      	str	r0, [sp, #16]
 800826e:	e7ea      	b.n	8008246 <_dtoa_r+0xb3e>
 8008270:	08009400 	.word	0x08009400
 8008274:	08009424 	.word	0x08009424

08008278 <std>:
 8008278:	2300      	movs	r3, #0
 800827a:	b510      	push	{r4, lr}
 800827c:	4604      	mov	r4, r0
 800827e:	e9c0 3300 	strd	r3, r3, [r0]
 8008282:	6083      	str	r3, [r0, #8]
 8008284:	8181      	strh	r1, [r0, #12]
 8008286:	6643      	str	r3, [r0, #100]	; 0x64
 8008288:	81c2      	strh	r2, [r0, #14]
 800828a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800828e:	6183      	str	r3, [r0, #24]
 8008290:	4619      	mov	r1, r3
 8008292:	2208      	movs	r2, #8
 8008294:	305c      	adds	r0, #92	; 0x5c
 8008296:	f7fe fd2e 	bl	8006cf6 <memset>
 800829a:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <std+0x38>)
 800829c:	6263      	str	r3, [r4, #36]	; 0x24
 800829e:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <std+0x3c>)
 80082a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80082a2:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <std+0x40>)
 80082a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082a6:	4b05      	ldr	r3, [pc, #20]	; (80082bc <std+0x44>)
 80082a8:	6224      	str	r4, [r4, #32]
 80082aa:	6323      	str	r3, [r4, #48]	; 0x30
 80082ac:	bd10      	pop	{r4, pc}
 80082ae:	bf00      	nop
 80082b0:	08008dfd 	.word	0x08008dfd
 80082b4:	08008e1f 	.word	0x08008e1f
 80082b8:	08008e57 	.word	0x08008e57
 80082bc:	08008e7b 	.word	0x08008e7b

080082c0 <_cleanup_r>:
 80082c0:	4901      	ldr	r1, [pc, #4]	; (80082c8 <_cleanup_r+0x8>)
 80082c2:	f000 b885 	b.w	80083d0 <_fwalk_reent>
 80082c6:	bf00      	nop
 80082c8:	08009155 	.word	0x08009155

080082cc <__sfmoreglue>:
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	1e4a      	subs	r2, r1, #1
 80082d0:	2568      	movs	r5, #104	; 0x68
 80082d2:	4355      	muls	r5, r2
 80082d4:	460e      	mov	r6, r1
 80082d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082da:	f000 fbe5 	bl	8008aa8 <_malloc_r>
 80082de:	4604      	mov	r4, r0
 80082e0:	b140      	cbz	r0, 80082f4 <__sfmoreglue+0x28>
 80082e2:	2100      	movs	r1, #0
 80082e4:	e9c0 1600 	strd	r1, r6, [r0]
 80082e8:	300c      	adds	r0, #12
 80082ea:	60a0      	str	r0, [r4, #8]
 80082ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082f0:	f7fe fd01 	bl	8006cf6 <memset>
 80082f4:	4620      	mov	r0, r4
 80082f6:	bd70      	pop	{r4, r5, r6, pc}

080082f8 <__sinit>:
 80082f8:	6983      	ldr	r3, [r0, #24]
 80082fa:	b510      	push	{r4, lr}
 80082fc:	4604      	mov	r4, r0
 80082fe:	bb33      	cbnz	r3, 800834e <__sinit+0x56>
 8008300:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008304:	6503      	str	r3, [r0, #80]	; 0x50
 8008306:	4b12      	ldr	r3, [pc, #72]	; (8008350 <__sinit+0x58>)
 8008308:	4a12      	ldr	r2, [pc, #72]	; (8008354 <__sinit+0x5c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6282      	str	r2, [r0, #40]	; 0x28
 800830e:	4298      	cmp	r0, r3
 8008310:	bf04      	itt	eq
 8008312:	2301      	moveq	r3, #1
 8008314:	6183      	streq	r3, [r0, #24]
 8008316:	f000 f81f 	bl	8008358 <__sfp>
 800831a:	6060      	str	r0, [r4, #4]
 800831c:	4620      	mov	r0, r4
 800831e:	f000 f81b 	bl	8008358 <__sfp>
 8008322:	60a0      	str	r0, [r4, #8]
 8008324:	4620      	mov	r0, r4
 8008326:	f000 f817 	bl	8008358 <__sfp>
 800832a:	2200      	movs	r2, #0
 800832c:	60e0      	str	r0, [r4, #12]
 800832e:	2104      	movs	r1, #4
 8008330:	6860      	ldr	r0, [r4, #4]
 8008332:	f7ff ffa1 	bl	8008278 <std>
 8008336:	2201      	movs	r2, #1
 8008338:	2109      	movs	r1, #9
 800833a:	68a0      	ldr	r0, [r4, #8]
 800833c:	f7ff ff9c 	bl	8008278 <std>
 8008340:	2202      	movs	r2, #2
 8008342:	2112      	movs	r1, #18
 8008344:	68e0      	ldr	r0, [r4, #12]
 8008346:	f7ff ff97 	bl	8008278 <std>
 800834a:	2301      	movs	r3, #1
 800834c:	61a3      	str	r3, [r4, #24]
 800834e:	bd10      	pop	{r4, pc}
 8008350:	080093ec 	.word	0x080093ec
 8008354:	080082c1 	.word	0x080082c1

08008358 <__sfp>:
 8008358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835a:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <__sfp+0x70>)
 800835c:	681e      	ldr	r6, [r3, #0]
 800835e:	69b3      	ldr	r3, [r6, #24]
 8008360:	4607      	mov	r7, r0
 8008362:	b913      	cbnz	r3, 800836a <__sfp+0x12>
 8008364:	4630      	mov	r0, r6
 8008366:	f7ff ffc7 	bl	80082f8 <__sinit>
 800836a:	3648      	adds	r6, #72	; 0x48
 800836c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008370:	3b01      	subs	r3, #1
 8008372:	d503      	bpl.n	800837c <__sfp+0x24>
 8008374:	6833      	ldr	r3, [r6, #0]
 8008376:	b133      	cbz	r3, 8008386 <__sfp+0x2e>
 8008378:	6836      	ldr	r6, [r6, #0]
 800837a:	e7f7      	b.n	800836c <__sfp+0x14>
 800837c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008380:	b16d      	cbz	r5, 800839e <__sfp+0x46>
 8008382:	3468      	adds	r4, #104	; 0x68
 8008384:	e7f4      	b.n	8008370 <__sfp+0x18>
 8008386:	2104      	movs	r1, #4
 8008388:	4638      	mov	r0, r7
 800838a:	f7ff ff9f 	bl	80082cc <__sfmoreglue>
 800838e:	6030      	str	r0, [r6, #0]
 8008390:	2800      	cmp	r0, #0
 8008392:	d1f1      	bne.n	8008378 <__sfp+0x20>
 8008394:	230c      	movs	r3, #12
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	4604      	mov	r4, r0
 800839a:	4620      	mov	r0, r4
 800839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800839e:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <__sfp+0x74>)
 80083a0:	6665      	str	r5, [r4, #100]	; 0x64
 80083a2:	e9c4 5500 	strd	r5, r5, [r4]
 80083a6:	60a5      	str	r5, [r4, #8]
 80083a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80083ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80083b0:	2208      	movs	r2, #8
 80083b2:	4629      	mov	r1, r5
 80083b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083b8:	f7fe fc9d 	bl	8006cf6 <memset>
 80083bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083c4:	e7e9      	b.n	800839a <__sfp+0x42>
 80083c6:	bf00      	nop
 80083c8:	080093ec 	.word	0x080093ec
 80083cc:	ffff0001 	.word	0xffff0001

080083d0 <_fwalk_reent>:
 80083d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d4:	4680      	mov	r8, r0
 80083d6:	4689      	mov	r9, r1
 80083d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083dc:	2600      	movs	r6, #0
 80083de:	b914      	cbnz	r4, 80083e6 <_fwalk_reent+0x16>
 80083e0:	4630      	mov	r0, r6
 80083e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80083ea:	3f01      	subs	r7, #1
 80083ec:	d501      	bpl.n	80083f2 <_fwalk_reent+0x22>
 80083ee:	6824      	ldr	r4, [r4, #0]
 80083f0:	e7f5      	b.n	80083de <_fwalk_reent+0xe>
 80083f2:	89ab      	ldrh	r3, [r5, #12]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d907      	bls.n	8008408 <_fwalk_reent+0x38>
 80083f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083fc:	3301      	adds	r3, #1
 80083fe:	d003      	beq.n	8008408 <_fwalk_reent+0x38>
 8008400:	4629      	mov	r1, r5
 8008402:	4640      	mov	r0, r8
 8008404:	47c8      	blx	r9
 8008406:	4306      	orrs	r6, r0
 8008408:	3568      	adds	r5, #104	; 0x68
 800840a:	e7ee      	b.n	80083ea <_fwalk_reent+0x1a>

0800840c <_localeconv_r>:
 800840c:	4b04      	ldr	r3, [pc, #16]	; (8008420 <_localeconv_r+0x14>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6a18      	ldr	r0, [r3, #32]
 8008412:	4b04      	ldr	r3, [pc, #16]	; (8008424 <_localeconv_r+0x18>)
 8008414:	2800      	cmp	r0, #0
 8008416:	bf08      	it	eq
 8008418:	4618      	moveq	r0, r3
 800841a:	30f0      	adds	r0, #240	; 0xf0
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	20000010 	.word	0x20000010
 8008424:	20000074 	.word	0x20000074

08008428 <malloc>:
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <malloc+0xc>)
 800842a:	4601      	mov	r1, r0
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f000 bb3b 	b.w	8008aa8 <_malloc_r>
 8008432:	bf00      	nop
 8008434:	20000010 	.word	0x20000010

08008438 <_Balloc>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800843c:	4604      	mov	r4, r0
 800843e:	460e      	mov	r6, r1
 8008440:	b93d      	cbnz	r5, 8008452 <_Balloc+0x1a>
 8008442:	2010      	movs	r0, #16
 8008444:	f7ff fff0 	bl	8008428 <malloc>
 8008448:	6260      	str	r0, [r4, #36]	; 0x24
 800844a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800844e:	6005      	str	r5, [r0, #0]
 8008450:	60c5      	str	r5, [r0, #12]
 8008452:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008454:	68eb      	ldr	r3, [r5, #12]
 8008456:	b183      	cbz	r3, 800847a <_Balloc+0x42>
 8008458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008460:	b9b8      	cbnz	r0, 8008492 <_Balloc+0x5a>
 8008462:	2101      	movs	r1, #1
 8008464:	fa01 f506 	lsl.w	r5, r1, r6
 8008468:	1d6a      	adds	r2, r5, #5
 800846a:	0092      	lsls	r2, r2, #2
 800846c:	4620      	mov	r0, r4
 800846e:	f000 fabf 	bl	80089f0 <_calloc_r>
 8008472:	b160      	cbz	r0, 800848e <_Balloc+0x56>
 8008474:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008478:	e00e      	b.n	8008498 <_Balloc+0x60>
 800847a:	2221      	movs	r2, #33	; 0x21
 800847c:	2104      	movs	r1, #4
 800847e:	4620      	mov	r0, r4
 8008480:	f000 fab6 	bl	80089f0 <_calloc_r>
 8008484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008486:	60e8      	str	r0, [r5, #12]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e4      	bne.n	8008458 <_Balloc+0x20>
 800848e:	2000      	movs	r0, #0
 8008490:	bd70      	pop	{r4, r5, r6, pc}
 8008492:	6802      	ldr	r2, [r0, #0]
 8008494:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008498:	2300      	movs	r3, #0
 800849a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800849e:	e7f7      	b.n	8008490 <_Balloc+0x58>

080084a0 <_Bfree>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80084a4:	4606      	mov	r6, r0
 80084a6:	460d      	mov	r5, r1
 80084a8:	b93c      	cbnz	r4, 80084ba <_Bfree+0x1a>
 80084aa:	2010      	movs	r0, #16
 80084ac:	f7ff ffbc 	bl	8008428 <malloc>
 80084b0:	6270      	str	r0, [r6, #36]	; 0x24
 80084b2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084b6:	6004      	str	r4, [r0, #0]
 80084b8:	60c4      	str	r4, [r0, #12]
 80084ba:	b13d      	cbz	r5, 80084cc <_Bfree+0x2c>
 80084bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80084be:	686a      	ldr	r2, [r5, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084c6:	6029      	str	r1, [r5, #0]
 80084c8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80084cc:	bd70      	pop	{r4, r5, r6, pc}

080084ce <__multadd>:
 80084ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d2:	690d      	ldr	r5, [r1, #16]
 80084d4:	461f      	mov	r7, r3
 80084d6:	4606      	mov	r6, r0
 80084d8:	460c      	mov	r4, r1
 80084da:	f101 0c14 	add.w	ip, r1, #20
 80084de:	2300      	movs	r3, #0
 80084e0:	f8dc 0000 	ldr.w	r0, [ip]
 80084e4:	b281      	uxth	r1, r0
 80084e6:	fb02 7101 	mla	r1, r2, r1, r7
 80084ea:	0c0f      	lsrs	r7, r1, #16
 80084ec:	0c00      	lsrs	r0, r0, #16
 80084ee:	fb02 7000 	mla	r0, r2, r0, r7
 80084f2:	b289      	uxth	r1, r1
 80084f4:	3301      	adds	r3, #1
 80084f6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80084fa:	429d      	cmp	r5, r3
 80084fc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008500:	f84c 1b04 	str.w	r1, [ip], #4
 8008504:	dcec      	bgt.n	80084e0 <__multadd+0x12>
 8008506:	b1d7      	cbz	r7, 800853e <__multadd+0x70>
 8008508:	68a3      	ldr	r3, [r4, #8]
 800850a:	42ab      	cmp	r3, r5
 800850c:	dc12      	bgt.n	8008534 <__multadd+0x66>
 800850e:	6861      	ldr	r1, [r4, #4]
 8008510:	4630      	mov	r0, r6
 8008512:	3101      	adds	r1, #1
 8008514:	f7ff ff90 	bl	8008438 <_Balloc>
 8008518:	6922      	ldr	r2, [r4, #16]
 800851a:	3202      	adds	r2, #2
 800851c:	f104 010c 	add.w	r1, r4, #12
 8008520:	4680      	mov	r8, r0
 8008522:	0092      	lsls	r2, r2, #2
 8008524:	300c      	adds	r0, #12
 8008526:	f7fe fbdb 	bl	8006ce0 <memcpy>
 800852a:	4621      	mov	r1, r4
 800852c:	4630      	mov	r0, r6
 800852e:	f7ff ffb7 	bl	80084a0 <_Bfree>
 8008532:	4644      	mov	r4, r8
 8008534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008538:	3501      	adds	r5, #1
 800853a:	615f      	str	r7, [r3, #20]
 800853c:	6125      	str	r5, [r4, #16]
 800853e:	4620      	mov	r0, r4
 8008540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008544 <__hi0bits>:
 8008544:	0c02      	lsrs	r2, r0, #16
 8008546:	0412      	lsls	r2, r2, #16
 8008548:	4603      	mov	r3, r0
 800854a:	b9b2      	cbnz	r2, 800857a <__hi0bits+0x36>
 800854c:	0403      	lsls	r3, r0, #16
 800854e:	2010      	movs	r0, #16
 8008550:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008554:	bf04      	itt	eq
 8008556:	021b      	lsleq	r3, r3, #8
 8008558:	3008      	addeq	r0, #8
 800855a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800855e:	bf04      	itt	eq
 8008560:	011b      	lsleq	r3, r3, #4
 8008562:	3004      	addeq	r0, #4
 8008564:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008568:	bf04      	itt	eq
 800856a:	009b      	lsleq	r3, r3, #2
 800856c:	3002      	addeq	r0, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	db06      	blt.n	8008580 <__hi0bits+0x3c>
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	d503      	bpl.n	800857e <__hi0bits+0x3a>
 8008576:	3001      	adds	r0, #1
 8008578:	4770      	bx	lr
 800857a:	2000      	movs	r0, #0
 800857c:	e7e8      	b.n	8008550 <__hi0bits+0xc>
 800857e:	2020      	movs	r0, #32
 8008580:	4770      	bx	lr

08008582 <__lo0bits>:
 8008582:	6803      	ldr	r3, [r0, #0]
 8008584:	f013 0207 	ands.w	r2, r3, #7
 8008588:	4601      	mov	r1, r0
 800858a:	d00b      	beq.n	80085a4 <__lo0bits+0x22>
 800858c:	07da      	lsls	r2, r3, #31
 800858e:	d423      	bmi.n	80085d8 <__lo0bits+0x56>
 8008590:	0798      	lsls	r0, r3, #30
 8008592:	bf49      	itett	mi
 8008594:	085b      	lsrmi	r3, r3, #1
 8008596:	089b      	lsrpl	r3, r3, #2
 8008598:	2001      	movmi	r0, #1
 800859a:	600b      	strmi	r3, [r1, #0]
 800859c:	bf5c      	itt	pl
 800859e:	600b      	strpl	r3, [r1, #0]
 80085a0:	2002      	movpl	r0, #2
 80085a2:	4770      	bx	lr
 80085a4:	b298      	uxth	r0, r3
 80085a6:	b9a8      	cbnz	r0, 80085d4 <__lo0bits+0x52>
 80085a8:	0c1b      	lsrs	r3, r3, #16
 80085aa:	2010      	movs	r0, #16
 80085ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80085b0:	bf04      	itt	eq
 80085b2:	0a1b      	lsreq	r3, r3, #8
 80085b4:	3008      	addeq	r0, #8
 80085b6:	071a      	lsls	r2, r3, #28
 80085b8:	bf04      	itt	eq
 80085ba:	091b      	lsreq	r3, r3, #4
 80085bc:	3004      	addeq	r0, #4
 80085be:	079a      	lsls	r2, r3, #30
 80085c0:	bf04      	itt	eq
 80085c2:	089b      	lsreq	r3, r3, #2
 80085c4:	3002      	addeq	r0, #2
 80085c6:	07da      	lsls	r2, r3, #31
 80085c8:	d402      	bmi.n	80085d0 <__lo0bits+0x4e>
 80085ca:	085b      	lsrs	r3, r3, #1
 80085cc:	d006      	beq.n	80085dc <__lo0bits+0x5a>
 80085ce:	3001      	adds	r0, #1
 80085d0:	600b      	str	r3, [r1, #0]
 80085d2:	4770      	bx	lr
 80085d4:	4610      	mov	r0, r2
 80085d6:	e7e9      	b.n	80085ac <__lo0bits+0x2a>
 80085d8:	2000      	movs	r0, #0
 80085da:	4770      	bx	lr
 80085dc:	2020      	movs	r0, #32
 80085de:	4770      	bx	lr

080085e0 <__i2b>:
 80085e0:	b510      	push	{r4, lr}
 80085e2:	460c      	mov	r4, r1
 80085e4:	2101      	movs	r1, #1
 80085e6:	f7ff ff27 	bl	8008438 <_Balloc>
 80085ea:	2201      	movs	r2, #1
 80085ec:	6144      	str	r4, [r0, #20]
 80085ee:	6102      	str	r2, [r0, #16]
 80085f0:	bd10      	pop	{r4, pc}

080085f2 <__multiply>:
 80085f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f6:	4614      	mov	r4, r2
 80085f8:	690a      	ldr	r2, [r1, #16]
 80085fa:	6923      	ldr	r3, [r4, #16]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	bfb8      	it	lt
 8008600:	460b      	movlt	r3, r1
 8008602:	4688      	mov	r8, r1
 8008604:	bfbc      	itt	lt
 8008606:	46a0      	movlt	r8, r4
 8008608:	461c      	movlt	r4, r3
 800860a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800860e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008612:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008616:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800861a:	eb07 0609 	add.w	r6, r7, r9
 800861e:	42b3      	cmp	r3, r6
 8008620:	bfb8      	it	lt
 8008622:	3101      	addlt	r1, #1
 8008624:	f7ff ff08 	bl	8008438 <_Balloc>
 8008628:	f100 0514 	add.w	r5, r0, #20
 800862c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008630:	462b      	mov	r3, r5
 8008632:	2200      	movs	r2, #0
 8008634:	4573      	cmp	r3, lr
 8008636:	d316      	bcc.n	8008666 <__multiply+0x74>
 8008638:	f104 0214 	add.w	r2, r4, #20
 800863c:	f108 0114 	add.w	r1, r8, #20
 8008640:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008644:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	9b00      	ldr	r3, [sp, #0]
 800864c:	9201      	str	r2, [sp, #4]
 800864e:	4293      	cmp	r3, r2
 8008650:	d80c      	bhi.n	800866c <__multiply+0x7a>
 8008652:	2e00      	cmp	r6, #0
 8008654:	dd03      	ble.n	800865e <__multiply+0x6c>
 8008656:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800865a:	2b00      	cmp	r3, #0
 800865c:	d05d      	beq.n	800871a <__multiply+0x128>
 800865e:	6106      	str	r6, [r0, #16]
 8008660:	b003      	add	sp, #12
 8008662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008666:	f843 2b04 	str.w	r2, [r3], #4
 800866a:	e7e3      	b.n	8008634 <__multiply+0x42>
 800866c:	f8b2 b000 	ldrh.w	fp, [r2]
 8008670:	f1bb 0f00 	cmp.w	fp, #0
 8008674:	d023      	beq.n	80086be <__multiply+0xcc>
 8008676:	4689      	mov	r9, r1
 8008678:	46ac      	mov	ip, r5
 800867a:	f04f 0800 	mov.w	r8, #0
 800867e:	f859 4b04 	ldr.w	r4, [r9], #4
 8008682:	f8dc a000 	ldr.w	sl, [ip]
 8008686:	b2a3      	uxth	r3, r4
 8008688:	fa1f fa8a 	uxth.w	sl, sl
 800868c:	fb0b a303 	mla	r3, fp, r3, sl
 8008690:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008694:	f8dc 4000 	ldr.w	r4, [ip]
 8008698:	4443      	add	r3, r8
 800869a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800869e:	fb0b 840a 	mla	r4, fp, sl, r8
 80086a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80086a6:	46e2      	mov	sl, ip
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80086ae:	454f      	cmp	r7, r9
 80086b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80086b4:	f84a 3b04 	str.w	r3, [sl], #4
 80086b8:	d82b      	bhi.n	8008712 <__multiply+0x120>
 80086ba:	f8cc 8004 	str.w	r8, [ip, #4]
 80086be:	9b01      	ldr	r3, [sp, #4]
 80086c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80086c4:	3204      	adds	r2, #4
 80086c6:	f1ba 0f00 	cmp.w	sl, #0
 80086ca:	d020      	beq.n	800870e <__multiply+0x11c>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	4689      	mov	r9, r1
 80086d0:	46a8      	mov	r8, r5
 80086d2:	f04f 0b00 	mov.w	fp, #0
 80086d6:	f8b9 c000 	ldrh.w	ip, [r9]
 80086da:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80086de:	fb0a 440c 	mla	r4, sl, ip, r4
 80086e2:	445c      	add	r4, fp
 80086e4:	46c4      	mov	ip, r8
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80086ec:	f84c 3b04 	str.w	r3, [ip], #4
 80086f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80086f4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80086f8:	0c1b      	lsrs	r3, r3, #16
 80086fa:	fb0a b303 	mla	r3, sl, r3, fp
 80086fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008702:	454f      	cmp	r7, r9
 8008704:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008708:	d805      	bhi.n	8008716 <__multiply+0x124>
 800870a:	f8c8 3004 	str.w	r3, [r8, #4]
 800870e:	3504      	adds	r5, #4
 8008710:	e79b      	b.n	800864a <__multiply+0x58>
 8008712:	46d4      	mov	ip, sl
 8008714:	e7b3      	b.n	800867e <__multiply+0x8c>
 8008716:	46e0      	mov	r8, ip
 8008718:	e7dd      	b.n	80086d6 <__multiply+0xe4>
 800871a:	3e01      	subs	r6, #1
 800871c:	e799      	b.n	8008652 <__multiply+0x60>
	...

08008720 <__pow5mult>:
 8008720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008724:	4615      	mov	r5, r2
 8008726:	f012 0203 	ands.w	r2, r2, #3
 800872a:	4606      	mov	r6, r0
 800872c:	460f      	mov	r7, r1
 800872e:	d007      	beq.n	8008740 <__pow5mult+0x20>
 8008730:	3a01      	subs	r2, #1
 8008732:	4c21      	ldr	r4, [pc, #132]	; (80087b8 <__pow5mult+0x98>)
 8008734:	2300      	movs	r3, #0
 8008736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800873a:	f7ff fec8 	bl	80084ce <__multadd>
 800873e:	4607      	mov	r7, r0
 8008740:	10ad      	asrs	r5, r5, #2
 8008742:	d035      	beq.n	80087b0 <__pow5mult+0x90>
 8008744:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008746:	b93c      	cbnz	r4, 8008758 <__pow5mult+0x38>
 8008748:	2010      	movs	r0, #16
 800874a:	f7ff fe6d 	bl	8008428 <malloc>
 800874e:	6270      	str	r0, [r6, #36]	; 0x24
 8008750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008754:	6004      	str	r4, [r0, #0]
 8008756:	60c4      	str	r4, [r0, #12]
 8008758:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800875c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008760:	b94c      	cbnz	r4, 8008776 <__pow5mult+0x56>
 8008762:	f240 2171 	movw	r1, #625	; 0x271
 8008766:	4630      	mov	r0, r6
 8008768:	f7ff ff3a 	bl	80085e0 <__i2b>
 800876c:	2300      	movs	r3, #0
 800876e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008772:	4604      	mov	r4, r0
 8008774:	6003      	str	r3, [r0, #0]
 8008776:	f04f 0800 	mov.w	r8, #0
 800877a:	07eb      	lsls	r3, r5, #31
 800877c:	d50a      	bpl.n	8008794 <__pow5mult+0x74>
 800877e:	4639      	mov	r1, r7
 8008780:	4622      	mov	r2, r4
 8008782:	4630      	mov	r0, r6
 8008784:	f7ff ff35 	bl	80085f2 <__multiply>
 8008788:	4639      	mov	r1, r7
 800878a:	4681      	mov	r9, r0
 800878c:	4630      	mov	r0, r6
 800878e:	f7ff fe87 	bl	80084a0 <_Bfree>
 8008792:	464f      	mov	r7, r9
 8008794:	106d      	asrs	r5, r5, #1
 8008796:	d00b      	beq.n	80087b0 <__pow5mult+0x90>
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	b938      	cbnz	r0, 80087ac <__pow5mult+0x8c>
 800879c:	4622      	mov	r2, r4
 800879e:	4621      	mov	r1, r4
 80087a0:	4630      	mov	r0, r6
 80087a2:	f7ff ff26 	bl	80085f2 <__multiply>
 80087a6:	6020      	str	r0, [r4, #0]
 80087a8:	f8c0 8000 	str.w	r8, [r0]
 80087ac:	4604      	mov	r4, r0
 80087ae:	e7e4      	b.n	800877a <__pow5mult+0x5a>
 80087b0:	4638      	mov	r0, r7
 80087b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b6:	bf00      	nop
 80087b8:	08009588 	.word	0x08009588

080087bc <__lshift>:
 80087bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	460c      	mov	r4, r1
 80087c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	6849      	ldr	r1, [r1, #4]
 80087ca:	eb0a 0903 	add.w	r9, sl, r3
 80087ce:	68a3      	ldr	r3, [r4, #8]
 80087d0:	4607      	mov	r7, r0
 80087d2:	4616      	mov	r6, r2
 80087d4:	f109 0501 	add.w	r5, r9, #1
 80087d8:	42ab      	cmp	r3, r5
 80087da:	db32      	blt.n	8008842 <__lshift+0x86>
 80087dc:	4638      	mov	r0, r7
 80087de:	f7ff fe2b 	bl	8008438 <_Balloc>
 80087e2:	2300      	movs	r3, #0
 80087e4:	4680      	mov	r8, r0
 80087e6:	f100 0114 	add.w	r1, r0, #20
 80087ea:	461a      	mov	r2, r3
 80087ec:	4553      	cmp	r3, sl
 80087ee:	db2b      	blt.n	8008848 <__lshift+0x8c>
 80087f0:	6920      	ldr	r0, [r4, #16]
 80087f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087f6:	f104 0314 	add.w	r3, r4, #20
 80087fa:	f016 021f 	ands.w	r2, r6, #31
 80087fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008802:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008806:	d025      	beq.n	8008854 <__lshift+0x98>
 8008808:	f1c2 0e20 	rsb	lr, r2, #32
 800880c:	2000      	movs	r0, #0
 800880e:	681e      	ldr	r6, [r3, #0]
 8008810:	468a      	mov	sl, r1
 8008812:	4096      	lsls	r6, r2
 8008814:	4330      	orrs	r0, r6
 8008816:	f84a 0b04 	str.w	r0, [sl], #4
 800881a:	f853 0b04 	ldr.w	r0, [r3], #4
 800881e:	459c      	cmp	ip, r3
 8008820:	fa20 f00e 	lsr.w	r0, r0, lr
 8008824:	d814      	bhi.n	8008850 <__lshift+0x94>
 8008826:	6048      	str	r0, [r1, #4]
 8008828:	b108      	cbz	r0, 800882e <__lshift+0x72>
 800882a:	f109 0502 	add.w	r5, r9, #2
 800882e:	3d01      	subs	r5, #1
 8008830:	4638      	mov	r0, r7
 8008832:	f8c8 5010 	str.w	r5, [r8, #16]
 8008836:	4621      	mov	r1, r4
 8008838:	f7ff fe32 	bl	80084a0 <_Bfree>
 800883c:	4640      	mov	r0, r8
 800883e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008842:	3101      	adds	r1, #1
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	e7c7      	b.n	80087d8 <__lshift+0x1c>
 8008848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800884c:	3301      	adds	r3, #1
 800884e:	e7cd      	b.n	80087ec <__lshift+0x30>
 8008850:	4651      	mov	r1, sl
 8008852:	e7dc      	b.n	800880e <__lshift+0x52>
 8008854:	3904      	subs	r1, #4
 8008856:	f853 2b04 	ldr.w	r2, [r3], #4
 800885a:	f841 2f04 	str.w	r2, [r1, #4]!
 800885e:	459c      	cmp	ip, r3
 8008860:	d8f9      	bhi.n	8008856 <__lshift+0x9a>
 8008862:	e7e4      	b.n	800882e <__lshift+0x72>

08008864 <__mcmp>:
 8008864:	6903      	ldr	r3, [r0, #16]
 8008866:	690a      	ldr	r2, [r1, #16]
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	b530      	push	{r4, r5, lr}
 800886c:	d10c      	bne.n	8008888 <__mcmp+0x24>
 800886e:	0092      	lsls	r2, r2, #2
 8008870:	3014      	adds	r0, #20
 8008872:	3114      	adds	r1, #20
 8008874:	1884      	adds	r4, r0, r2
 8008876:	4411      	add	r1, r2
 8008878:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800887c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008880:	4295      	cmp	r5, r2
 8008882:	d003      	beq.n	800888c <__mcmp+0x28>
 8008884:	d305      	bcc.n	8008892 <__mcmp+0x2e>
 8008886:	2301      	movs	r3, #1
 8008888:	4618      	mov	r0, r3
 800888a:	bd30      	pop	{r4, r5, pc}
 800888c:	42a0      	cmp	r0, r4
 800888e:	d3f3      	bcc.n	8008878 <__mcmp+0x14>
 8008890:	e7fa      	b.n	8008888 <__mcmp+0x24>
 8008892:	f04f 33ff 	mov.w	r3, #4294967295
 8008896:	e7f7      	b.n	8008888 <__mcmp+0x24>

08008898 <__mdiff>:
 8008898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800889c:	460d      	mov	r5, r1
 800889e:	4607      	mov	r7, r0
 80088a0:	4611      	mov	r1, r2
 80088a2:	4628      	mov	r0, r5
 80088a4:	4614      	mov	r4, r2
 80088a6:	f7ff ffdd 	bl	8008864 <__mcmp>
 80088aa:	1e06      	subs	r6, r0, #0
 80088ac:	d108      	bne.n	80088c0 <__mdiff+0x28>
 80088ae:	4631      	mov	r1, r6
 80088b0:	4638      	mov	r0, r7
 80088b2:	f7ff fdc1 	bl	8008438 <_Balloc>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80088bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c0:	bfa4      	itt	ge
 80088c2:	4623      	movge	r3, r4
 80088c4:	462c      	movge	r4, r5
 80088c6:	4638      	mov	r0, r7
 80088c8:	6861      	ldr	r1, [r4, #4]
 80088ca:	bfa6      	itte	ge
 80088cc:	461d      	movge	r5, r3
 80088ce:	2600      	movge	r6, #0
 80088d0:	2601      	movlt	r6, #1
 80088d2:	f7ff fdb1 	bl	8008438 <_Balloc>
 80088d6:	692b      	ldr	r3, [r5, #16]
 80088d8:	60c6      	str	r6, [r0, #12]
 80088da:	6926      	ldr	r6, [r4, #16]
 80088dc:	f105 0914 	add.w	r9, r5, #20
 80088e0:	f104 0214 	add.w	r2, r4, #20
 80088e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80088e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80088ec:	f100 0514 	add.w	r5, r0, #20
 80088f0:	f04f 0e00 	mov.w	lr, #0
 80088f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80088f8:	f859 4b04 	ldr.w	r4, [r9], #4
 80088fc:	fa1e f18a 	uxtah	r1, lr, sl
 8008900:	b2a3      	uxth	r3, r4
 8008902:	1ac9      	subs	r1, r1, r3
 8008904:	0c23      	lsrs	r3, r4, #16
 8008906:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800890a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800890e:	b289      	uxth	r1, r1
 8008910:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008914:	45c8      	cmp	r8, r9
 8008916:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800891a:	4694      	mov	ip, r2
 800891c:	f845 3b04 	str.w	r3, [r5], #4
 8008920:	d8e8      	bhi.n	80088f4 <__mdiff+0x5c>
 8008922:	45bc      	cmp	ip, r7
 8008924:	d304      	bcc.n	8008930 <__mdiff+0x98>
 8008926:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800892a:	b183      	cbz	r3, 800894e <__mdiff+0xb6>
 800892c:	6106      	str	r6, [r0, #16]
 800892e:	e7c5      	b.n	80088bc <__mdiff+0x24>
 8008930:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008934:	fa1e f381 	uxtah	r3, lr, r1
 8008938:	141a      	asrs	r2, r3, #16
 800893a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800893e:	b29b      	uxth	r3, r3
 8008940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008944:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008948:	f845 3b04 	str.w	r3, [r5], #4
 800894c:	e7e9      	b.n	8008922 <__mdiff+0x8a>
 800894e:	3e01      	subs	r6, #1
 8008950:	e7e9      	b.n	8008926 <__mdiff+0x8e>

08008952 <__d2b>:
 8008952:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008956:	460e      	mov	r6, r1
 8008958:	2101      	movs	r1, #1
 800895a:	ec59 8b10 	vmov	r8, r9, d0
 800895e:	4615      	mov	r5, r2
 8008960:	f7ff fd6a 	bl	8008438 <_Balloc>
 8008964:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008968:	4607      	mov	r7, r0
 800896a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800896e:	bb34      	cbnz	r4, 80089be <__d2b+0x6c>
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	f1b8 0300 	subs.w	r3, r8, #0
 8008976:	d027      	beq.n	80089c8 <__d2b+0x76>
 8008978:	a802      	add	r0, sp, #8
 800897a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800897e:	f7ff fe00 	bl	8008582 <__lo0bits>
 8008982:	9900      	ldr	r1, [sp, #0]
 8008984:	b1f0      	cbz	r0, 80089c4 <__d2b+0x72>
 8008986:	9a01      	ldr	r2, [sp, #4]
 8008988:	f1c0 0320 	rsb	r3, r0, #32
 800898c:	fa02 f303 	lsl.w	r3, r2, r3
 8008990:	430b      	orrs	r3, r1
 8008992:	40c2      	lsrs	r2, r0
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	9201      	str	r2, [sp, #4]
 8008998:	9b01      	ldr	r3, [sp, #4]
 800899a:	61bb      	str	r3, [r7, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	bf14      	ite	ne
 80089a0:	2102      	movne	r1, #2
 80089a2:	2101      	moveq	r1, #1
 80089a4:	6139      	str	r1, [r7, #16]
 80089a6:	b1c4      	cbz	r4, 80089da <__d2b+0x88>
 80089a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80089ac:	4404      	add	r4, r0
 80089ae:	6034      	str	r4, [r6, #0]
 80089b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089b4:	6028      	str	r0, [r5, #0]
 80089b6:	4638      	mov	r0, r7
 80089b8:	b003      	add	sp, #12
 80089ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089c2:	e7d5      	b.n	8008970 <__d2b+0x1e>
 80089c4:	6179      	str	r1, [r7, #20]
 80089c6:	e7e7      	b.n	8008998 <__d2b+0x46>
 80089c8:	a801      	add	r0, sp, #4
 80089ca:	f7ff fdda 	bl	8008582 <__lo0bits>
 80089ce:	9b01      	ldr	r3, [sp, #4]
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	2101      	movs	r1, #1
 80089d4:	6139      	str	r1, [r7, #16]
 80089d6:	3020      	adds	r0, #32
 80089d8:	e7e5      	b.n	80089a6 <__d2b+0x54>
 80089da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80089de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089e2:	6030      	str	r0, [r6, #0]
 80089e4:	6918      	ldr	r0, [r3, #16]
 80089e6:	f7ff fdad 	bl	8008544 <__hi0bits>
 80089ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80089ee:	e7e1      	b.n	80089b4 <__d2b+0x62>

080089f0 <_calloc_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	fb02 f401 	mul.w	r4, r2, r1
 80089f6:	4621      	mov	r1, r4
 80089f8:	f000 f856 	bl	8008aa8 <_malloc_r>
 80089fc:	4605      	mov	r5, r0
 80089fe:	b118      	cbz	r0, 8008a08 <_calloc_r+0x18>
 8008a00:	4622      	mov	r2, r4
 8008a02:	2100      	movs	r1, #0
 8008a04:	f7fe f977 	bl	8006cf6 <memset>
 8008a08:	4628      	mov	r0, r5
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}

08008a0c <_free_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4605      	mov	r5, r0
 8008a10:	2900      	cmp	r1, #0
 8008a12:	d045      	beq.n	8008aa0 <_free_r+0x94>
 8008a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a18:	1f0c      	subs	r4, r1, #4
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	bfb8      	it	lt
 8008a1e:	18e4      	addlt	r4, r4, r3
 8008a20:	f000 fc4a 	bl	80092b8 <__malloc_lock>
 8008a24:	4a1f      	ldr	r2, [pc, #124]	; (8008aa4 <_free_r+0x98>)
 8008a26:	6813      	ldr	r3, [r2, #0]
 8008a28:	4610      	mov	r0, r2
 8008a2a:	b933      	cbnz	r3, 8008a3a <_free_r+0x2e>
 8008a2c:	6063      	str	r3, [r4, #4]
 8008a2e:	6014      	str	r4, [r2, #0]
 8008a30:	4628      	mov	r0, r5
 8008a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a36:	f000 bc40 	b.w	80092ba <__malloc_unlock>
 8008a3a:	42a3      	cmp	r3, r4
 8008a3c:	d90c      	bls.n	8008a58 <_free_r+0x4c>
 8008a3e:	6821      	ldr	r1, [r4, #0]
 8008a40:	1862      	adds	r2, r4, r1
 8008a42:	4293      	cmp	r3, r2
 8008a44:	bf04      	itt	eq
 8008a46:	681a      	ldreq	r2, [r3, #0]
 8008a48:	685b      	ldreq	r3, [r3, #4]
 8008a4a:	6063      	str	r3, [r4, #4]
 8008a4c:	bf04      	itt	eq
 8008a4e:	1852      	addeq	r2, r2, r1
 8008a50:	6022      	streq	r2, [r4, #0]
 8008a52:	6004      	str	r4, [r0, #0]
 8008a54:	e7ec      	b.n	8008a30 <_free_r+0x24>
 8008a56:	4613      	mov	r3, r2
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	b10a      	cbz	r2, 8008a60 <_free_r+0x54>
 8008a5c:	42a2      	cmp	r2, r4
 8008a5e:	d9fa      	bls.n	8008a56 <_free_r+0x4a>
 8008a60:	6819      	ldr	r1, [r3, #0]
 8008a62:	1858      	adds	r0, r3, r1
 8008a64:	42a0      	cmp	r0, r4
 8008a66:	d10b      	bne.n	8008a80 <_free_r+0x74>
 8008a68:	6820      	ldr	r0, [r4, #0]
 8008a6a:	4401      	add	r1, r0
 8008a6c:	1858      	adds	r0, r3, r1
 8008a6e:	4282      	cmp	r2, r0
 8008a70:	6019      	str	r1, [r3, #0]
 8008a72:	d1dd      	bne.n	8008a30 <_free_r+0x24>
 8008a74:	6810      	ldr	r0, [r2, #0]
 8008a76:	6852      	ldr	r2, [r2, #4]
 8008a78:	605a      	str	r2, [r3, #4]
 8008a7a:	4401      	add	r1, r0
 8008a7c:	6019      	str	r1, [r3, #0]
 8008a7e:	e7d7      	b.n	8008a30 <_free_r+0x24>
 8008a80:	d902      	bls.n	8008a88 <_free_r+0x7c>
 8008a82:	230c      	movs	r3, #12
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	e7d3      	b.n	8008a30 <_free_r+0x24>
 8008a88:	6820      	ldr	r0, [r4, #0]
 8008a8a:	1821      	adds	r1, r4, r0
 8008a8c:	428a      	cmp	r2, r1
 8008a8e:	bf04      	itt	eq
 8008a90:	6811      	ldreq	r1, [r2, #0]
 8008a92:	6852      	ldreq	r2, [r2, #4]
 8008a94:	6062      	str	r2, [r4, #4]
 8008a96:	bf04      	itt	eq
 8008a98:	1809      	addeq	r1, r1, r0
 8008a9a:	6021      	streq	r1, [r4, #0]
 8008a9c:	605c      	str	r4, [r3, #4]
 8008a9e:	e7c7      	b.n	8008a30 <_free_r+0x24>
 8008aa0:	bd38      	pop	{r3, r4, r5, pc}
 8008aa2:	bf00      	nop
 8008aa4:	200041a0 	.word	0x200041a0

08008aa8 <_malloc_r>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	1ccd      	adds	r5, r1, #3
 8008aac:	f025 0503 	bic.w	r5, r5, #3
 8008ab0:	3508      	adds	r5, #8
 8008ab2:	2d0c      	cmp	r5, #12
 8008ab4:	bf38      	it	cc
 8008ab6:	250c      	movcc	r5, #12
 8008ab8:	2d00      	cmp	r5, #0
 8008aba:	4606      	mov	r6, r0
 8008abc:	db01      	blt.n	8008ac2 <_malloc_r+0x1a>
 8008abe:	42a9      	cmp	r1, r5
 8008ac0:	d903      	bls.n	8008aca <_malloc_r+0x22>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	6033      	str	r3, [r6, #0]
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	bd70      	pop	{r4, r5, r6, pc}
 8008aca:	f000 fbf5 	bl	80092b8 <__malloc_lock>
 8008ace:	4a21      	ldr	r2, [pc, #132]	; (8008b54 <_malloc_r+0xac>)
 8008ad0:	6814      	ldr	r4, [r2, #0]
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	b991      	cbnz	r1, 8008afc <_malloc_r+0x54>
 8008ad6:	4c20      	ldr	r4, [pc, #128]	; (8008b58 <_malloc_r+0xb0>)
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	b91b      	cbnz	r3, 8008ae4 <_malloc_r+0x3c>
 8008adc:	4630      	mov	r0, r6
 8008ade:	f000 f97d 	bl	8008ddc <_sbrk_r>
 8008ae2:	6020      	str	r0, [r4, #0]
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f000 f978 	bl	8008ddc <_sbrk_r>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d124      	bne.n	8008b3a <_malloc_r+0x92>
 8008af0:	230c      	movs	r3, #12
 8008af2:	6033      	str	r3, [r6, #0]
 8008af4:	4630      	mov	r0, r6
 8008af6:	f000 fbe0 	bl	80092ba <__malloc_unlock>
 8008afa:	e7e4      	b.n	8008ac6 <_malloc_r+0x1e>
 8008afc:	680b      	ldr	r3, [r1, #0]
 8008afe:	1b5b      	subs	r3, r3, r5
 8008b00:	d418      	bmi.n	8008b34 <_malloc_r+0x8c>
 8008b02:	2b0b      	cmp	r3, #11
 8008b04:	d90f      	bls.n	8008b26 <_malloc_r+0x7e>
 8008b06:	600b      	str	r3, [r1, #0]
 8008b08:	50cd      	str	r5, [r1, r3]
 8008b0a:	18cc      	adds	r4, r1, r3
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f000 fbd4 	bl	80092ba <__malloc_unlock>
 8008b12:	f104 000b 	add.w	r0, r4, #11
 8008b16:	1d23      	adds	r3, r4, #4
 8008b18:	f020 0007 	bic.w	r0, r0, #7
 8008b1c:	1ac3      	subs	r3, r0, r3
 8008b1e:	d0d3      	beq.n	8008ac8 <_malloc_r+0x20>
 8008b20:	425a      	negs	r2, r3
 8008b22:	50e2      	str	r2, [r4, r3]
 8008b24:	e7d0      	b.n	8008ac8 <_malloc_r+0x20>
 8008b26:	428c      	cmp	r4, r1
 8008b28:	684b      	ldr	r3, [r1, #4]
 8008b2a:	bf16      	itet	ne
 8008b2c:	6063      	strne	r3, [r4, #4]
 8008b2e:	6013      	streq	r3, [r2, #0]
 8008b30:	460c      	movne	r4, r1
 8008b32:	e7eb      	b.n	8008b0c <_malloc_r+0x64>
 8008b34:	460c      	mov	r4, r1
 8008b36:	6849      	ldr	r1, [r1, #4]
 8008b38:	e7cc      	b.n	8008ad4 <_malloc_r+0x2c>
 8008b3a:	1cc4      	adds	r4, r0, #3
 8008b3c:	f024 0403 	bic.w	r4, r4, #3
 8008b40:	42a0      	cmp	r0, r4
 8008b42:	d005      	beq.n	8008b50 <_malloc_r+0xa8>
 8008b44:	1a21      	subs	r1, r4, r0
 8008b46:	4630      	mov	r0, r6
 8008b48:	f000 f948 	bl	8008ddc <_sbrk_r>
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d0cf      	beq.n	8008af0 <_malloc_r+0x48>
 8008b50:	6025      	str	r5, [r4, #0]
 8008b52:	e7db      	b.n	8008b0c <_malloc_r+0x64>
 8008b54:	200041a0 	.word	0x200041a0
 8008b58:	200041a4 	.word	0x200041a4

08008b5c <__sfputc_r>:
 8008b5c:	6893      	ldr	r3, [r2, #8]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	b410      	push	{r4}
 8008b64:	6093      	str	r3, [r2, #8]
 8008b66:	da08      	bge.n	8008b7a <__sfputc_r+0x1e>
 8008b68:	6994      	ldr	r4, [r2, #24]
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	db01      	blt.n	8008b72 <__sfputc_r+0x16>
 8008b6e:	290a      	cmp	r1, #10
 8008b70:	d103      	bne.n	8008b7a <__sfputc_r+0x1e>
 8008b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b76:	f000 b985 	b.w	8008e84 <__swbuf_r>
 8008b7a:	6813      	ldr	r3, [r2, #0]
 8008b7c:	1c58      	adds	r0, r3, #1
 8008b7e:	6010      	str	r0, [r2, #0]
 8008b80:	7019      	strb	r1, [r3, #0]
 8008b82:	4608      	mov	r0, r1
 8008b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <__sfputs_r>:
 8008b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	4614      	mov	r4, r2
 8008b92:	18d5      	adds	r5, r2, r3
 8008b94:	42ac      	cmp	r4, r5
 8008b96:	d101      	bne.n	8008b9c <__sfputs_r+0x12>
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e007      	b.n	8008bac <__sfputs_r+0x22>
 8008b9c:	463a      	mov	r2, r7
 8008b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ffda 	bl	8008b5c <__sfputc_r>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d1f3      	bne.n	8008b94 <__sfputs_r+0xa>
 8008bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bb0 <_vfiprintf_r>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	b09d      	sub	sp, #116	; 0x74
 8008bb8:	4617      	mov	r7, r2
 8008bba:	461d      	mov	r5, r3
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	b118      	cbz	r0, 8008bc8 <_vfiprintf_r+0x18>
 8008bc0:	6983      	ldr	r3, [r0, #24]
 8008bc2:	b90b      	cbnz	r3, 8008bc8 <_vfiprintf_r+0x18>
 8008bc4:	f7ff fb98 	bl	80082f8 <__sinit>
 8008bc8:	4b7c      	ldr	r3, [pc, #496]	; (8008dbc <_vfiprintf_r+0x20c>)
 8008bca:	429c      	cmp	r4, r3
 8008bcc:	d158      	bne.n	8008c80 <_vfiprintf_r+0xd0>
 8008bce:	6874      	ldr	r4, [r6, #4]
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	0718      	lsls	r0, r3, #28
 8008bd4:	d55e      	bpl.n	8008c94 <_vfiprintf_r+0xe4>
 8008bd6:	6923      	ldr	r3, [r4, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d05b      	beq.n	8008c94 <_vfiprintf_r+0xe4>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	9309      	str	r3, [sp, #36]	; 0x24
 8008be0:	2320      	movs	r3, #32
 8008be2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008be6:	2330      	movs	r3, #48	; 0x30
 8008be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bec:	9503      	str	r5, [sp, #12]
 8008bee:	f04f 0b01 	mov.w	fp, #1
 8008bf2:	46b8      	mov	r8, r7
 8008bf4:	4645      	mov	r5, r8
 8008bf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008bfa:	b10b      	cbz	r3, 8008c00 <_vfiprintf_r+0x50>
 8008bfc:	2b25      	cmp	r3, #37	; 0x25
 8008bfe:	d154      	bne.n	8008caa <_vfiprintf_r+0xfa>
 8008c00:	ebb8 0a07 	subs.w	sl, r8, r7
 8008c04:	d00b      	beq.n	8008c1e <_vfiprintf_r+0x6e>
 8008c06:	4653      	mov	r3, sl
 8008c08:	463a      	mov	r2, r7
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff ffbc 	bl	8008b8a <__sfputs_r>
 8008c12:	3001      	adds	r0, #1
 8008c14:	f000 80c2 	beq.w	8008d9c <_vfiprintf_r+0x1ec>
 8008c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1a:	4453      	add	r3, sl
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1e:	f898 3000 	ldrb.w	r3, [r8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 80ba 	beq.w	8008d9c <_vfiprintf_r+0x1ec>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	9307      	str	r3, [sp, #28]
 8008c36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c3a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c3c:	46a8      	mov	r8, r5
 8008c3e:	2205      	movs	r2, #5
 8008c40:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008c44:	485e      	ldr	r0, [pc, #376]	; (8008dc0 <_vfiprintf_r+0x210>)
 8008c46:	f7f7 fadb 	bl	8000200 <memchr>
 8008c4a:	9b04      	ldr	r3, [sp, #16]
 8008c4c:	bb78      	cbnz	r0, 8008cae <_vfiprintf_r+0xfe>
 8008c4e:	06d9      	lsls	r1, r3, #27
 8008c50:	bf44      	itt	mi
 8008c52:	2220      	movmi	r2, #32
 8008c54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c58:	071a      	lsls	r2, r3, #28
 8008c5a:	bf44      	itt	mi
 8008c5c:	222b      	movmi	r2, #43	; 0x2b
 8008c5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c62:	782a      	ldrb	r2, [r5, #0]
 8008c64:	2a2a      	cmp	r2, #42	; 0x2a
 8008c66:	d02a      	beq.n	8008cbe <_vfiprintf_r+0x10e>
 8008c68:	9a07      	ldr	r2, [sp, #28]
 8008c6a:	46a8      	mov	r8, r5
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	250a      	movs	r5, #10
 8008c70:	4641      	mov	r1, r8
 8008c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c76:	3b30      	subs	r3, #48	; 0x30
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d969      	bls.n	8008d50 <_vfiprintf_r+0x1a0>
 8008c7c:	b360      	cbz	r0, 8008cd8 <_vfiprintf_r+0x128>
 8008c7e:	e024      	b.n	8008cca <_vfiprintf_r+0x11a>
 8008c80:	4b50      	ldr	r3, [pc, #320]	; (8008dc4 <_vfiprintf_r+0x214>)
 8008c82:	429c      	cmp	r4, r3
 8008c84:	d101      	bne.n	8008c8a <_vfiprintf_r+0xda>
 8008c86:	68b4      	ldr	r4, [r6, #8]
 8008c88:	e7a2      	b.n	8008bd0 <_vfiprintf_r+0x20>
 8008c8a:	4b4f      	ldr	r3, [pc, #316]	; (8008dc8 <_vfiprintf_r+0x218>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	bf08      	it	eq
 8008c90:	68f4      	ldreq	r4, [r6, #12]
 8008c92:	e79d      	b.n	8008bd0 <_vfiprintf_r+0x20>
 8008c94:	4621      	mov	r1, r4
 8008c96:	4630      	mov	r0, r6
 8008c98:	f000 f958 	bl	8008f4c <__swsetup_r>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d09d      	beq.n	8008bdc <_vfiprintf_r+0x2c>
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	b01d      	add	sp, #116	; 0x74
 8008ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008caa:	46a8      	mov	r8, r5
 8008cac:	e7a2      	b.n	8008bf4 <_vfiprintf_r+0x44>
 8008cae:	4a44      	ldr	r2, [pc, #272]	; (8008dc0 <_vfiprintf_r+0x210>)
 8008cb0:	1a80      	subs	r0, r0, r2
 8008cb2:	fa0b f000 	lsl.w	r0, fp, r0
 8008cb6:	4318      	orrs	r0, r3
 8008cb8:	9004      	str	r0, [sp, #16]
 8008cba:	4645      	mov	r5, r8
 8008cbc:	e7be      	b.n	8008c3c <_vfiprintf_r+0x8c>
 8008cbe:	9a03      	ldr	r2, [sp, #12]
 8008cc0:	1d11      	adds	r1, r2, #4
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	9103      	str	r1, [sp, #12]
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	db01      	blt.n	8008cce <_vfiprintf_r+0x11e>
 8008cca:	9207      	str	r2, [sp, #28]
 8008ccc:	e004      	b.n	8008cd8 <_vfiprintf_r+0x128>
 8008cce:	4252      	negs	r2, r2
 8008cd0:	f043 0302 	orr.w	r3, r3, #2
 8008cd4:	9207      	str	r2, [sp, #28]
 8008cd6:	9304      	str	r3, [sp, #16]
 8008cd8:	f898 3000 	ldrb.w	r3, [r8]
 8008cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8008cde:	d10e      	bne.n	8008cfe <_vfiprintf_r+0x14e>
 8008ce0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce6:	d138      	bne.n	8008d5a <_vfiprintf_r+0x1aa>
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	1d1a      	adds	r2, r3, #4
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	9203      	str	r2, [sp, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bfb8      	it	lt
 8008cf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cf8:	f108 0802 	add.w	r8, r8, #2
 8008cfc:	9305      	str	r3, [sp, #20]
 8008cfe:	4d33      	ldr	r5, [pc, #204]	; (8008dcc <_vfiprintf_r+0x21c>)
 8008d00:	f898 1000 	ldrb.w	r1, [r8]
 8008d04:	2203      	movs	r2, #3
 8008d06:	4628      	mov	r0, r5
 8008d08:	f7f7 fa7a 	bl	8000200 <memchr>
 8008d0c:	b140      	cbz	r0, 8008d20 <_vfiprintf_r+0x170>
 8008d0e:	2340      	movs	r3, #64	; 0x40
 8008d10:	1b40      	subs	r0, r0, r5
 8008d12:	fa03 f000 	lsl.w	r0, r3, r0
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	4303      	orrs	r3, r0
 8008d1a:	f108 0801 	add.w	r8, r8, #1
 8008d1e:	9304      	str	r3, [sp, #16]
 8008d20:	f898 1000 	ldrb.w	r1, [r8]
 8008d24:	482a      	ldr	r0, [pc, #168]	; (8008dd0 <_vfiprintf_r+0x220>)
 8008d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d2a:	2206      	movs	r2, #6
 8008d2c:	f108 0701 	add.w	r7, r8, #1
 8008d30:	f7f7 fa66 	bl	8000200 <memchr>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d037      	beq.n	8008da8 <_vfiprintf_r+0x1f8>
 8008d38:	4b26      	ldr	r3, [pc, #152]	; (8008dd4 <_vfiprintf_r+0x224>)
 8008d3a:	bb1b      	cbnz	r3, 8008d84 <_vfiprintf_r+0x1d4>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	3307      	adds	r3, #7
 8008d40:	f023 0307 	bic.w	r3, r3, #7
 8008d44:	3308      	adds	r3, #8
 8008d46:	9303      	str	r3, [sp, #12]
 8008d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4a:	444b      	add	r3, r9
 8008d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d4e:	e750      	b.n	8008bf2 <_vfiprintf_r+0x42>
 8008d50:	fb05 3202 	mla	r2, r5, r2, r3
 8008d54:	2001      	movs	r0, #1
 8008d56:	4688      	mov	r8, r1
 8008d58:	e78a      	b.n	8008c70 <_vfiprintf_r+0xc0>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f108 0801 	add.w	r8, r8, #1
 8008d60:	9305      	str	r3, [sp, #20]
 8008d62:	4619      	mov	r1, r3
 8008d64:	250a      	movs	r5, #10
 8008d66:	4640      	mov	r0, r8
 8008d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d6c:	3a30      	subs	r2, #48	; 0x30
 8008d6e:	2a09      	cmp	r2, #9
 8008d70:	d903      	bls.n	8008d7a <_vfiprintf_r+0x1ca>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d0c3      	beq.n	8008cfe <_vfiprintf_r+0x14e>
 8008d76:	9105      	str	r1, [sp, #20]
 8008d78:	e7c1      	b.n	8008cfe <_vfiprintf_r+0x14e>
 8008d7a:	fb05 2101 	mla	r1, r5, r1, r2
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4680      	mov	r8, r0
 8008d82:	e7f0      	b.n	8008d66 <_vfiprintf_r+0x1b6>
 8008d84:	ab03      	add	r3, sp, #12
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	4622      	mov	r2, r4
 8008d8a:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <_vfiprintf_r+0x228>)
 8008d8c:	a904      	add	r1, sp, #16
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7fe f84e 	bl	8006e30 <_printf_float>
 8008d94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008d98:	4681      	mov	r9, r0
 8008d9a:	d1d5      	bne.n	8008d48 <_vfiprintf_r+0x198>
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	065b      	lsls	r3, r3, #25
 8008da0:	f53f af7e 	bmi.w	8008ca0 <_vfiprintf_r+0xf0>
 8008da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008da6:	e77d      	b.n	8008ca4 <_vfiprintf_r+0xf4>
 8008da8:	ab03      	add	r3, sp, #12
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	4622      	mov	r2, r4
 8008dae:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <_vfiprintf_r+0x228>)
 8008db0:	a904      	add	r1, sp, #16
 8008db2:	4630      	mov	r0, r6
 8008db4:	f7fe faf2 	bl	800739c <_printf_i>
 8008db8:	e7ec      	b.n	8008d94 <_vfiprintf_r+0x1e4>
 8008dba:	bf00      	nop
 8008dbc:	08009454 	.word	0x08009454
 8008dc0:	08009594 	.word	0x08009594
 8008dc4:	08009474 	.word	0x08009474
 8008dc8:	08009434 	.word	0x08009434
 8008dcc:	0800959a 	.word	0x0800959a
 8008dd0:	0800959e 	.word	0x0800959e
 8008dd4:	08006e31 	.word	0x08006e31
 8008dd8:	08008b8b 	.word	0x08008b8b

08008ddc <_sbrk_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4c06      	ldr	r4, [pc, #24]	; (8008df8 <_sbrk_r+0x1c>)
 8008de0:	2300      	movs	r3, #0
 8008de2:	4605      	mov	r5, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	6023      	str	r3, [r4, #0]
 8008de8:	f7f8 fca8 	bl	800173c <_sbrk>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d102      	bne.n	8008df6 <_sbrk_r+0x1a>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	b103      	cbz	r3, 8008df6 <_sbrk_r+0x1a>
 8008df4:	602b      	str	r3, [r5, #0]
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	200042b0 	.word	0x200042b0

08008dfc <__sread>:
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	460c      	mov	r4, r1
 8008e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e04:	f000 fa5a 	bl	80092bc <_read_r>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	bfab      	itete	ge
 8008e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8008e10:	181b      	addge	r3, r3, r0
 8008e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e16:	bfac      	ite	ge
 8008e18:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e1a:	81a3      	strhlt	r3, [r4, #12]
 8008e1c:	bd10      	pop	{r4, pc}

08008e1e <__swrite>:
 8008e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e22:	461f      	mov	r7, r3
 8008e24:	898b      	ldrh	r3, [r1, #12]
 8008e26:	05db      	lsls	r3, r3, #23
 8008e28:	4605      	mov	r5, r0
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	4616      	mov	r6, r2
 8008e2e:	d505      	bpl.n	8008e3c <__swrite+0x1e>
 8008e30:	2302      	movs	r3, #2
 8008e32:	2200      	movs	r2, #0
 8008e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e38:	f000 f9b6 	bl	80091a8 <_lseek_r>
 8008e3c:	89a3      	ldrh	r3, [r4, #12]
 8008e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e46:	81a3      	strh	r3, [r4, #12]
 8008e48:	4632      	mov	r2, r6
 8008e4a:	463b      	mov	r3, r7
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e52:	f000 b869 	b.w	8008f28 <_write_r>

08008e56 <__sseek>:
 8008e56:	b510      	push	{r4, lr}
 8008e58:	460c      	mov	r4, r1
 8008e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e5e:	f000 f9a3 	bl	80091a8 <_lseek_r>
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	bf15      	itete	ne
 8008e68:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e72:	81a3      	strheq	r3, [r4, #12]
 8008e74:	bf18      	it	ne
 8008e76:	81a3      	strhne	r3, [r4, #12]
 8008e78:	bd10      	pop	{r4, pc}

08008e7a <__sclose>:
 8008e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7e:	f000 b8d3 	b.w	8009028 <_close_r>
	...

08008e84 <__swbuf_r>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	460e      	mov	r6, r1
 8008e88:	4614      	mov	r4, r2
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	b118      	cbz	r0, 8008e96 <__swbuf_r+0x12>
 8008e8e:	6983      	ldr	r3, [r0, #24]
 8008e90:	b90b      	cbnz	r3, 8008e96 <__swbuf_r+0x12>
 8008e92:	f7ff fa31 	bl	80082f8 <__sinit>
 8008e96:	4b21      	ldr	r3, [pc, #132]	; (8008f1c <__swbuf_r+0x98>)
 8008e98:	429c      	cmp	r4, r3
 8008e9a:	d12a      	bne.n	8008ef2 <__swbuf_r+0x6e>
 8008e9c:	686c      	ldr	r4, [r5, #4]
 8008e9e:	69a3      	ldr	r3, [r4, #24]
 8008ea0:	60a3      	str	r3, [r4, #8]
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	071a      	lsls	r2, r3, #28
 8008ea6:	d52e      	bpl.n	8008f06 <__swbuf_r+0x82>
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	b363      	cbz	r3, 8008f06 <__swbuf_r+0x82>
 8008eac:	6923      	ldr	r3, [r4, #16]
 8008eae:	6820      	ldr	r0, [r4, #0]
 8008eb0:	1ac0      	subs	r0, r0, r3
 8008eb2:	6963      	ldr	r3, [r4, #20]
 8008eb4:	b2f6      	uxtb	r6, r6
 8008eb6:	4283      	cmp	r3, r0
 8008eb8:	4637      	mov	r7, r6
 8008eba:	dc04      	bgt.n	8008ec6 <__swbuf_r+0x42>
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 f948 	bl	8009154 <_fflush_r>
 8008ec4:	bb28      	cbnz	r0, 8008f12 <__swbuf_r+0x8e>
 8008ec6:	68a3      	ldr	r3, [r4, #8]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	60a3      	str	r3, [r4, #8]
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	6022      	str	r2, [r4, #0]
 8008ed2:	701e      	strb	r6, [r3, #0]
 8008ed4:	6963      	ldr	r3, [r4, #20]
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	4283      	cmp	r3, r0
 8008eda:	d004      	beq.n	8008ee6 <__swbuf_r+0x62>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	07db      	lsls	r3, r3, #31
 8008ee0:	d519      	bpl.n	8008f16 <__swbuf_r+0x92>
 8008ee2:	2e0a      	cmp	r6, #10
 8008ee4:	d117      	bne.n	8008f16 <__swbuf_r+0x92>
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f000 f933 	bl	8009154 <_fflush_r>
 8008eee:	b190      	cbz	r0, 8008f16 <__swbuf_r+0x92>
 8008ef0:	e00f      	b.n	8008f12 <__swbuf_r+0x8e>
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <__swbuf_r+0x9c>)
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	d101      	bne.n	8008efc <__swbuf_r+0x78>
 8008ef8:	68ac      	ldr	r4, [r5, #8]
 8008efa:	e7d0      	b.n	8008e9e <__swbuf_r+0x1a>
 8008efc:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <__swbuf_r+0xa0>)
 8008efe:	429c      	cmp	r4, r3
 8008f00:	bf08      	it	eq
 8008f02:	68ec      	ldreq	r4, [r5, #12]
 8008f04:	e7cb      	b.n	8008e9e <__swbuf_r+0x1a>
 8008f06:	4621      	mov	r1, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f000 f81f 	bl	8008f4c <__swsetup_r>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d0cc      	beq.n	8008eac <__swbuf_r+0x28>
 8008f12:	f04f 37ff 	mov.w	r7, #4294967295
 8008f16:	4638      	mov	r0, r7
 8008f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	08009454 	.word	0x08009454
 8008f20:	08009474 	.word	0x08009474
 8008f24:	08009434 	.word	0x08009434

08008f28 <_write_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4c07      	ldr	r4, [pc, #28]	; (8008f48 <_write_r+0x20>)
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	4608      	mov	r0, r1
 8008f30:	4611      	mov	r1, r2
 8008f32:	2200      	movs	r2, #0
 8008f34:	6022      	str	r2, [r4, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	f7f8 fbaf 	bl	800169a <_write>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d102      	bne.n	8008f46 <_write_r+0x1e>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	b103      	cbz	r3, 8008f46 <_write_r+0x1e>
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	200042b0 	.word	0x200042b0

08008f4c <__swsetup_r>:
 8008f4c:	4b32      	ldr	r3, [pc, #200]	; (8009018 <__swsetup_r+0xcc>)
 8008f4e:	b570      	push	{r4, r5, r6, lr}
 8008f50:	681d      	ldr	r5, [r3, #0]
 8008f52:	4606      	mov	r6, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	b125      	cbz	r5, 8008f62 <__swsetup_r+0x16>
 8008f58:	69ab      	ldr	r3, [r5, #24]
 8008f5a:	b913      	cbnz	r3, 8008f62 <__swsetup_r+0x16>
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f7ff f9cb 	bl	80082f8 <__sinit>
 8008f62:	4b2e      	ldr	r3, [pc, #184]	; (800901c <__swsetup_r+0xd0>)
 8008f64:	429c      	cmp	r4, r3
 8008f66:	d10f      	bne.n	8008f88 <__swsetup_r+0x3c>
 8008f68:	686c      	ldr	r4, [r5, #4]
 8008f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	0715      	lsls	r5, r2, #28
 8008f72:	d42c      	bmi.n	8008fce <__swsetup_r+0x82>
 8008f74:	06d0      	lsls	r0, r2, #27
 8008f76:	d411      	bmi.n	8008f9c <__swsetup_r+0x50>
 8008f78:	2209      	movs	r2, #9
 8008f7a:	6032      	str	r2, [r6, #0]
 8008f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f80:	81a3      	strh	r3, [r4, #12]
 8008f82:	f04f 30ff 	mov.w	r0, #4294967295
 8008f86:	e03e      	b.n	8009006 <__swsetup_r+0xba>
 8008f88:	4b25      	ldr	r3, [pc, #148]	; (8009020 <__swsetup_r+0xd4>)
 8008f8a:	429c      	cmp	r4, r3
 8008f8c:	d101      	bne.n	8008f92 <__swsetup_r+0x46>
 8008f8e:	68ac      	ldr	r4, [r5, #8]
 8008f90:	e7eb      	b.n	8008f6a <__swsetup_r+0x1e>
 8008f92:	4b24      	ldr	r3, [pc, #144]	; (8009024 <__swsetup_r+0xd8>)
 8008f94:	429c      	cmp	r4, r3
 8008f96:	bf08      	it	eq
 8008f98:	68ec      	ldreq	r4, [r5, #12]
 8008f9a:	e7e6      	b.n	8008f6a <__swsetup_r+0x1e>
 8008f9c:	0751      	lsls	r1, r2, #29
 8008f9e:	d512      	bpl.n	8008fc6 <__swsetup_r+0x7a>
 8008fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fa2:	b141      	cbz	r1, 8008fb6 <__swsetup_r+0x6a>
 8008fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fa8:	4299      	cmp	r1, r3
 8008faa:	d002      	beq.n	8008fb2 <__swsetup_r+0x66>
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7ff fd2d 	bl	8008a0c <_free_r>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6063      	str	r3, [r4, #4]
 8008fc2:	6923      	ldr	r3, [r4, #16]
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	f043 0308 	orr.w	r3, r3, #8
 8008fcc:	81a3      	strh	r3, [r4, #12]
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	b94b      	cbnz	r3, 8008fe6 <__swsetup_r+0x9a>
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fdc:	d003      	beq.n	8008fe6 <__swsetup_r+0x9a>
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 f917 	bl	8009214 <__smakebuf_r>
 8008fe6:	89a2      	ldrh	r2, [r4, #12]
 8008fe8:	f012 0301 	ands.w	r3, r2, #1
 8008fec:	d00c      	beq.n	8009008 <__swsetup_r+0xbc>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60a3      	str	r3, [r4, #8]
 8008ff2:	6963      	ldr	r3, [r4, #20]
 8008ff4:	425b      	negs	r3, r3
 8008ff6:	61a3      	str	r3, [r4, #24]
 8008ff8:	6923      	ldr	r3, [r4, #16]
 8008ffa:	b953      	cbnz	r3, 8009012 <__swsetup_r+0xc6>
 8008ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009000:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009004:	d1ba      	bne.n	8008f7c <__swsetup_r+0x30>
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	0792      	lsls	r2, r2, #30
 800900a:	bf58      	it	pl
 800900c:	6963      	ldrpl	r3, [r4, #20]
 800900e:	60a3      	str	r3, [r4, #8]
 8009010:	e7f2      	b.n	8008ff8 <__swsetup_r+0xac>
 8009012:	2000      	movs	r0, #0
 8009014:	e7f7      	b.n	8009006 <__swsetup_r+0xba>
 8009016:	bf00      	nop
 8009018:	20000010 	.word	0x20000010
 800901c:	08009454 	.word	0x08009454
 8009020:	08009474 	.word	0x08009474
 8009024:	08009434 	.word	0x08009434

08009028 <_close_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4c06      	ldr	r4, [pc, #24]	; (8009044 <_close_r+0x1c>)
 800902c:	2300      	movs	r3, #0
 800902e:	4605      	mov	r5, r0
 8009030:	4608      	mov	r0, r1
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	f7f8 fb4d 	bl	80016d2 <_close>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_close_r+0x1a>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	b103      	cbz	r3, 8009042 <_close_r+0x1a>
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	200042b0 	.word	0x200042b0

08009048 <__sflush_r>:
 8009048:	898a      	ldrh	r2, [r1, #12]
 800904a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904e:	4605      	mov	r5, r0
 8009050:	0710      	lsls	r0, r2, #28
 8009052:	460c      	mov	r4, r1
 8009054:	d458      	bmi.n	8009108 <__sflush_r+0xc0>
 8009056:	684b      	ldr	r3, [r1, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	dc05      	bgt.n	8009068 <__sflush_r+0x20>
 800905c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	dc02      	bgt.n	8009068 <__sflush_r+0x20>
 8009062:	2000      	movs	r0, #0
 8009064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800906a:	2e00      	cmp	r6, #0
 800906c:	d0f9      	beq.n	8009062 <__sflush_r+0x1a>
 800906e:	2300      	movs	r3, #0
 8009070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009074:	682f      	ldr	r7, [r5, #0]
 8009076:	6a21      	ldr	r1, [r4, #32]
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	d032      	beq.n	80090e2 <__sflush_r+0x9a>
 800907c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	075a      	lsls	r2, r3, #29
 8009082:	d505      	bpl.n	8009090 <__sflush_r+0x48>
 8009084:	6863      	ldr	r3, [r4, #4]
 8009086:	1ac0      	subs	r0, r0, r3
 8009088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800908a:	b10b      	cbz	r3, 8009090 <__sflush_r+0x48>
 800908c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800908e:	1ac0      	subs	r0, r0, r3
 8009090:	2300      	movs	r3, #0
 8009092:	4602      	mov	r2, r0
 8009094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009096:	6a21      	ldr	r1, [r4, #32]
 8009098:	4628      	mov	r0, r5
 800909a:	47b0      	blx	r6
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	d106      	bne.n	80090b0 <__sflush_r+0x68>
 80090a2:	6829      	ldr	r1, [r5, #0]
 80090a4:	291d      	cmp	r1, #29
 80090a6:	d848      	bhi.n	800913a <__sflush_r+0xf2>
 80090a8:	4a29      	ldr	r2, [pc, #164]	; (8009150 <__sflush_r+0x108>)
 80090aa:	40ca      	lsrs	r2, r1
 80090ac:	07d6      	lsls	r6, r2, #31
 80090ae:	d544      	bpl.n	800913a <__sflush_r+0xf2>
 80090b0:	2200      	movs	r2, #0
 80090b2:	6062      	str	r2, [r4, #4]
 80090b4:	04d9      	lsls	r1, r3, #19
 80090b6:	6922      	ldr	r2, [r4, #16]
 80090b8:	6022      	str	r2, [r4, #0]
 80090ba:	d504      	bpl.n	80090c6 <__sflush_r+0x7e>
 80090bc:	1c42      	adds	r2, r0, #1
 80090be:	d101      	bne.n	80090c4 <__sflush_r+0x7c>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b903      	cbnz	r3, 80090c6 <__sflush_r+0x7e>
 80090c4:	6560      	str	r0, [r4, #84]	; 0x54
 80090c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090c8:	602f      	str	r7, [r5, #0]
 80090ca:	2900      	cmp	r1, #0
 80090cc:	d0c9      	beq.n	8009062 <__sflush_r+0x1a>
 80090ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d2:	4299      	cmp	r1, r3
 80090d4:	d002      	beq.n	80090dc <__sflush_r+0x94>
 80090d6:	4628      	mov	r0, r5
 80090d8:	f7ff fc98 	bl	8008a0c <_free_r>
 80090dc:	2000      	movs	r0, #0
 80090de:	6360      	str	r0, [r4, #52]	; 0x34
 80090e0:	e7c0      	b.n	8009064 <__sflush_r+0x1c>
 80090e2:	2301      	movs	r3, #1
 80090e4:	4628      	mov	r0, r5
 80090e6:	47b0      	blx	r6
 80090e8:	1c41      	adds	r1, r0, #1
 80090ea:	d1c8      	bne.n	800907e <__sflush_r+0x36>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0c5      	beq.n	800907e <__sflush_r+0x36>
 80090f2:	2b1d      	cmp	r3, #29
 80090f4:	d001      	beq.n	80090fa <__sflush_r+0xb2>
 80090f6:	2b16      	cmp	r3, #22
 80090f8:	d101      	bne.n	80090fe <__sflush_r+0xb6>
 80090fa:	602f      	str	r7, [r5, #0]
 80090fc:	e7b1      	b.n	8009062 <__sflush_r+0x1a>
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	e7ad      	b.n	8009064 <__sflush_r+0x1c>
 8009108:	690f      	ldr	r7, [r1, #16]
 800910a:	2f00      	cmp	r7, #0
 800910c:	d0a9      	beq.n	8009062 <__sflush_r+0x1a>
 800910e:	0793      	lsls	r3, r2, #30
 8009110:	680e      	ldr	r6, [r1, #0]
 8009112:	bf08      	it	eq
 8009114:	694b      	ldreq	r3, [r1, #20]
 8009116:	600f      	str	r7, [r1, #0]
 8009118:	bf18      	it	ne
 800911a:	2300      	movne	r3, #0
 800911c:	eba6 0807 	sub.w	r8, r6, r7
 8009120:	608b      	str	r3, [r1, #8]
 8009122:	f1b8 0f00 	cmp.w	r8, #0
 8009126:	dd9c      	ble.n	8009062 <__sflush_r+0x1a>
 8009128:	4643      	mov	r3, r8
 800912a:	463a      	mov	r2, r7
 800912c:	6a21      	ldr	r1, [r4, #32]
 800912e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009130:	4628      	mov	r0, r5
 8009132:	47b0      	blx	r6
 8009134:	2800      	cmp	r0, #0
 8009136:	dc06      	bgt.n	8009146 <__sflush_r+0xfe>
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800913e:	81a3      	strh	r3, [r4, #12]
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
 8009144:	e78e      	b.n	8009064 <__sflush_r+0x1c>
 8009146:	4407      	add	r7, r0
 8009148:	eba8 0800 	sub.w	r8, r8, r0
 800914c:	e7e9      	b.n	8009122 <__sflush_r+0xda>
 800914e:	bf00      	nop
 8009150:	20400001 	.word	0x20400001

08009154 <_fflush_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	690b      	ldr	r3, [r1, #16]
 8009158:	4605      	mov	r5, r0
 800915a:	460c      	mov	r4, r1
 800915c:	b1db      	cbz	r3, 8009196 <_fflush_r+0x42>
 800915e:	b118      	cbz	r0, 8009168 <_fflush_r+0x14>
 8009160:	6983      	ldr	r3, [r0, #24]
 8009162:	b90b      	cbnz	r3, 8009168 <_fflush_r+0x14>
 8009164:	f7ff f8c8 	bl	80082f8 <__sinit>
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <_fflush_r+0x48>)
 800916a:	429c      	cmp	r4, r3
 800916c:	d109      	bne.n	8009182 <_fflush_r+0x2e>
 800916e:	686c      	ldr	r4, [r5, #4]
 8009170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009174:	b17b      	cbz	r3, 8009196 <_fflush_r+0x42>
 8009176:	4621      	mov	r1, r4
 8009178:	4628      	mov	r0, r5
 800917a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800917e:	f7ff bf63 	b.w	8009048 <__sflush_r>
 8009182:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <_fflush_r+0x4c>)
 8009184:	429c      	cmp	r4, r3
 8009186:	d101      	bne.n	800918c <_fflush_r+0x38>
 8009188:	68ac      	ldr	r4, [r5, #8]
 800918a:	e7f1      	b.n	8009170 <_fflush_r+0x1c>
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <_fflush_r+0x50>)
 800918e:	429c      	cmp	r4, r3
 8009190:	bf08      	it	eq
 8009192:	68ec      	ldreq	r4, [r5, #12]
 8009194:	e7ec      	b.n	8009170 <_fflush_r+0x1c>
 8009196:	2000      	movs	r0, #0
 8009198:	bd38      	pop	{r3, r4, r5, pc}
 800919a:	bf00      	nop
 800919c:	08009454 	.word	0x08009454
 80091a0:	08009474 	.word	0x08009474
 80091a4:	08009434 	.word	0x08009434

080091a8 <_lseek_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4c07      	ldr	r4, [pc, #28]	; (80091c8 <_lseek_r+0x20>)
 80091ac:	4605      	mov	r5, r0
 80091ae:	4608      	mov	r0, r1
 80091b0:	4611      	mov	r1, r2
 80091b2:	2200      	movs	r2, #0
 80091b4:	6022      	str	r2, [r4, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	f7f8 fab2 	bl	8001720 <_lseek>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_lseek_r+0x1e>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_lseek_r+0x1e>
 80091c4:	602b      	str	r3, [r5, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	200042b0 	.word	0x200042b0

080091cc <__swhatbuf_r>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	460e      	mov	r6, r1
 80091d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d4:	2900      	cmp	r1, #0
 80091d6:	b096      	sub	sp, #88	; 0x58
 80091d8:	4614      	mov	r4, r2
 80091da:	461d      	mov	r5, r3
 80091dc:	da07      	bge.n	80091ee <__swhatbuf_r+0x22>
 80091de:	2300      	movs	r3, #0
 80091e0:	602b      	str	r3, [r5, #0]
 80091e2:	89b3      	ldrh	r3, [r6, #12]
 80091e4:	061a      	lsls	r2, r3, #24
 80091e6:	d410      	bmi.n	800920a <__swhatbuf_r+0x3e>
 80091e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ec:	e00e      	b.n	800920c <__swhatbuf_r+0x40>
 80091ee:	466a      	mov	r2, sp
 80091f0:	f000 f884 	bl	80092fc <_fstat_r>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	dbf2      	blt.n	80091de <__swhatbuf_r+0x12>
 80091f8:	9a01      	ldr	r2, [sp, #4]
 80091fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009202:	425a      	negs	r2, r3
 8009204:	415a      	adcs	r2, r3
 8009206:	602a      	str	r2, [r5, #0]
 8009208:	e7ee      	b.n	80091e8 <__swhatbuf_r+0x1c>
 800920a:	2340      	movs	r3, #64	; 0x40
 800920c:	2000      	movs	r0, #0
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	b016      	add	sp, #88	; 0x58
 8009212:	bd70      	pop	{r4, r5, r6, pc}

08009214 <__smakebuf_r>:
 8009214:	898b      	ldrh	r3, [r1, #12]
 8009216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009218:	079d      	lsls	r5, r3, #30
 800921a:	4606      	mov	r6, r0
 800921c:	460c      	mov	r4, r1
 800921e:	d507      	bpl.n	8009230 <__smakebuf_r+0x1c>
 8009220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	6123      	str	r3, [r4, #16]
 8009228:	2301      	movs	r3, #1
 800922a:	6163      	str	r3, [r4, #20]
 800922c:	b002      	add	sp, #8
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	ab01      	add	r3, sp, #4
 8009232:	466a      	mov	r2, sp
 8009234:	f7ff ffca 	bl	80091cc <__swhatbuf_r>
 8009238:	9900      	ldr	r1, [sp, #0]
 800923a:	4605      	mov	r5, r0
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff fc33 	bl	8008aa8 <_malloc_r>
 8009242:	b948      	cbnz	r0, 8009258 <__smakebuf_r+0x44>
 8009244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009248:	059a      	lsls	r2, r3, #22
 800924a:	d4ef      	bmi.n	800922c <__smakebuf_r+0x18>
 800924c:	f023 0303 	bic.w	r3, r3, #3
 8009250:	f043 0302 	orr.w	r3, r3, #2
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	e7e3      	b.n	8009220 <__smakebuf_r+0xc>
 8009258:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <__smakebuf_r+0x7c>)
 800925a:	62b3      	str	r3, [r6, #40]	; 0x28
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	6020      	str	r0, [r4, #0]
 8009260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009264:	81a3      	strh	r3, [r4, #12]
 8009266:	9b00      	ldr	r3, [sp, #0]
 8009268:	6163      	str	r3, [r4, #20]
 800926a:	9b01      	ldr	r3, [sp, #4]
 800926c:	6120      	str	r0, [r4, #16]
 800926e:	b15b      	cbz	r3, 8009288 <__smakebuf_r+0x74>
 8009270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009274:	4630      	mov	r0, r6
 8009276:	f000 f853 	bl	8009320 <_isatty_r>
 800927a:	b128      	cbz	r0, 8009288 <__smakebuf_r+0x74>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f023 0303 	bic.w	r3, r3, #3
 8009282:	f043 0301 	orr.w	r3, r3, #1
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	431d      	orrs	r5, r3
 800928c:	81a5      	strh	r5, [r4, #12]
 800928e:	e7cd      	b.n	800922c <__smakebuf_r+0x18>
 8009290:	080082c1 	.word	0x080082c1

08009294 <__ascii_mbtowc>:
 8009294:	b082      	sub	sp, #8
 8009296:	b901      	cbnz	r1, 800929a <__ascii_mbtowc+0x6>
 8009298:	a901      	add	r1, sp, #4
 800929a:	b142      	cbz	r2, 80092ae <__ascii_mbtowc+0x1a>
 800929c:	b14b      	cbz	r3, 80092b2 <__ascii_mbtowc+0x1e>
 800929e:	7813      	ldrb	r3, [r2, #0]
 80092a0:	600b      	str	r3, [r1, #0]
 80092a2:	7812      	ldrb	r2, [r2, #0]
 80092a4:	1c10      	adds	r0, r2, #0
 80092a6:	bf18      	it	ne
 80092a8:	2001      	movne	r0, #1
 80092aa:	b002      	add	sp, #8
 80092ac:	4770      	bx	lr
 80092ae:	4610      	mov	r0, r2
 80092b0:	e7fb      	b.n	80092aa <__ascii_mbtowc+0x16>
 80092b2:	f06f 0001 	mvn.w	r0, #1
 80092b6:	e7f8      	b.n	80092aa <__ascii_mbtowc+0x16>

080092b8 <__malloc_lock>:
 80092b8:	4770      	bx	lr

080092ba <__malloc_unlock>:
 80092ba:	4770      	bx	lr

080092bc <_read_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4c07      	ldr	r4, [pc, #28]	; (80092dc <_read_r+0x20>)
 80092c0:	4605      	mov	r5, r0
 80092c2:	4608      	mov	r0, r1
 80092c4:	4611      	mov	r1, r2
 80092c6:	2200      	movs	r2, #0
 80092c8:	6022      	str	r2, [r4, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	f7f8 f9c8 	bl	8001660 <_read>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_read_r+0x1e>
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	b103      	cbz	r3, 80092da <_read_r+0x1e>
 80092d8:	602b      	str	r3, [r5, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	200042b0 	.word	0x200042b0

080092e0 <__ascii_wctomb>:
 80092e0:	b149      	cbz	r1, 80092f6 <__ascii_wctomb+0x16>
 80092e2:	2aff      	cmp	r2, #255	; 0xff
 80092e4:	bf85      	ittet	hi
 80092e6:	238a      	movhi	r3, #138	; 0x8a
 80092e8:	6003      	strhi	r3, [r0, #0]
 80092ea:	700a      	strbls	r2, [r1, #0]
 80092ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80092f0:	bf98      	it	ls
 80092f2:	2001      	movls	r0, #1
 80092f4:	4770      	bx	lr
 80092f6:	4608      	mov	r0, r1
 80092f8:	4770      	bx	lr
	...

080092fc <_fstat_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4c07      	ldr	r4, [pc, #28]	; (800931c <_fstat_r+0x20>)
 8009300:	2300      	movs	r3, #0
 8009302:	4605      	mov	r5, r0
 8009304:	4608      	mov	r0, r1
 8009306:	4611      	mov	r1, r2
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	f7f8 f9ee 	bl	80016ea <_fstat>
 800930e:	1c43      	adds	r3, r0, #1
 8009310:	d102      	bne.n	8009318 <_fstat_r+0x1c>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	b103      	cbz	r3, 8009318 <_fstat_r+0x1c>
 8009316:	602b      	str	r3, [r5, #0]
 8009318:	bd38      	pop	{r3, r4, r5, pc}
 800931a:	bf00      	nop
 800931c:	200042b0 	.word	0x200042b0

08009320 <_isatty_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4c06      	ldr	r4, [pc, #24]	; (800933c <_isatty_r+0x1c>)
 8009324:	2300      	movs	r3, #0
 8009326:	4605      	mov	r5, r0
 8009328:	4608      	mov	r0, r1
 800932a:	6023      	str	r3, [r4, #0]
 800932c:	f7f8 f9ed 	bl	800170a <_isatty>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d102      	bne.n	800933a <_isatty_r+0x1a>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	b103      	cbz	r3, 800933a <_isatty_r+0x1a>
 8009338:	602b      	str	r3, [r5, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	200042b0 	.word	0x200042b0

08009340 <_init>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr

0800934c <_fini>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr
